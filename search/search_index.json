{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Click on the menu on the top to explore the pages.</p>"},{"location":"#about-me","title":"About me","text":"<ul> <li>AffinitoAlessandro.it</li> <li>Github</li> <li>LinkedIn</li> <li>Soundcloud</li> <li>YouTube</li> </ul>"},{"location":"#support-my-work","title":"Support my work!","text":"<p>\u27a1\ufe0f Buy me a coffee! \u27a1\ufe0f Sponsor me on GitHub! \u2b07\ufe0f Or read my book! </p> <p>I've been dedicated to creating free content for years, pouring countless hours into research, writing, and editing. Your support would mean the world to me and help me continue producing high-quality content. By sponsoring my work, you're not just helping me, but also validating the value of the information I provide. Thank you for considering!</p> <p></p>"},{"location":"Features/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"Features/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"books/Go%20Domain%20Driven%20Design/","title":"Go Domain Driven Design","text":"<p>**</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#progettazione-guidata-dal-dominio-in-go-guida-completa","title":"Progettazione Guidata dal Dominio in Go: Guida Completa","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#costruire-applicazioni-enterprise-scalabili-con-go-aws-sveltekit-e-cqrs","title":"Costruire applicazioni enterprise scalabili con Go, AWS, SvelteKit e CQRS","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#versione-estesa-applicazione-where-should-i-be-con-sveltekit","title":"Versione Estesa - Applicazione \"Where Should I Be?\" con SvelteKit","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#indice","title":"Indice","text":"<ul> <li>Parte I: Fondamenta e Contesto</li> <li>Go Domain Driven Design#Capitolo 1 L'Importanza del Software Aziendale Moderno</li> <li> <p>Capitolo 2: L'Applicazione di Esempio: \"Where Should I Be?\"</p> </li> <li> <p>Capitolo 3: Architettura del Backend e Comunicazione tra Servizi</p> </li> <li> <p>Capitolo 4: Autenticazione e Sicurezza su AWS</p> </li> <li> <p>Capitolo 5: Scelte Architetturali: Server vs. Serverless</p> </li> </ul> <p>Parte II: Progettazione Tattica con DDD</p> <ul> <li> <p>Capitolo 6: Introduzione al Domain-Driven Design</p> </li> <li> <p>Capitolo 7: Ubiquitous Language - Il Linguaggio Condiviso</p> </li> <li> <p>Capitolo 8: Aggregates e Confini di Consistenza</p> </li> <li> <p>Capitolo 9: Value Objects e Immutabilit\u00e0</p> </li> <li> <p>Capitolo 10: Entities e Identit\u00e0 nel Ciclo di Vita</p> </li> <li> <p>Capitolo 11: Domain Services</p> </li> </ul> <p>Parte III: Architettura Pulita e Pattern Avanzati</p> <ul> <li> <p>Capitolo 12: Clean Architecture e Separazione delle Responsabilit\u00e0</p> </li> <li> <p>Capitolo 13: Repository Pattern e Astrazione della Persistenza</p> </li> <li> <p>Capitolo 14: Dependency Injection Professionale in Go</p> </li> <li> <p>Capitolo 15: CQRS e Event Sourcing</p> </li> </ul> <p>Parte IV: Progettazione Strategica</p> <ul> <li> <p>Capitolo 16: Bounded Contexts</p> </li> <li> <p>Capitolo 17: Event Storming: Dalla Specifica al Design</p> </li> <li> <p>Capitolo 18: Context Mapping</p> </li> </ul> <p>Parte V: Integrazione e API Robuste</p> <ul> <li> <p>Capitolo 19: OpenAPI 3.1: Il Contratto tra Frontend e Backend</p> </li> <li> <p>Capitolo 20: Gestione della Concorrenza e delle Sessioni HTTP in Go</p> </li> <li> <p>Capitolo 21: Integrazione Resiliente con OpenAI</p> </li> </ul> <p>Parte VI: Persistenza Scalabile su AWS</p> <ul> <li> <p>Capitolo 22: Disaccoppiare la Persistenza con Lambda e SQS</p> </li> <li> <p>Capitolo 23: Scelta del Database su AWS: DynamoDB per Costo ed Efficienza</p> </li> <li> <p>Capitolo 24: Una Strategia di Testing Completa</p> </li> </ul> <p>Parte VII: Sviluppo, Deployment e Operations</p> <ul> <li> <p>Capitolo 25: Frontend Moderno con SvelteKit</p> </li> <li> <p>Capitolo 26: Il Ciclo di Sviluppo Iterativo di Due Settimane</p> </li> <li> <p>Capitolo 27: Infrastructure as Code (IaC) con AWS CDK</p> </li> <li> <p>Capitolo 28: CI/CD, Sicurezza e Deployment Continuo</p> </li> <li> <p>Capitolo 29: Monitoring e Observability con AWS X-Ray e CloudWatch</p> </li> <li> <p>Capitolo 30: Conclusioni e Prossimi Passi</p> </li> <li> <p>Capitolo 25: Frontend Moderno con SvelteKit</p> </li> <li> <p>Capitolo 26: Il Ciclo di Sviluppo Iterativo di Due Settimane</p> </li> <li> <p>Capitolo 27: Infrastructure as Code (IaC) con AWS CDK</p> </li> <li> <p>Capitolo 28: CI/CD, Sicurezza e Deployment Continuo</p> </li> <li> <p>Capitolo 29: Monitoring e Observability con AWS X-Ray e CloudWatch</p> </li> <li> <p>Capitolo 30: Conclusioni e Prossimi Passi</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-i-fondamenta-e-contesto","title":"Parte I: Fondamenta e Contesto","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-1-limportanza-del-software-aziendale-moderno","title":"Capitolo 1: L'Importanza del Software Aziendale Moderno","text":"<p>Benvenuti al primo capitolo del nostro viaggio nella costruzione di software enterprise robusto e scalabile. Prima di immergerci nel codice Go, nelle architetture cloud e nei pattern di progettazione, \u00e8 fondamentale fare un passo indietro e capire il \"perch\u00e9\". Perch\u00e9 la progettazione del software \u00e8 diventata cos\u00ec cruciale? Quali sfide definiscono lo sviluppo di applicazioni moderne e come possiamo attrezzarci per vincerle?</p> <p>Questo capitolo esplora il panorama attuale dello sviluppo software, delineando le forze che spingono verso approcci pi\u00f9 sofisticati come il Domain-Driven Design (DDD) e le architetture a microservizi.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#11-oltre-le-applicazioni-crud","title":"1.1. Oltre le Applicazioni CRUD","text":"<p>Per molti anni, gran parte dello sviluppo software aziendale poteva essere riassunto con l'acronimo CRUD: Create, Read, Update, Delete. Si trattava di costruire interfacce, spesso per il web, che fungevano da involucro gradevole per un database relazionale. La logica di business era minima e spesso relegata a stored procedure o a semplici validazioni lato server.</p> <p>Questo modello non \u00e8 scomparso, ma rappresenta oggi solo una piccola frazione delle sfide che affrontiamo. Il software moderno deve fare molto di pi\u00f9:</p> <ul> <li> <p>Gestire una Complessit\u00e0 Esponenziale: I modelli di business sono diventati pi\u00f9 complessi. Pensiamo alla nostra applicazione \"Where Should I Be?\": non si tratta solo di salvare un \"viaggio\" in un database. Dobbiamo gestire le preferenze degli utenti, integrare l'intelligenza artificiale per i suggerimenti, calcolare itinerari ottimali e forse, in futuro, gestire prenotazioni e pagamenti. Questa non \u00e8 una complessit\u00e0 tecnica, \u00e8 una complessit\u00e0 di dominio.</p> </li> <li> <p>Scalare per un Pubblico Globale: Grazie al cloud, un'applicazione pu\u00f2 raggiungere milioni di utenti dal giorno uno. Questo impone requisiti di performance, resilienza e disponibilit\u00e0 che erano impensabili per le vecchie applicazioni monolitiche on-premise.</p> </li> <li> <p>Rispondere Rapidamente al Mercato: Il business non aspetta. La capacit\u00e0 di rilasciare nuove funzionalit\u00e0 in modo rapido, sicuro e indipendente \u00e8 un vantaggio competitivo enorme. Un'architettura monolitica, dove ogni piccola modifica richiede il test e il deployment dell'intera applicazione, \u00e8 un freno all'agilit\u00e0.</p> </li> <li> <p>Essere Resiliente ai Fallimenti: In un sistema distribuito, il fallimento non \u00e8 un'opzione, \u00e8 una certezza. Un servizio esterno potrebbe non rispondere, un database potrebbe avere un picco di latenza, una rete potrebbe essere instabile. Il software moderno deve essere progettato per \"degradare con grazia\" anzich\u00e9 crollare completamente.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#12-la-risposta-architetturale","title":"1.2. La Risposta Architetturale","text":"<p>Per affrontare queste sfide, l'industria si \u00e8 mossa verso nuovi paradigmi architetturali. In questo libro, ne esploreremo e implementeremo diversi:</p> <ul> <li> <p>Domain-Driven Design (DDD): Come vedremo, il DDD \u00e8 l'approccio principale per domare la complessit\u00e0 del dominio. Ci impone di concentrarci sul cuore del problema di business e di creare un modello software che lo rifletta fedelmente.</p> </li> <li> <p>Microservizi: Invece di un unico, grande monolite, l'applicazione viene scomposta in servizi pi\u00f9 piccoli e indipendenti, ognuno responsabile di una specifica area di business (es. servizio Utenti, servizio Viaggi, servizio Suggerimenti). Questo favorisce l'agilit\u00e0, la scalabilit\u00e0 selettiva e la resilienza.</p> </li> <li> <p>Cloud Native e Serverless: Sfruttare appieno la potenza del cloud (in particolare AWS, nel nostro caso) significa progettare applicazioni che non sono semplicemente \"ospitate\" nel cloud, ma che ne utilizzano i servizi gestiti (database, code, funzioni serverless) per ridurre il carico operativo e aumentare l'efficienza.</p> </li> <li> <p>CQRS (Command Query Responsibility Segregation): Un pattern potente che separa le operazioni di scrittura (Comandi) da quelle di lettura (Query). Questo ci permette di ottimizzare in modo indipendente i percorsi di dati, migliorando performance e scalabilit\u00e0, come vedremo nel dettaglio pi\u00f9 avanti.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#13-perche-go","title":"1.3. Perch\u00e9 Go?","text":"<p>In questo scenario, il linguaggio di programmazione Go (spesso chiamato Golang) si \u00e8 ritagliato un ruolo da protagonista per lo sviluppo backend. Le sue caratteristiche lo rendono una scelta eccellente per il software enterprise moderno:</p> <ol> <li> <p>Semplicit\u00e0 e Leggibilit\u00e0: Go ha una sintassi minimale e un set di funzionalit\u00e0 ortogonali. Questo riduce il carico cognitivo per gli sviluppatori e rende le codebase pi\u00f9 facili da mantenere nel tempo, un fattore critico nei progetti a lungo termine.</p> </li> <li> <p>Prestazioni Eccellenti: Essendo un linguaggio compilato che produce un singolo binario statico, Go offre performance vicine a quelle di C/C++, ma con la sicurezza della gestione della memoria (garbage collection). \u00c8 ideale per servizi di rete ad alta intensit\u00e0.</p> </li> <li> <p>Concorrenza di Prima Classe: La concorrenza \u00e8 un requisito fondamentale per i sistemi moderni. Le goroutine e i canali di Go offrono un modello di concorrenza semplice e incredibilmente potente, perfetto per gestire migliaia di richieste simultanee in un server HTTP o per processare messaggi da una coda.</p> </li> <li> <p>Ecosistema Robusto per il Cloud: Go \u00e8 il linguaggio con cui sono stati costruiti molti degli strumenti fondamentali del mondo cloud native, come Docker e Kubernetes. La sua toolchain, i test integrati e la facilit\u00e0 di cross-compilazione lo rendono perfetto per la containerizzazione e il deployment in ambienti cloud.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#14-obiettivo-del-libro","title":"1.4. Obiettivo del Libro","text":"<p>L'obiettivo di questo libro non \u00e8 solo insegnarvi a scrivere codice Go. \u00c8 insegnarvi a pensare come un architetto di software. Attraverso la costruzione passo-passo dell'applicazione \"Where Should I Be?\", uniremo la potenza di Go, la flessibilit\u00e0 di AWS e l'espressivit\u00e0 di SvelteKit, tenuti insieme dalla filosofia del Domain-Driven Design.</p> <p>Siete pronti a costruire software che non solo funziona, ma che \u00e8 anche manutenibile, scalabile e allineato ai veri obiettivi di business? Iniziamo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-2-lapplicazione-di-esempio-where-should-i-be","title":"Capitolo 2: L'Applicazione di Esempio: \"Where Should I Be?\"","text":"<p>Per imparare a costruire software complesso, non c'\u00e8 modo migliore che costruirne uno. La teoria \u00e8 fondamentale, ma \u00e8 nell'applicazione pratica che i concetti prendono vita. In questo libro, il nostro campo di battaglia e laboratorio sar\u00e0 un'applicazione reale che chiameremo \"Where Should I Be?\".</p> <p>Questo capitolo introduce il concetto dell'applicazione, i suoi obiettivi di business e le sue funzionalit\u00e0 principali. Comprendere il \"cosa\" stiamo costruendo \u00e8 il primo passo indispensabile prima di decidere \"come\" costruirlo. Questo processo di comprensione del dominio \u00e8 il cuore pulsante del DDD.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#21-il-concetto-pianificazione-di-viaggi-intelligente","title":"2.1. Il Concetto: Pianificazione di Viaggi Intelligente","text":"<p>L'idea di base di \"Where Should I Be?\" \u00e8 semplice da descrivere, ma complessa da realizzare:</p> <p>\"Where Should I Be?\" \u00e8 un'applicazione web che aiuta gli utenti a scoprire nuove destinazioni e a pianificare itinerari di viaggio personalizzati, sfruttando la potenza dell'intelligenza artificiale per fornire suggerimenti unici e pertinenti.</p> <p>L'obiettivo \u00e8 superare le classiche guide di viaggio statiche o i motori di ricerca generici. Vogliamo creare un assistente di viaggio personale che impari a conoscere i gusti dell'utente e lo ispiri con idee che non avrebbe trovato altrove.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#22-il-dominio-di-business","title":"2.2. Il Dominio di Business","text":"<p>Analizziamo il dominio di business per identificare i concetti chiave. Questo \u00e8 il primo passo informale verso la creazione del nostro Ubiquitous Language.</p> <ul> <li> <p>Utente (User): Il protagonista dell'applicazione. Un utente si registra, crea un profilo e gestisce i propri viaggi. Dobbiamo conoscere le sue Preferenze (Preferences): ama l'arte? La natura? Il cibo gourmet? Le avventure estreme? Queste preferenze saranno cruciali per la personalizzazione.</p> </li> <li> <p>Viaggio (Trip): \u00c8 il contenitore principale della pianificazione. Un Viaggio ha un nome (es. \"Weekend a Roma\"), un intervallo di date e un insieme di Tappe (Stops). Ogni Tappa rappresenta una visita a una specifica Localit\u00e0 (Location) in un certo giorno.</p> </li> <li> <p>Localit\u00e0 (Location): Un luogo fisico nel mondo, come il \"Colosseo\" o la \"Torre Eiffel\". Ha attributi come nome, descrizione, coordinate geografiche e categoria (es. museo, ristorante, parco).</p> </li> <li> <p>Suggerimento (Suggestion): Questa \u00e8 la parte \"intelligente\" dell'app. Un utente pu\u00f2 chiedere un suggerimento, ad esempio: \"Suggeriscimi un itinerario di 3 giorni a Lisbona per un amante del cibo e della fotografia\". Il sistema, usando un modello di AI (come quelli offerti da OpenAI), genera un potenziale itinerario che l'utente pu\u00f2 poi importare e modificare nel suo piano di Viaggio.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#23-funzionalita-chiave-user-stories","title":"2.3. Funzionalit\u00e0 Chiave (User Stories)","text":"<p>Traduciamo questi concetti in funzionalit\u00e0 concrete dal punto di vista dell'utente:</p> <ol> <li>Gestione del Profilo Utente:</li> </ol> <p>- Come utente, voglio potermi registrare e accedere in modo sicuro.</p> <p>- Come utente, voglio poter definire e aggiornare le mie preferenze di viaggio (interessi, budget, stile di viaggio).</p> <ol> <li>Pianificazione del Viaggio:</li> </ol> <p>- Come utente, voglio poter creare un nuovo Viaggio specificando una destinazione e delle date.</p> <p>- Come utente, voglio poter aggiungere, rimuovere e riordinare le Tappe all'interno del mio Viaggio.</p> <p>- Come utente, voglio poter visualizzare il mio itinerario su una mappa.</p> <ol> <li>Generazione di Suggerimenti AI:</li> </ol> <p>- Come utente, voglio poter descrivere il tipo di viaggio che desidero in linguaggio naturale.</p> <p>- Come utente, voglio ricevere un itinerario suggerito basato sulla mia richiesta e sulle mie preferenze salvate.</p> <p>- Come utente, voglio poter importare un Suggerimento (o parti di esso) nel mio piano di Viaggio attivo.</p> <ol> <li>Esplorazione:</li> </ol> <p>- Come utente, voglio poter cercare Localit\u00e0 specifiche e leggere informazioni su di esse.</p> <p>- Come utente, voglio poter vedere i viaggi e gli itinerari creati da altri utenti (se resi pubblici).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#24-la-visione-a-lungo-termine","title":"2.4. La Visione a Lungo Termine","text":"<p>Un buon software \u00e8 progettato per evolvere. Mentre la nostra implementazione iniziale si concentrer\u00e0 sulle funzionalit\u00e0 di base, l'architettura che progetteremo deve tenere conto delle possibili evoluzioni future, come:</p> <ul> <li> <p>Collaborazione: Permettere a pi\u00f9 utenti di pianificare un viaggio insieme.</p> </li> <li> <p>Booking: Integrare API di terze parti per prenotare voli, hotel e attivit\u00e0.</p> </li> <li> <p>Gamification: Introdurre badge o punti per gli utenti che completano viaggi o scrivono recensioni.</p> </li> <li> <p>Offline Mode: Permettere l'accesso agli itinerari anche senza connessione a internet.</p> </li> </ul> <p>Avere questa visione ci aiuta a prendere decisioni architetturali pi\u00f9 sagge oggi, evitando di finire in un vicolo cieco domani. Ad esempio, la scelta di usare microservizi (Capitolo 3) ci dar\u00e0 la flessibilit\u00e0 di aggiungere un nuovo servizio \"Booking\" in futuro senza dover stravolgere l'intera applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#25-conclusione","title":"2.5. Conclusione","text":"<p>Ora abbiamo un'idea chiara di \"cosa\" stiamo costruendo. \"Where Should I Be?\" \u00e8 un'applicazione con una significativa complessit\u00e0 di dominio. Non \u00e8 un semplice CRUD. Le relazioni tra Utenti, Preferenze, Viaggi, Tappe e Suggerimenti AI sono ricche e governate da regole di business precise.</p> <p>Questa complessit\u00e0 la rende il candidato ideale per applicare i principi del Domain-Driven Design. Nei prossimi capitoli, inizieremo a definire l'architettura tecnica che dar\u00e0 vita a questa visione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-3-architettura-del-backend-e-comunicazione-tra-servizi","title":"Capitolo 3: Architettura del Backend e Comunicazione tra Servizi","text":"<p>Dopo aver definito il \"perch\u00e9\" (Capitolo 1) e il \"cosa\" (Capitolo 2), \u00e8 il momento di affrontare il \"come\". Come struttureremo il nostro sistema per gestire la complessit\u00e0 del dominio di \"Where Should I Be?\" in modo scalabile e manutenibile? La risposta risiede in un'architettura a microservizi.</p> <p>In questo capitolo, delineeremo l'architettura di alto livello del backend, spiegheremo perch\u00e9 i microservizi sono una scelta vincente per il nostro progetto e definiremo come questi servizi comunicheranno tra loro utilizzando tecnologie moderne come gRPC e REST.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#31-perche-i-microservizi","title":"3.1. Perch\u00e9 i Microservizi?","text":"<p>Un'architettura a microservizi scompone un'applicazione complessa in un insieme di servizi pi\u00f9 piccoli, coesi e autonomi. Ogni servizio \u00e8 responsabile di una specifica capacit\u00e0 di business e pu\u00f2 essere sviluppato, deployato e scalato in modo indipendente.</p> <p>Per \"Where Should I Be?\", questo approccio offre vantaggi decisivi:</p> <ul> <li>Allineamento con il Dominio (DDD): L'idea di scomporre il sistema in servizi si sposa perfettamente con il pattern strategico del DDD dei Bounded Context (che vedremo nella Parte IV). Possiamo mappare ogni Bounded Context a un microservizio (o a un insieme di essi). Ad esempio:</li> </ul> <p>- <code>IdentityService</code>: Gestisce utenti, autenticazione, profili.</p> <p>- <code>PlannerService</code>: Gestisce la creazione e la modifica di viaggi e tappe.</p> <p>- <code>SuggestionService</code>: Si occupa di interagire con l'AI e generare suggerimenti.</p> <ul> <li> <p>Scalabilit\u00e0 Selettiva: Il <code>SuggestionService</code> potrebbe richiedere molta CPU quando interroga l'AI, mentre il <code>PlannerService</code> potrebbe essere pi\u00f9 intensivo in termini di I/O del database. Con i microservizi, possiamo allocare risorse (pi\u00f9 CPU, pi\u00f9 memoria, pi\u00f9 istanze) a ogni servizio in base alle sue esigenze specifiche, ottimizzando i costi.</p> </li> <li> <p>Resilienza (Fault Isolation): Se il <code>SuggestionService</code> dovesse avere un problema e smettere di funzionare, gli utenti potrebbero non essere in grado di generare nuovi itinerari, ma potrebbero comunque accedere e modificare i loro viaggi esistenti gestiti dal <code>PlannerService</code>. Il fallimento di un componente non trascina con s\u00e9 l'intero sistema.</p> </li> <li> <p>Libert\u00e0 Tecnologica: Sebbene useremo Go per la maggior parte dei servizi, in futuro potremmo decidere che un particolare problema (es. analisi dati) sia risolto meglio con un altro linguaggio, come Python. L'architettura a microservizi ce lo permette, a patto che i servizi comunichino tramite protocolli standard.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#32-panoramica-dellarchitettura","title":"3.2. Panoramica dell'Architettura","text":"<p>La nostra architettura di partenza sar\u00e0 composta da alcuni servizi chiave, un API Gateway e il frontend SvelteKit.</p> <pre><code>+----------------+\u00a0 \u00a0 \u00a0 +------------------+\u00a0 \u00a0 \u00a0 +--------------------+\n\n\n\n|\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n| Frontend \u00a0 \u00a0 \u00a0 |-----&gt;| \u00a0 API Gateway\u00a0 \u00a0 |-----&gt;| \u00a0 IdentityService\u00a0 | (REST/HTTP)\n\n\n\n| (SvelteKit)\u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 | \u00a0 (HTTP/REST)\u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 | \u00a0 (Go) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n|\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 +--------------------+\n\n\n\n+----------------+\u00a0 \u00a0 \u00a0 +--------+---------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| (gRPC)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+---------------------+---------------------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n+----------v---------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +----------v-----------+\n\n\n\n|\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n|\u00a0 PlannerService\u00a0 \u00a0 | (gRPC) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | SuggestionService\u00a0 \u00a0 |\n\n\n\n|\u00a0 (Go)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |&lt;--------------------&gt;| (Go) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n|\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n+--------------------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +----------------------+\n</code></pre> <p>Componenti:</p> <ul> <li> <p>Frontend (SvelteKit): L'applicazione single-page con cui l'utente interagisce nel browser.</p> </li> <li> <p>API Gateway: \u00c8 l'unico punto di ingresso (entrypoint) per tutte le richieste provenienti dall'esterno (il nostro frontend). Si occupa di routing, autenticazione, rate limiting e altre cross-cutting concerns. Espone un'API RESTful (basata su HTTP) sicura e pubblica.</p> </li> <li> <p>Servizi Backend (Go): Sono i microservizi che implementano la logica di business. Non sono esposti direttamente a Internet. Comunicano tra loro e con l'API Gateway tramite un protocollo ad alte prestazioni.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#33-comunicazione-rest-vs-grpc","title":"3.3. Comunicazione: REST vs. gRPC","text":"<p>Una scelta architetturale cruciale \u00e8 come i servizi parlano tra loro. Adotteremo un approccio ibrido, usando lo strumento giusto per il lavoro giusto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#resthttp-per-la-comunicazione-esterna-frontend-api-gateway","title":"REST/HTTP per la Comunicazione Esterna (Frontend \u2194 API Gateway)","text":"<p>L'API esposta dall'API Gateway al frontend SvelteKit sar\u00e0 basata su REST (Representational State Transfer).</p> <ul> <li> <p>Perch\u00e9?: REST su HTTP \u00e8 lo standard de facto per le API web pubbliche. \u00c8 universalmente supportato da browser, librerie client e strumenti di sviluppo. \u00c8 basato su testo (JSON), il che lo rende facile da debuggare e ispezionare.</p> </li> <li> <p>Contratto API: Definiremo questa API in modo rigoroso utilizzando la specifica OpenAPI 3.1 (come vedremo nel Capitolo 19). Questo \"contratto\" garantisce che frontend e backend siano sempre allineati.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#grpc-per-la-comunicazione-interna-servizio-servizio","title":"gRPC per la Comunicazione Interna (Servizio \u2194 Servizio)","text":"<p>Per la comunicazione tra l'API Gateway e i microservizi interni, e tra i microservizi stessi, useremo gRPC.</p> <ul> <li> <p>Cos'\u00e8 gRPC?: \u00c8 un framework RPC (Remote Procedure Call) moderno, open source e ad alte prestazioni, inizialmente sviluppato da Google. Permette a un'applicazione di chiamare metodi su un servizio server su un'altra macchina come se fosse un oggetto locale.</p> </li> <li> <p>Perch\u00e9 gRPC?:</p> </li> </ul> <p>1. Performance: gRPC utilizza HTTP/2 per il trasporto e Protocol Buffers (Protobuf) come formato di serializzazione. Protobuf \u00e8 un formato binario molto pi\u00f9 compatto e veloce da parsare rispetto a JSON, risultando in una latenza di rete inferiore e un minore utilizzo della CPU.</p> <p>2. Contratti Fortemente Tipizzati: Le API gRPC sono definite in file <code>.proto</code> usando il linguaggio di definizione di Protobuf. Da questi file, possiamo generare automaticamente il codice client e server in decine di linguaggi (incluso Go). Questo elimina l'ambiguit\u00e0 e previene interi classi di errori di runtime dovuti a disallineamenti tra client e server.</p> <p>3. Streaming: gRPC supporta nativamente lo streaming bidirezionale, una funzionalit\u00e0 potente per scenari pi\u00f9 avanzati che va oltre il semplice ciclo richiesta/risposta di REST.</p> <p>Analogia: Pensa a REST come a una lettera scritta in una lingua universale (come l'inglese), comprensibile da chiunque ma un po' verbosa. Pensa a gRPC come a una conversazione telefonica diretta tra due persone che parlano uno slang tecnico e super-efficiente: \u00e8 molto pi\u00f9 veloce, ma richiede che entrambi conoscano esattamente lo stesso slang (il contratto Protobuf).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#34-conclusione","title":"3.4. Conclusione","text":"<p>Abbiamo delineato una spina dorsale architetturale moderna e robusta per \"Where Should I Be?\". L'architettura a microservizi ci fornisce la flessibilit\u00e0 per gestire la complessit\u00e0 e scalare in modo efficiente. La scelta strategica di usare REST per le API pubbliche e gRPC per le comunicazioni interne ci permette di bilanciare l'interoperabilit\u00e0 universale con le massime prestazioni.</p> <p>Nei prossimi capitoli, vedremo come rendere sicura questa architettura e quali modelli di deployment adottare nel cloud AWS. Questa solida base ci permetter\u00e0 poi di concentrarci sulla modellazione del dominio all'interno di ogni servizio.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-4-autenticazione-e-sicurezza-su-aws","title":"Capitolo 4: Autenticazione e Sicurezza su AWS","text":"<p>Un'applicazione senza un solido sistema di sicurezza \u00e8 come una casa senza serrature. L'autenticazione (chi sei?) e l'autorizzazione (cosa puoi fare?) sono aspetti non negoziabili di qualsiasi sistema enterprise moderno. Gestire manualmente password, sessioni e token \u00e8 un'impresa complessa e rischiosa, piena di trappole che possono portare a vulnerabilit\u00e0 catastrofiche.</p> <p>Fortunatamente, piattaforme cloud come AWS offrono servizi gestiti che ci permettono di implementare soluzioni di sicurezza di livello enterprise delegando gran parte del lavoro pesante. In questo capitolo, progetteremo il nostro sistema di autenticazione per \"Where Should I Be?\" utilizzando Amazon Cognito e definiremo il flusso di interazione tra il frontend, il backend e il servizio di identit\u00e0.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#41-il-problema-non-reinventare-la-ruota-della-sicurezza","title":"4.1. Il Problema: Non Reinventare la Ruota della Sicurezza","text":"<p>Costruire un sistema di autenticazione da zero \u00e8 notoriamente difficile. Bisogna preoccuparsi di:</p> <ul> <li> <p>Memorizzazione sicura delle password: Mai salvare password in chiaro! \u00c8 necessario usare algoritmi di hashing forti e lenti (come bcrypt o Argon2) con salt unici per ogni utente.</p> </li> <li> <p>Gestione delle sessioni: Creare, invalidare e far scadere i token di sessione in modo sicuro.</p> </li> <li> <p>Flussi complessi: Implementare funzionalit\u00e0 come \"password dimenticata\", verifica dell'email, autenticazione a pi\u00f9 fattori (MFA).</p> </li> <li> <p>Federazione di Identit\u00e0: Permettere agli utenti di accedere con i loro account Google, Facebook o Apple.</p> </li> </ul> <p>Ognuno di questi punti \u00e8 un potenziale vettore di attacco se non implementato alla perfezione. La regola d'oro della sicurezza informatica \u00e8: non implementare la tua crittografia o i tuoi protocolli di autenticazione se non sei un esperto di fama mondiale.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#42-la-soluzione-amazon-cognito","title":"4.2. La Soluzione: Amazon Cognito","text":"<p>Amazon Cognito \u00e8 un servizio AWS che fornisce soluzioni di identit\u00e0 per applicazioni web e mobili. Si occupa di tutta la complessit\u00e0 della gestione degli utenti, permettendoci di concentrarci sulla logica della nostra applicazione.</p> <p>Cognito offre due funzionalit\u00e0 principali che useremo:</p> <ol> <li> <p>User Pools: \u00c8 un-elenco utenti completamente gestito. Si occupa della registrazione, dell'accesso, del recupero password, della MFA e della federazione con provider di identit\u00e0 social (Google, etc.) e enterprise (SAML 2.0).</p> </li> <li> <p>Identity Pools: Permette di fornire credenziali AWS temporanee agli utenti (autenticati o anonimi) per accedere direttamente ad altri servizi AWS (come caricare un file su S3).</p> </li> </ol> <p>Per \"Where Should I Be?\", ci concentreremo principalmente sugli User Pools.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#43-il-flusso-di-autenticazione-con-jwt","title":"4.3. Il Flusso di Autenticazione con JWT","text":"<p>Il nostro sistema utilizzer\u00e0 lo standard JSON Web Tokens (JWT) per gestire le sessioni autenticate. Un JWT \u00e8 un token compatto e auto-contenuto che permette di trasmettere in modo sicuro informazioni tra le parti come un oggetto JSON. \u00c8 \"firmato\" digitalmente, quindi possiamo fidarci del suo contenuto.</p> <p>Ecco il flusso completo, passo dopo passo:</p> <ol> <li> <p>Registrazione/Accesso (Frontend \u2192 Cognito): L'utente inserisce le sue credenziali (es. email/password) nel nostro frontend SvelteKit. Il frontend non invia mai le password al nostro backend Go. Utilizza invece la libreria AWS Amplify (o una libreria simile) per comunicare direttamente e in modo sicuro con l'endpoint di Amazon Cognito.</p> </li> <li> <p>Cognito Restituisce i Token (Cognito \u2192 Frontend): Se le credenziali sono valide, Cognito autentica l'utente e restituisce al frontend un set di JWT. I due pi\u00f9 importanti sono:</p> </li> </ol> <p>- <code>id_token</code>: Contiene le informazioni sull'identit\u00e0 dell'utente (username, email, etc.). Prova che l'utente \u00e8 stato autenticato.</p> <p>- <code>access_token</code>: Concede i permessi per accedere alle risorse protette (le nostre API).</p> <ol> <li>Chiamata API Protetta (Frontend \u2192 Backend): Quando il frontend deve chiamare un endpoint protetto del nostro backend (es. \"ottieni i miei viaggi\"), inserisce l'access_token nell'header Authorization della richiesta HTTP, secondo lo standard Bearer.</li> </ol> <p>Authorization: Bearer  <ol> <li>Validazione del Token (Backend Go): Il nostro backend (specificamente, l'API Gateway o un middleware nei nostri servizi Go) riceve la richiesta. Prima di eseguire qualsiasi logica di business, deve validare il token JWT. Questo processo avviene offline, senza dover richiamare Cognito, ed \u00e8 per questo che \u00e8 cos\u00ec veloce ed efficiente. La validazione consiste in diversi controlli:</li> </ol> <p>- Firma: Il token \u00e8 stato firmato dalla User Pool di Cognito corretta? Per verificarlo, il nostro servizio scarica e mette in cache le chiavi pubbliche (JWKS) di Cognito.</p> <p>- Scadenza: Il token non \u00e8 scaduto?</p> <p>- Audience (<code>aud</code>) e Issuer (<code>iss</code>): Il token \u00e8 stato emesso per la nostra applicazione e dal nostro provider di identit\u00e0?</p> <ol> <li>Accesso Autorizzato: Se il token \u00e8 valido, il backend sa con certezza chi \u00e8 l'utente (grazie ai claims contenuti nel token, come il <code>sub</code> o user ID) e che ha il permesso di accedere alla risorsa. La richiesta viene quindi processata. Se il token non \u00e8 valido, il backend risponde con un errore <code>401 Unauthorized</code>.</li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#44-sicurezza-tra-servizi-con-iam","title":"4.4. Sicurezza tra Servizi con IAM","text":"<p>Oltre alla sicurezza degli utenti, dobbiamo garantire la sicurezza della comunicazione tra i nostri stessi servizi all'interno di AWS. Non vogliamo che un servizio compromesso possa chiamare indiscriminatamente tutti gli altri.</p> <p>Per questo, utilizzeremo AWS IAM (Identity and Access Management).</p> <ul> <li> <p>Ogni nostro microservizio (es. <code>PlannerService</code> in esecuzione su ECS o Lambda) avr\u00e0 un ruolo IAM associato.</p> </li> <li> <p>Questo ruolo avr\u00e0 delle policy che specificano esattamente quali altre risorse AWS pu\u00f2 invocare. Ad esempio, la policy del <code>PlannerService</code> potrebbe consentirgli di leggere e scrivere su una specifica tabella DynamoDB e di invocare il <code>SuggestionService</code>, ma nient'altro.</p> </li> </ul> <p>Questo principio, noto come Principio del Minimo Privilegio (Principle of Least Privilege), \u00e8 un fondamento della sicurezza nel cloud e limita drasticamente il raggio d'azione di un potenziale attacco.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#45-conclusione","title":"4.5. Conclusione","text":"<p>Abbiamo progettato un'architettura di sicurezza robusta e moderna senza dover scrivere codice di autenticazione complesso e fragile.</p> <ul> <li> <p>Delegando la gestione degli utenti e l'emissione dei token a Amazon Cognito, ci affidiamo a un servizio specializzato e sicuro.</p> </li> <li> <p>Utilizzando il flusso standard con JWT, creiamo un sistema di sessioni stateless, scalabile e interoperabile.</p> </li> <li> <p>Il nostro backend Go si occupa solo di validare i token, un'operazione veloce e sicura.</p> </li> <li> <p>Utilizzando i ruoli IAM, applichiamo il principio del minimo privilegio per la comunicazione interna.</p> </li> </ul> <p>Con queste fondamenta di sicurezza, possiamo procedere con la fiducia che la nostra applicazione e i dati dei nostri utenti siano protetti secondo le migliori pratiche del settore.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-5-scelte-architetturali-server-vs-serverless","title":"Capitolo 5: Scelte Architetturali: Server vs. Serverless","text":"<p>Una delle decisioni pi\u00f9 impattanti nell'architettura di un'applicazione cloud moderna riguarda il modello computazionale: dove e come verr\u00e0 eseguito il nostro codice Go? Le due opzioni principali nel panorama AWS sono l'approccio basato su \"server\" (utilizzando container) e l'approccio \"serverless\" (utilizzando funzioni).</p> <p>Questa non \u00e8 una scelta dogmatica. Entrambi i modelli hanno punti di forza e di debolezza. La decisione giusta spesso non \u00e8 \"o l'uno o l'altro\", ma \"quale modello \u00e8 pi\u00f9 adatto per quale parte del sistema?\". In questo capitolo, analizzeremo le differenze, i pro e i contro di entrambi gli approcci nel contesto della nostra applicazione \"Where Should I Be?\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#51-lapproccio-server-container-con-aws-fargate","title":"5.1. L'Approccio \"Server\": Container con AWS Fargate","text":"<p>Quando parliamo di \"server\" nel cloud moderno, raramente ci riferiamo a macchine virtuali (EC2) gestite manualmente. L'approccio pi\u00f9 comune \u00e8 la containerizzazione con Docker. Il nostro codice Go viene pacchettizzato in un'immagine Docker insieme a tutte le sue dipendenze, creando un artefatto portabile e consistente.</p> <p>Per eseguire questi container su AWS, una scelta eccellente \u00e8 AWS Fargate. Fargate \u00e8 un motore di calcolo per container che ci permette di eseguire i nostri container Docker senza dover gestire i server o i cluster sottostanti. \u00c8 una via di mezzo tra le macchine virtuali tradizionali e il puro serverless.</p> <p>Caratteristiche:</p> <ul> <li> <p>Sempre Attivo (Always-on): Definiamo un \"servizio\" con un numero desiderato di container in esecuzione (es. 2 istanze del nostro <code>PlannerService</code> per l'alta disponibilit\u00e0). Questi container sono sempre attivi, in attesa di ricevere traffico.</p> </li> <li> <p>Controllo e Flessibilit\u00e0: Abbiamo pieno controllo sull'ambiente di esecuzione del container, sulle risorse (CPU/memoria) allocate e possiamo eseguire processi di lunga durata.</p> </li> <li> <p>Costi Prevedibili: Paghiamo per le risorse di calcolo che abbiamo allocato, per tutto il tempo in cui sono in esecuzione, indipendentemente dal fatto che stiano servendo traffico o meno.</p> </li> </ul> <p>Pro per \"Where Should I Be?\":</p> <p>\u2705 Performance Stabili: Nessun \"cold start\". I container sono sempre caldi e pronti a rispondere, ideale per le API sincrone rivolte all'utente (come quelle gestite dal nostro API Gateway).</p> <p>\u2705 Task di Lunga Durata: Se avessimo un processo che richiede pi\u00f9 di 15 minuti (il limite di AWS Lambda), un container sarebbe l'unica scelta.</p> <p>\u2705 Connessioni Persistenti: Mantenere pool di connessioni al database aperte e ottimizzate \u00e8 pi\u00f9 semplice in un ambiente long-running.</p> <p>Contro:</p> <p>\u274c Costi a Vuoto: Se l'applicazione ha traffico zero durante la notte, stiamo comunque pagando per i container inattivi.</p> <p>\u274c Gestione della Scalabilit\u00e0: Dobbiamo configurare noi le regole di auto-scaling (es. \"aggiungi un container se la CPU supera il 70%\"), il che richiede un minimo di gestione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#52-lapproccio-serverless-funzioni-con-aws-lambda","title":"5.2. L'Approccio \"Serverless\": Funzioni con AWS Lambda","text":"<p>Serverless non significa \"senza server\", ma piuttosto \"senza che tu debba preoccuparti dei server\". Con AWS Lambda, carichiamo il nostro codice Go (impacchettato in un file .zip o un'immagine container) e AWS si occupa di tutto il resto. Il codice viene eseguito solo quando viene attivato da un evento.</p> <p>Caratteristiche:</p> <ul> <li> <p>Esecuzione su Evento (Event-driven): Una funzione Lambda non \u00e8 sempre in esecuzione. Si \"sveglia\" in risposta a un evento: una richiesta HTTP da API Gateway, un nuovo messaggio in una coda SQS, un nuovo file in un bucket S3, etc.</p> </li> <li> <p>Gestione Zero: Non ci sono server da patchare, sistemi operativi da aggiornare o cluster da gestire.</p> </li> <li> <p>Scalabilit\u00e0 Automatica e Granulare: Se arrivano 1000 richieste in contemporanea, AWS avvier\u00e0 automaticamente 1000 istanze concorrenti della nostra funzione per gestirle. La scalabilit\u00e0 \u00e8 istantanea e gestita interamente dalla piattaforma.</p> </li> <li> <p>Pagamento a Consumo (Pay-per-use): Paghiamo solo per il tempo di esecuzione effettivo del nostro codice, misurato in millisecondi, e per il numero di richieste. Se non c'\u00e8 traffico, il costo \u00e8 zero.</p> </li> </ul> <p>Pro per \"Where Should I Be?\":</p> <p>\u2705 Efficienza dei Costi: Ideale per carichi di lavoro irregolari o \"spiky\". Il SuggestionService, che potrebbe essere usato intensamente solo a tratti, \u00e8 un candidato perfetto.</p> <p>\u2705 Velocit\u00e0 di Sviluppo: Riduce drasticamente l'overhead operativo, permettendo al team di concentrarsi sulla scrittura della logica di business.</p> <p>\u2705 Architetture Event-Driven: Si integra nativamente con l'intero ecosistema di servizi AWS, rendendo semplice costruire flussi di lavoro reattivi e disaccoppiati.</p> <p>Contro:</p> <p>\u274c Cold Start: La prima richiesta a una funzione \"fredda\" (non usata di recente) pu\u00f2 subire un ritardo di centinaia di millisecondi o pi\u00f9, il tempo necessario ad AWS per inizializzare l'ambiente di esecuzione. Questo pu\u00f2 essere un problema per le API sensibili alla latenza.</p> <p>\u274c Limiti di Esecuzione: Una singola invocazione di Lambda non pu\u00f2 durare pi\u00f9 di 15 minuti.</p> <p>\u274c Complessit\u00e0 nella Composizione: Orchestrare flussi di lavoro complessi che coinvolgono pi\u00f9 funzioni pu\u00f2 richiedere servizi aggiuntivi come AWS Step Functions.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#53-la-scelta-per-il-nostro-progetto-un-approccio-ibrido-e-pragmatico","title":"5.3. La Scelta per il Nostro Progetto: Un Approccio Ibrido e Pragmatico","text":"<p>Come spesso accade in ingegneria del software, la risposta migliore non \u00e8 una scelta assoluta, ma un compromesso intelligente. Per \"Where Should I Be?\", adotteremo un approccio ibrido:</p> <ol> <li>Servizi \"Core\" su Container (AWS Fargate):</li> </ol> <p>- L'API Gateway e i servizi sincroni principali come l'IdentityService e il PlannerService saranno implementati come servizi Go a lunga esecuzione su AWS Fargate.</p> <p>- Motivazione: Questi servizi gestiscono il percorso critico delle richieste degli utenti. Abbiamo bisogno di latenza bassa e prevedibile (nessun cold start) e della capacit\u00e0 di gestire pool di connessioni efficienti verso il database.</p> <ol> <li>Task Asincroni e \"Write Side\" su Serverless (AWS Lambda):</li> </ol> <p>- Sfrutteremo AWS Lambda per task asincroni, event-driven o che beneficiano della scalabilit\u00e0 on-demand.</p> <p>- Esempi perfetti nel nostro dominio:</p> <p>- Quando il <code>SuggestionService</code> riceve una richiesta, potrebbe immediatamente rispondere <code>202 Accepted</code> all'utente, e poi avviare un processo Lambda asincrono per interrogare l'API di OpenAI (che pu\u00f2 essere lenta) e notificare l'utente quando il risultato \u00e8 pronto.</p> <p>- Come vedremo con CQRS (Capitolo 15), potremmo usare Lambda per il \"lato scrittura\" del nostro sistema. Una richiesta di modifica (Comando) viene inviata a una coda SQS, e una funzione Lambda la preleva, la processa e aggiorna il database. Questo disaccoppia completamente la scrittura dalla lettura ed \u00e8 incredibilmente resiliente e scalabile.</p> <p>- Invio di email di benvenuto quando un nuovo utente si registra su Cognito.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#54-conclusione","title":"5.4. Conclusione","text":"<p>La scelta tra server e serverless non \u00e8 una battaglia ideologica, ma una decisione di design strategica. Comprendendo i trade-off di ogni modello, possiamo progettare un sistema che sia allo stesso tempo performante, scalabile ed efficiente in termini di costi.</p> <p>L'approccio ibrido che abbiamo scelto per \"Where Should I Be?\" ci offre il meglio di entrambi i mondi: la stabilit\u00e0 e le performance dei container Fargate per il nostro core sincrono, e la flessibilit\u00e0, scalabilit\u00e0 e efficienza dei costi di AWS Lambda per i carichi di lavoro asincroni ed event-driven. Questa architettura flessibile ci posiziona perfettamente per le sfide future e per l'evoluzione della nostra applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-ii-progettazione-tattica-con-ddd","title":"Parte II: Progettazione Tattica con DDD","text":"<p>La progettazione tattica del Domain-Driven Design ci fornisce gli strumenti pratici per tradurre il nostro modello di dominio in codice pulito, espressivo e manutenibile. Questi \"building blocks\" sono il vocabolario che useremo per costruire il cuore della nostra applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-6-introduzione-al-domain-driven-design","title":"Capitolo 6: Introduzione al Domain-Driven Design","text":"<p>Benvenuti nella Parte II di questo libro. Nelle sezioni precedenti, abbiamo gettato le fondamenta della nostra applicazione, \"Where Should I Be?\", definendo l'architettura generale, le tecnologie e le strategie di sicurezza. Ora \u00e8 il momento di entrare nel cuore del software: il dominio.</p> <p>In questo capitolo, introdurremo il Domain-Driven Design (DDD), un approccio che rivoluzioner\u00e0 il modo in cui pensate, progettate e scrivete software enterprise. Il DDD non \u00e8 una tecnologia, un framework o una libreria; \u00e8 una filosofia di progettazione che pone il focus sulla complessit\u00e0 del dominio di business, facilitando la collaborazione tra sviluppatori ed esperti di settore per creare modelli software che risolvono problemi reali in modo efficace e manutenibile.</p> <p>Affronteremo il \"perch\u00e9\" del DDD, esploreremo i suoi concetti fondamentali e vedremo come si applica direttamente al nostro progetto, preparandoci per i pattern tattici che analizzeremo nei capitoli successivi.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#61-il-problema-complessita-e-comunicazione","title":"6.1. Il Problema: Complessit\u00e0 e Comunicazione","text":"<p>Immaginate di iniziare a lavorare su un nuovo progetto software. La richiesta iniziale sembra semplice: \"Vogliamo un'app che suggerisca posti da visitare\". Il team di sviluppo, desideroso di iniziare, apre l'IDE, crea un database con tabelle come <code>users</code>, <code>trips</code>, <code>locations</code> e inizia a scrivere endpoint CRUD (Create, Read, Update, Delete).</p> <p>Nelle prime settimane, tutto procede a gonfie vele. Ma presto, iniziano a sorgere le domande difficili:</p> <ul> <li> <p>Cosa succede se un utente vuole aggiungere una \"tappa\" a un \"viaggio\"? \u00c8 solo un'altra riga nella tabella <code>locations</code> collegata al <code>trip</code>?</p> </li> <li> <p>Come gestiamo le diverse tipologie di utenti? Un utente \"premium\" ha limiti diversi rispetto a un utente \"free\"?</p> </li> <li> <p>Un \"suggerimento\" \u00e8 la stessa cosa di una \"destinazione\"?</p> </li> <li> <p>Se un viaggio viene cancellato, cosa succede alle recensioni associate alle sue tappe?</p> </li> </ul> <p>Senza un approccio strutturato, il team rischia di prendere decisioni tecniche basate su una comprensione superficiale del business. La logica di business viene sparsa in punti diversi dell'applicazione: un po' nel codice dell'API, un po' in stored procedure nel database, un po' addirittura nel frontend. Questo porta a quello che \u00e8 tristemente noto come Anemic Domain Model.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#controesempio-lanemic-domain-model","title":"Controesempio: L'Anemic Domain Model","text":"<p>Un Anemic Domain Model \u00e8 un anti-pattern in cui gli oggetti del dominio contengono solo dati (propriet\u00e0 con getter e setter) e nessuna logica di business. Tutta la logica viene gestita da classi esterne, spesso chiamate \"Services\" o \"Managers\".</p> <p>Vediamo un esempio in Go che, purtroppo, \u00e8 molto comune.</p> <p>Go</p> <pre><code>// anemic/trip.go\n\n\n\n\n\npackage anemic\n\n\n\n\n\nimport \"github.com/google/uuid\"\n\n\n\n\n\n// Trip \u00e8 una semplice struttura dati, un \"data bag\".\n\n\n\n// Non ha logica, non protegge i suoi invarianti.\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ID\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 uuid.UUID\n\n\n\n\u00a0\u00a0\u00a0\u00a0Name\u00a0 \u00a0 \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Stops \u00a0 \u00a0 \u00a0 []string // Semplici stringhe, nessuna validazione.\n\n\n\n\u00a0\u00a0\u00a0\u00a0Status\u00a0 \u00a0 \u00a0 string \u00a0 // \"Planning\", \"InProgress\", \"Completed\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0MaxStops\u00a0 \u00a0 int\n\n\n\n}\n\n\n\n\n\n// anemic/trip_service.go\n\n\n\n\n\npackage anemic\n\n\n\n\n\nimport \"errors\"\n\n\n\n\n\n// TripService contiene tutta la logica di business.\n\n\n\n// La logica \u00e8 separata dai dati su cui opera.\n\n\n\ntype TripService struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... dipendenze come il repository del database\n\n\n\n}\n\n\n\n\n\nfunc (s *TripService) AddStop(trip *Trip, newStop string) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. La logica di validazione \u00e8 qui, fuori dall'oggetto Trip.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if trip.Status != \"Planning\" {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"cannot add stops to a trip that is not in planning status\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Un'altra regola di business.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if len(trip.Stops) &gt;= trip.MaxStops {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"maximum number of stops reached\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. La modifica dello stato avviene qui.\n\n\n\n\u00a0\u00a0\u00a0\u00a0trip.Stops = append(trip.Stops, newStop)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... codice per salvare il trip nel database\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n</code></pre> <p>Perch\u00e9 questo approccio \u00e8 problematico?</p> <ol> <li> <p>Modello Povero: L'oggetto <code>Trip</code> non ci dice nulla su cosa pu\u00f2 fare o quali sono le sue regole. \u00c8 solo un contenitore di dati. La vera \"essenza\" di un viaggio \u00e8 dispersa altrove.</p> </li> <li> <p>Logica Duplicata: Se un altro servizio avesse bisogno di aggiungere una tappa, dovrebbe conoscere e probabilmente reimplementare le stesse regole di validazione, portando a inconsistenze.</p> </li> <li> <p>Difficile da Comprendere: Per capire tutte le regole che governano un <code>Trip</code>, un nuovo sviluppatore deve andare a caccia della logica in tutta la codebase, invece di guardare un unico punto coeso.</p> </li> <li> <p>Invarianti non Protetti: Un invariante \u00e8 una regola che deve essere sempre vera. Nell'esempio sopra, nulla impedisce a un programmatore di modificare direttamente <code>trip.Stops</code> da un'altra parte del codice, bypassando completamente la logica di <code>TripService</code>. Lo stato dell'oggetto non \u00e8 protetto.</p> </li> </ol> <p>Il Domain-Driven Design nasce per risolvere proprio questi problemi, promuovendo la creazione di Rich Domain Models.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#62-il-cuore-del-ddd-il-modello-di-dominio-ricco","title":"6.2. Il Cuore del DDD: Il Modello di Dominio Ricco","text":"<p>Il DDD ci insegna a invertire il paradigma. Invece di trattare gli oggetti di dominio come semplici sacchi di dati, li trasformiamo nel cuore pulsante dell'applicazione.</p> <p>Un Modello di Dominio non \u00e8 solo un diagramma di classi o uno schema di database. \u00c8 un sistema di astrazioni interconnesse che descrive aspetti specifici di un dominio. Include non solo gli attributi degli oggetti, ma anche il loro comportamento e le regole che li governano.</p> <p>Riprendiamo l'esempio precedente, ma questa volta applicando i principi del DDD.</p> <p>Go</p> <pre><code>// rich/trip.go\n\n\n\n\n\npackage rich\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"errors\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/google/uuid\"\n\n\n\n)\n\n\n\n\n\n// Definiamo tipi specifici per migliorare la leggibilit\u00e0 e la sicurezza.\n\n\n\ntype TripStatus string\n\n\n\n\n\nconst (\n\n\n\n\u00a0\u00a0\u00a0\u00a0Planning \u00a0 TripStatus = \"Planning\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0InProgress TripStatus = \"InProgress\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0Completed\u00a0 TripStatus = \"Completed\"\n\n\n\n)\n\n\n\n\n\n// Trip \u00e8 ora un oggetto ricco. Contiene dati E comportamento.\n\n\n\n// Le sue propriet\u00e0 non sono esportate per proteggere gli invarianti.\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id \u00a0 \u00a0 \u00a0 uuid.UUID\n\n\n\n\u00a0\u00a0\u00a0\u00a0name \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0stops\u00a0 \u00a0 []string // In un vero DDD, questo sarebbe un []Stop (Value Object)\n\n\n\n\u00a0\u00a0\u00a0\u00a0status \u00a0 TripStatus\n\n\n\n\u00a0\u00a0\u00a0\u00a0maxStops int\n\n\n\n}\n\n\n\n\n\n// NewTrip agisce come una \"Factory\" per garantire che un Trip\n\n\n\n// venga creato sempre in uno stato valido.\n\n\n\nfunc NewTrip(id uuid.UUID, name string, maxStops int) (*Trip, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if name == \"\" {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"trip name cannot be empty\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0if maxStops &lt;= 0 {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"max stops must be a positive number\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0return &amp;Trip{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: \u00a0 \u00a0 \u00a0 id,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: \u00a0 \u00a0 name,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stops:\u00a0 \u00a0 []string{},\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status: \u00a0 Planning, // Lo stato iniziale \u00e8 un invariante\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxStops: maxStops,\n\n\n\n\u00a0\u00a0\u00a0\u00a0}, nil\n\n\n\n}\n\n\n\n\n\n// AddStop \u00e8 un metodo dell'oggetto Trip.\n\n\n\n// La logica di business vive con i dati che governa.\n\n\n\nfunc (t *Trip) AddStop(newStop string) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. La validazione \u00e8 co-locata con l'oggetto.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if t.status != Planning {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"cannot add stops to a trip that is not in planning status\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. L'invariante sul numero massimo di tappe \u00e8 protetto.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if len(t.stops) &gt;= t.maxStops {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"maximum number of stops reached\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0if newStop == \"\" {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"stop name cannot be empty\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. La modifica dello stato \u00e8 un comportamento intrinseco del Trip.\n\n\n\n\u00a0\u00a0\u00a0\u00a0t.stops = append(t.stops, newStop)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n\n\n\n\n\n// Metodi per cambiare stato, anch'essi con la loro logica.\n\n\n\nfunc (t *Trip) Start() error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if t.status != Planning {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"trip can only be started from planning status\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0if len(t.stops) == 0 {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"cannot start a trip with no stops\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0t.status = InProgress\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n\n\n\n\n\n// Getter pubblici per esporre i dati in modo controllato (read-only).\n\n\n\nfunc (t *Trip) ID() uuid.UUID {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return t.id\n\n\n\n}\n\n\n\n\n\nfunc (t *Trip) Status() TripStatus {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return t.status\n\n\n\n}\n</code></pre> <p>Confrontando i due esempi, la differenza \u00e8 abissale. Nel secondo caso:</p> <ul> <li> <p>Coesione: Dati e logica sono uniti. <code>Trip</code> ora descrive cosa \u00e8 e cosa fa.</p> </li> <li> <p>Incapsulamento: Nascondendo i campi (usando lettere minuscole in Go), preveniamo modifiche esterne illegali. L'unico modo per alterare lo stato del <code>Trip</code> \u00e8 attraverso i suoi metodi, che applicano le regole di business.</p> </li> <li> <p>Chiarezza: Le regole del dominio sono esplicite e facili da trovare. L'oggetto si auto-documenta.</p> </li> <li> <p>Robustezza: \u00c8 molto pi\u00f9 difficile mettere l'oggetto in uno stato invalido.</p> </li> </ul> <p>Questo \u00e8 l'obiettivo centrale del DDD: creare modelli ricchi ed espressivi che riflettano fedelmente la complessit\u00e0 del dominio di business.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#63-i-pilastri-del-ddd-progettazione-strategica-e-tattica","title":"6.3. I Pilastri del DDD: Progettazione Strategica e Tattica","text":"<p>Il Domain-Driven Design \u00e8 tradizionalmente suddiviso in due parti principali, che lavorano in sinergia.</p> <p>Riferimento Chiave: La fonte definitiva per questi concetti \u00e8 il libro di Eric Evans, \"Domain-Driven Design: Tackling Complexity in the Heart of Software\". Sebbene denso, \u00e8 una lettura fondamentale per chiunque voglia padroneggiare il DDD.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#1-progettazione-strategica-strategic-design","title":"1. Progettazione Strategica (Strategic Design)","text":"<p>La progettazione strategica si occupa del \"quadro generale\". \u00c8 l'insieme di principi per analizzare e decomporre domini complessi in parti pi\u00f9 gestibili. Si concentra meno sul codice e pi\u00f9 sulla comprensione del business e sulla definizione dei confini. I suoi pattern principali, che esploreremo nella Parte IV, sono:</p> <ul> <li> <p>Ubiquitous Language (Linguaggio Ubiquo): \u00c8 il concetto pi\u00f9 importante del DDD. Si tratta di creare un linguaggio rigoroso e condiviso tra sviluppatori, esperti di dominio, product manager e chiunque sia coinvolto nel progetto. Se gli esperti chiamano una funzionalit\u00e0 \"Suggerimento di Itinerario\", il codice non dovrebbe contenere classi chiamate <code>TripRecommendation</code> o <code>JourneyProposal</code>. Dovrebbe chiamarsi <code>SuggerimentoItinerario</code>. Questo linguaggio viene usato nelle conversazioni, nei diagrammi, nel codice e nei test. Elimina l'ambiguit\u00e0 e la necessit\u00e0 di \"traduzione\" mentale. (Approfondiremo nel Capitolo 7).</p> </li> <li> <p>Bounded Context (Contesto Delimitato): Un dominio di business complesso non ha un unico modello unificato. Il significato di un termine pu\u00f2 cambiare a seconda del contesto. Ad esempio, nel nostro \"Where Should I Be?\", il concetto di \"Utente\" potrebbe essere diverso:</p> </li> </ul> <p>- Nel contesto di Autenticazione, un \"Utente\" \u00e8 definito da email, password hash e ruoli di sicurezza.</p> <p>- Nel contesto di Pianificazione Viaggi, un \"Utente\" potrebbe essere definito dal suo livello di abbonamento (che determina il numero massimo di viaggi) e dalle sue preferenze.</p> <p>- Nel contesto Social, un \"Utente\" potrebbe avere un profilo, una lista di amici e delle foto.</p> <p>Un Bounded Context \u00e8 un confine esplicito (logico o fisico, come un microservizio) all'interno del quale un modello di dominio specifico \u00e8 consistente e valido. Tentare di creare un unico, mega-oggetto \"Utente\" che serva tutti questi contesti porterebbe a un design fragile e confuso. (Approfondiremo nel Capitolo 16).</p> <ul> <li>Context Mapping (Mappatura dei Contesti): Una volta definiti i Bounded Context, \u00e8 necessario definire come interagiscono tra loro. Si ignorano? Collaborano strettamente? Uno si conforma al modello dell'altro? La mappatura dei contesti fornisce un catalogo di pattern per gestire queste relazioni inter-servizio. (Approfondiremo nel Capitolo 18).</li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#2-progettazione-tattica-tactical-design","title":"2. Progettazione Tattica (Tactical Design)","text":"<p>La progettazione tattica si occupa dei \"dettagli implementativi\" all'interno di un singolo Bounded Context. Fornisce un insieme di building block (mattoncini) per costruire un modello di dominio ricco ed espressivo. \u00c8 qui che scriviamo il codice. Questi pattern, che sono il fulcro della Parte II e III, includono:</p> <ul> <li> <p>Entities (Entit\u00e0): Oggetti che hanno un'identit\u00e0 distintiva che persiste nel tempo. Due entit\u00e0 sono diverse anche se i loro attributi sono identici. Un <code>Utente</code> \u00e8 un'entit\u00e0; anche se due utenti hanno lo stesso nome, sono persone diverse, distinte dal loro ID univoco. (Capitolo 10).</p> </li> <li> <p>Value Objects (Oggetti Valore): Oggetti che descrivono una caratteristica di un dominio e sono definiti solo dai loro attributi. Non hanno un'identit\u00e0 concettuale. Due Value Objects con gli stessi attributi sono considerati uguali. Un <code>Indirizzo</code> o delle <code>CoordinateGPS</code> sono esempi classici. Sono tipicamente immutabili. (Capitolo 9).</p> </li> <li> <p>Aggregates (Aggregati): Un cluster di oggetti (Entit\u00e0 e Value Objects) che vengono trattati come una singola unit\u00e0 ai fini delle modifiche dei dati. Ogni Aggregato ha una radice (l'Aggregate Root), che \u00e8 l'unica Entit\u00e0 dell'aggregato accessibile dall'esterno. La radice \u00e8 responsabile di mantenere la consistenza dell'intero aggregato, proteggendo i suoi invarianti. Nel nostro esempio, il <code>Trip</code> potrebbe essere l'Aggregate Root che gestisce un insieme di <code>Stop</code> (tappe). (Capitolo 8).</p> </li> <li> <p>Repositories (Repository): Forniscono un'astrazione sopra la persistenza (database, file, API esterne). Dal punto di vista del dominio, un repository \u00e8 come una \"collezione\" di aggregati in memoria. Ci permette di recuperare e salvare gli aggregati senza che il modello di dominio debba conoscere i dettagli di SQL, DynamoDB o qualsiasi altra tecnologia di storage. (Capitolo 13).</p> </li> <li> <p>Domain Services (Servizi di Dominio): A volte, una logica di business importante non appartiene naturalmente a nessuna Entit\u00e0 o Value Object. Spesso coinvolge pi\u00f9 aggregati. In questi casi, la logica viene incapsulata in un Domain Service. Ad esempio, un servizio che suggerisce il miglior hotel combinando dati da un <code>Trip</code> e dalle <code>UserPreferences</code> potrebbe essere un Domain Service. (Capitolo 11).</p> </li> </ul> <p>Approfondimento: Martin Fowler fornisce eccellenti sintesi di questi pattern sul suo sito. La sua spiegazione degli Anemic vs. Rich Domain Models \u00e8 un ottimo punto di partenza per comprendere la motivazione dietro il DDD.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#64-perche-ddd-per-where-should-i-be","title":"6.4. Perch\u00e9 DDD per \"Where Should I Be?\"","text":"<p>Potreste chiedervi se tutto questo sia necessario per la nostra applicazione. La risposta \u00e8 un sonoro s\u00ec. La complessit\u00e0 di \"Where Should I Be?\" non risiede nella tecnologia, ma nel dominio stesso. Abbiamo a che fare con concetti sfumati:</p> <ul> <li> <p>Pianificazione del Viaggio: Gestire sequenze di tappe, budget, date, trasporti.</p> </li> <li> <p>Suggerimenti Intelligenti: Interagire con modelli di AI (come faremo con OpenAI), interpretarne i risultati e presentarli all'utente in modo coerente.</p> </li> <li> <p>Preferenze Utente: Modellare i gusti di un utente (arte, natura, cibo) e usarli per personalizzare l'esperienza.</p> </li> <li> <p>Collaborazione: In futuro, potremmo permettere a pi\u00f9 utenti di pianificare un viaggio insieme, introducendo una complessit\u00e0 notevole.</p> </li> </ul> <p>Usare il DDD ci offre un percorso strutturato per affrontare questa complessit\u00e0:</p> <ol> <li>Progettazione Strategica: Identificheremo i Bounded Context principali. Potremmo avere:</li> </ol> <p>- <code>PlanningContext</code>: Responsabile di tutto ci\u00f2 che riguarda la creazione e gestione di <code>Trip</code> e <code>Stop</code>.</p> <p>- <code>IdentityAccessContext</code>: Gestisce <code>User</code>, autenticazione e autorizzazione.</p> <p>- <code>SuggestionsContext</code>: Interagisce con servizi esterni (come OpenAI) per generare e gestire i <code>Suggestion</code>.</p> <p>Questa separazione ci permetter\u00e0 di sviluppare e far evolvere ogni parte in modo indipendente, usando il modello pi\u00f9 adatto per ciascuna.</p> <ol> <li>Progettazione Tattica: All'interno di ogni contesto, useremo i pattern tattici per costruire modelli robusti.</li> </ol> <p>- Un <code>Trip</code> sar\u00e0 un Aggregate Root nel <code>PlanningContext</code>.</p> <p>- Le <code>CoordinateGPS</code> di una <code>Stop</code> saranno un Value Object.</p> <p>- Un <code>User</code> sar\u00e0 un'Entity nel <code>IdentityAccessContext</code>.</p> <p>- Il processo di salvataggio di un <code>Trip</code> avverr\u00e0 tramite un Repository, che nasconder\u00e0 i dettagli di AWS DynamoDB.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#65-quando-non-usare-il-ddd","title":"6.5. Quando NON Usare il DDD","text":"<p>Il DDD \u00e8 uno strumento potente, ma non \u00e8 una panacea. Applicarlo a problemi semplici \u00e8 controproducente, un classico caso di \"usare un cannone per uccidere una zanzara\". Il DDD introduce un certo overhead cognitivo e di design che si giustifica solo in presenza di una reale complessit\u00e0 di dominio.</p> <p>Non usate il DDD se il vostro progetto \u00e8:</p> <ul> <li> <p>Una semplice applicazione CRUD: Se state costruendo un'interfaccia di amministrazione per gestire una lista di prodotti con campi semplici, un approccio basato su Anemic Model e servizi transazionali \u00e8 probabilmente pi\u00f9 veloce da implementare e pi\u00f9 facile da mantenere.</p> </li> <li> <p>Guidato dai dati o dall'integrazione: Se il compito principale del software \u00e8 spostare dati da un sistema A a un sistema B, con poche o nessuna trasformazione di business, il cuore del problema non \u00e8 il dominio, ma l'integrazione.</p> </li> <li> <p>Un problema con complessit\u00e0 puramente tecnica: Se state costruendo un encoder video o un proxy di rete ad alte prestazioni, la sfida \u00e8 tecnica, non di dominio di business.</p> </li> </ul> <p>In questi scenari, l'investimento richiesto per implementare Bounded Context, Aggregati e un Linguaggio Ubiquo non porterebbe benefici tangibili.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#66-conclusioni-e-prossimi-passi","title":"6.6. Conclusioni e Prossimi Passi","text":"<p>In questo capitolo, abbiamo scalfito la superficie del Domain-Driven Design. Abbiamo capito che il suo scopo primario \u00e8 gestire la complessit\u00e0 intrinseca del software di business, mettendo il modello di dominio al centro di tutto. Abbiamo distinto tra la visione d'insieme della Progettazione Strategica e i mattoncini della Progettazione Tattica.</p> <p>Soprattutto, abbiamo visto la differenza concreta tra un modello anemico, fragile e difficile da mantenere, e un modello ricco, robusto ed espressivo, che \u00e8 l'obiettivo a cui tenderemo in questo libro.</p> <p>Nei prossimi capitoli, ci tufferemo a capofitto nella Progettazione Tattica. Inizieremo con il concetto pi\u00f9 importante di tutti: il Linguaggio Ubiquo. Impareremo come costruirlo e come usarlo come strumento principale per colmare il divario tra l'idea di business e il codice che la implementa.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#risorse-aggiuntive-e-link-utili","title":"Risorse Aggiuntive e Link Utili","text":"<ul> <li> <p>Libro (Il \"Blue Book\"): Domain-Driven Design: Tackling Complexity in the Heart of Software di Eric Evans. Il testo fondamentale e originario.</p> </li> <li> <p>Libro (Il \"Red Book\"): Implementing Domain-Driven Design di Vaughn Vernon. Un'eccellente guida pratica che traduce i concetti di Evans in codice e architettura.</p> </li> <li> <p>Community: DDD Community. Un hub per articoli, risorse e gruppi di discussione.</p> </li> <li> <p>Articolo di Martin Fowler: \"Domain-Driven Design\". Una raccolta dei suoi articoli sull'argomento, sempre chiari e illuminanti.</p> </li> <li> <p>Go-DDD Esempio pratico: Repository GitHub di \"Wild Workouts\". Un'applicazione di esempio completa scritta in Go che applica i principi DDD e Clean Architecture, sviluppata da Three Dots Labs. Un'ottima risorsa per vedere questi pattern \"in azione\".</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-7-ubiquitous-language-il-linguaggio-condiviso","title":"Capitolo 7: Ubiquitous Language - Il Linguaggio Condiviso","text":"<p>Nel capitolo precedente abbiamo introdotto il Domain-Driven Design come filosofia per dominare la complessit\u00e0. Ora, \u00e8 il momento di affondare le mani nel suo concetto pi\u00f9 critico e fondamentale, la vera pietra angolare su cui poggia l'intero edificio del DDD: l'Ubiquitous Language (Linguaggio Ubiquo o Condiviso).</p> <p>Sembra un concetto astratto, quasi accademico, ma la sua assenza \u00e8 la causa principale del fallimento di innumerevoli progetti software. \u00c8 il collante che tiene insieme il team di sviluppo e gli esperti di dominio. \u00c8 lo strumento che trasforma le conversazioni in codice funzionante e il codice in una narrazione chiara del business.</p> <p>In questo capitolo, esploreremo in profondit\u00e0 perch\u00e9 il Linguaggio Ubiquo \u00e8 essenziale, come si manifesta nel codice Go e quali tecniche pratiche possiamo usare per scoprirlo, definirlo e farlo evolvere insieme alla nostra applicazione \"Where Should I Be?\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#71-la-torre-di-babele-del-software-un-dramma-comune","title":"7.1. La Torre di Babele del Software: Un Dramma Comune","text":"<p>Immaginiamo una riunione di avvio per una nuova funzionalit\u00e0 della nostra app \"Where Should I Be?\". La stanza (reale o virtuale) \u00e8 piena di persone intelligenti e motivate.</p> <p>La Product Manager, esperta del settore viaggi, dice:</p> <p>\"Dobbiamo permettere ai nostri clienti di curare una collezione di punti d'interesse per la loro vacanza. L'utente deve poter definire un budget e l'intelligenza artificiale deve validare che la selezione sia coerente.\"</p> <p>Il team di sviluppo annuisce. La riunione finisce e ognuno torna alla propria scrivania. Ecco cosa succede dopo:</p> <ol> <li>Il Backend Developer (parlando con un collega):</li> </ol> <p>&gt; \"Ok, ho capito. Devo modificare il <code>TripManager</code> per aggiungere una lista di oggetti <code>Location</code> all'entit\u00e0 <code>Trip</code>. Implementer\u00f2 un metodo <code>validateBudget()</code> nel servizio.\"</p> <ol> <li>Il Database Administrator (progettando lo schema):</li> </ol> <p>&gt; \"Perfetto. Aggiungo una tabella <code>POIs</code> (Points of Interest) con una foreign key <code>journey_id</code> che punta alla tabella <code>Journeys</code>.\"</p> <ol> <li>Il Frontend Developer (scrivendo il codice SvelteKit):</li> </ol> <p>&gt; \"Bene, creo un nuovo componente <code>ItineraryBuilder</code>. Far\u00f2 una chiamata all'endpoint <code>/api/destinations</code> per popolare la lista che l'utente pu\u00f2 modificare.\"</p> <p>Quattro persone, quattro linguaggi diversi per descrivere la stessa identica cosa.</p> <ul> <li> <p>Vacanza \u00e8 diventato <code>Trip</code>, <code>Journey</code> e <code>Itinerary</code>.</p> </li> <li> <p>Punto d'interesse \u00e8 diventato <code>Location</code>, <code>POI</code> e <code>Destination</code>.</p> </li> <li> <p>L'azione di curare una collezione \u00e8 diventata <code>aggiungere oggetti a una lista</code>.</p> </li> </ul> <p>Questo \u00e8 un disastro silente. Ogni volta che queste persone comunicano, devono eseguire una traduzione mentale.</p> <ul> <li> <p>\"Ah, quando lei dice 'Vacanza', intende un 'Journey' nel database.\"</p> </li> <li> <p>\"Ricorda, l'endpoint <code>destinations</code> in realt\u00e0 restituisce le <code>Location</code>.\"</p> </li> </ul> <p>Questa frizione cognitiva costante \u00e8 costosa e pericolosa. Genera:</p> <ul> <li> <p>Bug: La logica implementata nel <code>TripManager</code> potrebbe non rispecchiare le sottili regole di business che la Product Manager intendeva con il verbo \"curare\".</p> </li> <li> <p>Rallentamenti: Ogni conversazione richiede tempo per la traduzione e la chiarificazione. Il nuovo sviluppatore che si unisce al team dovr\u00e0 imparare questo \"dizionario\" non scritto, aumentando il suo tempo di onboarding.</p> </li> <li> <p>Modello Anemico: Il codice non riflette il dominio. Diventa un'implementazione tecnica di un problema frainteso, invece di essere un modello vivo del business.</p> </li> </ul> <p>L'Ubiquitous Language \u00e8 l'antidoto a questa Torre di Babele.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#72-cose-e-cosa-non-e-il-linguaggio-ubiquo","title":"7.2. Cos'\u00e8 (e Cosa Non \u00c8) il Linguaggio Ubiquo","text":"<p>Definizione: L'Ubiquitous Language \u00e8 un linguaggio condiviso, sviluppato in modo collaborativo da sviluppatori, esperti di dominio, e tutte le altre figure coinvolte, per descrivere il dominio del software. Questo linguaggio deve essere usato in modo rigoroso in tutte le forme di comunicazione del progetto, senza eccezioni: discussioni verbali, diagrammi, documentazione e, soprattutto, nel codice sorgente.</p> <p>Analizziamo le caratteristiche chiave:</p> <ul> <li> <p>Condiviso e Collaborativo: Non \u00e8 un glossario scritto dagli \"uomini di business\" e consegnato ai tecnici. Nasce dal dialogo. Gli sviluppatori portano il rigore tecnico, gli esperti portano la conoscenza del dominio. Insieme, negoziano termini precisi.</p> </li> <li> <p>Preciso e Ambiguo: Termini generici come \"oggetto\", \"dato\", \"manager\" sono banditi. Se il business parla di \"Utente Premium\" e \"Utente Standard\", non esister\u00e0 una singola classe <code>User</code> con un flag <code>is_premium</code>. Esisteranno probabilmente due tipi distinti o un modello che esprime chiaramente questa differenza.</p> </li> <li> <p>Ubiquo (Onnipresente): Deve permeare ogni artefatto del progetto. Se si disegna un diagramma alla lavagna usando il termine \"Proposta di Itinerario\", allora nel codice Go deve esistere una <code>struct</code> o un'interfaccia chiamata <code>PropostaDiItinerario</code>. Non <code>SuggestedTrip</code> o <code>AIPlan</code>.</p> </li> <li> <p>Focalizzato sul Dominio: Il linguaggio descrive il problema (il dominio), non la soluzione (la tecnologia). Non contiene termini come \"tabella del database\", \"endpoint JSON\", \"messaggio della coda\".</p> </li> </ul> <p>Cosa NON \u00e8 l'Ubiquitous Language:</p> <ul> <li> <p>Non \u00e8 gergo di business imposto ai programmatori.</p> </li> <li> <p>Non \u00e8 gergo tecnico imposto al business.</p> </li> <li> <p>Non \u00e8 un documento statico da scrivere una volta e archiviare. \u00c8 un modello di linguaggio vivo che si evolve man mano che la comprensione del team matura.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#73-dal-dialogo-al-codice-go-lul-in-azione","title":"7.3. Dal Dialogo al Codice Go: L'UL in Azione","text":"<p>Questa \u00e8 la parte pi\u00f9 importante per noi sviluppatori. Come si traduce questa filosofia in codice Go? Vediamo di costruire un pezzo del nostro linguaggio per \"Where Should I Be?\" e di modellarlo direttamente.</p> <p>Dopo alcune sessioni di dialogo con la nostra Product Manager, emergono i seguenti concetti:</p> <ul> <li> <p>Un <code>Luogo</code> (Place) \u00e8 una localit\u00e0 geografica con un nome e una categoria (es. \"Colosseo\", \"Museo\"). \u00c8 un concetto riutilizzabile e indipendente.</p> </li> <li> <p>Un <code>Viaggio</code> (Trip) \u00e8 l'effettivo piano di un utente. Ha una destinazione principale, date di inizio e fine. Un <code>Viaggio</code> deve sempre essere in uno stato consistente.</p> </li> <li> <p>Un <code>Viaggio</code> \u00e8 composto da <code>Tappe</code> (Stops). Una <code>Tappa</code> \u00e8 la visita a un <code>Luogo</code> specifico in un determinato giorno del <code>Viaggio</code>. Non pu\u00f2 esistere una <code>Tappa</code> senza un <code>Viaggio</code>.</p> </li> <li> <p>L'AI non genera direttamente un <code>Viaggio</code>. Genera una <code>Proposta di Itinerario</code> (Itinerary Proposal). Questa \u00e8 una bozza, un suggerimento che l'utente pu\u00f2 rivedere.</p> </li> <li> <p>L'utente deve compiere un'azione esplicita per <code>Convertire</code> una <code>Proposta di Itinerario</code> in un <code>Viaggio</code> concreto, che a quel punto diventa suo e pu\u00f2 essere modificato.</p> </li> </ul> <p>Ora, tradiamo questo linguaggio in codice Go.</p> <p>Go</p> <pre><code>//\n\n\n\n// CONTROESEMPIO: Un codice che IGNORA il linguaggio\n\n\n\n//\n\n\n\n\n\n//\n\n\n\n// Questo codice \u00e8 sbagliato perch\u00e9 usa termini generici e tecnici.\n\n\n\n//\n\n\n\n\n\n// models/generic.go\n\n\n\npackage models\n\n\n\n\n\n// 'Item' non significa nulla nel nostro dominio.\n\n\n\ntype Item struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ID \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Name string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Data map[string]interface{} // Un sacco generico di dati\n\n\n\n}\n\n\n\n\n\n// services/manager.go\n\n\n\npackage services\n\n\n\n\n\n// 'Manager' \u00e8 un termine vago. Cosa gestisce?\n\n\n\ntype Manager struct { /* ... dipendenze ... */ }\n\n\n\n\n\n// Il nome della funzione non riflette l'azione del dominio.\n\n\n\n// Prende un 'sourceID' e crea un nuovo 'Item'. Non \u00e8 chiaro cosa stia succedendo.\n\n\n\nfunc (m *Manager) ProcessData(sourceID string) (*Item, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... logica confusa ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil, nil\n\n\n\n}\n</code></pre> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: Un codice che PARLA il linguaggio\n\n\n\n//\n\n\n\n\n\n//\n\n\n\n// Questo codice \u00e8 corretto perch\u00e9 ogni nome riflette un concetto del dominio.\n\n\n\n//\n\n\n\n\n\n// planning/place.go - Il concetto di Luogo\n\n\n\npackage planning\n\n\n\n\n\ntype PlaceID string\n\n\n\n\n\ntype Place struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ID \u00a0 \u00a0 \u00a0 PlaceID\n\n\n\n\u00a0\u00a0\u00a0\u00a0Name \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Category string\n\n\n\n}\n\n\n\n\n\n// planning/trip.go - Il Viaggio e la Tappa\n\n\n\npackage planning\n\n\n\n\n\nimport \"time\"\n\n\n\n\n\ntype TripID string\n\n\n\n\n\n// Notare come Tappa sia definita all'interno del contesto di un Viaggio.\n\n\n\ntype Stop struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0Place \u00a0 \u00a0 Place\n\n\n\n\u00a0\u00a0\u00a0\u00a0DayOfTrip int\n\n\n\n}\n\n\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TripID\n\n\n\n\u00a0\u00a0\u00a0\u00a0destination string\n\n\n\n\u00a0\u00a0\u00a0\u00a0startDate \u00a0 time.Time\n\n\n\n\u00a0\u00a0\u00a0\u00a0endDate \u00a0 \u00a0 time.Time\n\n\n\n\u00a0\u00a0\u00a0\u00a0stops \u00a0 \u00a0 \u00a0 []Stop\n\n\n\n}\n\n\n\n\n\n// Il metodo riflette l'azione \"Aggiungere una Tappa\".\n\n\n\n// La firma del metodo stesso \u00e8 parte del Linguaggio Ubiquo.\n\n\n\nfunc (t *Trip) AddStop(place Place, day int) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... logica per validare che il giorno sia nel range del viaggio ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0newStop := Stop{Place: place, DayOfTrip: day}\n\n\n\n\u00a0\u00a0\u00a0\u00a0t.stops = append(t.stops, newStop)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n\n\n\n\n\n// suggestions/proposal.go - La Proposta di Itinerario\n\n\n\npackage suggestions\n\n\n\n\n\n// \u00c8 un tipo distinto perch\u00e9 \u00e8 un concetto distinto.\n\n\n\ntype ItineraryProposal struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ID\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0SuggestedStops []struct{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PlaceName string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Day \u00a0 \u00a0 \u00a0 int\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n}\n\n\n\n\n\n// planning/conversion_service.go - Il servizio di dominio per la conversione\n\n\n\npackage planning\n\n\n\n\n\nimport \"where-should-i-be/suggestions\"\n\n\n\n\n\n// Il nome del servizio \u00e8 un verbo del nostro linguaggio.\n\n\n\n// Questo non \u00e8 un \"manager\", ha uno scopo specifico e di business.\n\n\n\ntype ProposalConverter struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... dipendenze, come un repository per trovare i Luoghi (Place) ...\n\n\n\n}\n\n\n\n\n\n// Il nome del metodo \u00e8 esplicito e non ambiguo.\n\n\n\nfunc (c *ProposalConverter) ConvertToTrip(proposal suggestions.ItineraryProposal) (*Trip, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Crea un nuovo Trip vuoto.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Per ogni \"suggested stop\" nella proposta...\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. ...cerca il `Place` corrispondente nel nostro sistema.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 4. ...chiama il metodo `trip.AddStop()`.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 5. Restituisce il nuovo Trip.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil, nil\n\n\n\n}\n</code></pre> <p>La differenza \u00e8 radicale. Il secondo esempio \u00e8 auto-documentante. Un nuovo sviluppatore pu\u00f2 leggere la struttura dei file e i nomi dei tipi e dei metodi per iniziare a capire le regole del business senza dover leggere una singola riga di documentazione esterna. Il codice \u00e8 il design.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#74-tecniche-per-scoprire-e-coltivare-il-linguaggio","title":"7.4. Tecniche per Scoprire e Coltivare il Linguaggio","text":"<p>Il Linguaggio Ubiquo non appare per magia. Deve essere attivamente scoperto, negoziato e coltivato. Ecco alcune tecniche pratiche per farlo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#event-storming","title":"Event Storming","text":"<p>\u00c8 la tecnica pi\u00f9 potente per la scoperta del dominio. L'Event Storming \u00e8 un workshop collaborativo e flessibile dove sviluppatori ed esperti di dominio esplorano un processo di business complesso. Si usa una grande parete (o una lavagna virtuale) e post-it di colori diversi per mappare i Domain Events (eventi di dominio, es. \"Viaggio Pianificato\", \"Tappa Aggiunta\").</p> <p>Approfondimento: L'Event Storming \u00e8 stato inventato da Alberto Brandolini. Il suo libro, \"Introducing EventStorming\", \u00e8 la risorsa definitiva. Preannunciamo che dedicheremo l'intero Capitolo 17 a questa tecnica.</p> <p>Il risultato di una sessione di Event Storming non \u00e8 solo una migliore comprensione del flusso di business, ma anche un vocabolario condiviso di eventi, comandi e attori, che \u00e8 il seme del nostro Linguaggio Ubiquo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#creare-un-glossario-condiviso","title":"Creare un Glossario Condiviso","text":"<p>Mantenere un glossario centrale \u00e8 una buona pratica.</p> <ul> <li> <p>Dove? In un posto facile da trovare e modificare per tutti. Una pagina Confluence/Notion o, ancora meglio, un file <code>GLOSSARY.md</code> direttamente nella root del repository del codice.</p> </li> <li> <p>Cosa contiene? Non solo il termine e la sua definizione, ma anche:</p> </li> </ul> <p>- Esempi: \"Un Viaggio \u00e8 'Weekend a Roma', non 'Volo FR123'\".</p> <p>- Controesempi / Ambiguit\u00e0: \"Una Proposta di Itinerario NON \u00e8 un Viaggio. Diventa un Viaggio solo dopo la Conversione\".</p> <p>- Termini Correlati: Link ad altri termini del glossario.</p> <p>Questo glossario non \u00e8 il linguaggio stesso, ma un suo utile riflesso, un punto di riferimento.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-linguaggio-nelle-user-stories","title":"Il Linguaggio nelle User Stories","text":"<p>Scrivete le user stories e i requisiti usando il linguaggio rigoroso.</p> <ul> <li> <p>Male: \"Come utente, voglio aggiungere un posto al mio piano.\"</p> </li> <li> <p>Bene: \"Come Utente Registrato, voglio poter Aggiungere una Tappa a un Viaggio esistente selezionando un Luogo.\"</p> </li> </ul> <p>Questo costringe tutti, a partire dai Product Manager, a usare i termini corretti fin dall'inizio del processo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-linguaggio-nelle-code-review","title":"Il Linguaggio nelle Code Review","text":"<p>Le code review sono un'opportunit\u00e0 fantastica per rafforzare il linguaggio.</p> <ul> <li> <p>\"Questa variabile <code>x</code> non \u00e8 chiara. Intendevi <code>tappa</code> o <code>luogo</code>?\"</p> </li> <li> <p>\"Il metodo <code>updateTrip</code> \u00e8 troppo generico. L'azione di business qui \u00e8 <code>ChangeTripDates</code> (Cambiare Date Viaggio), quindi il metodo dovrebbe chiamarsi cos\u00ec.\"</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#75-un-linguaggio-per-ogni-contesto","title":"7.5. Un Linguaggio per Ogni Contesto","text":"<p>Un punto cruciale, che collega la progettazione tattica (come questa) a quella strategica, \u00e8 che l'Ubiquitous Language \u00e8 valido solo all'interno di un Bounded Context (Contesto Delimitato).</p> <p>Come abbiamo accennato nel Capitolo 6, un Bounded Context \u00e8 un confine all'interno del quale un modello di dominio \u00e8 consistente. Questo significa che lo stesso concetto del mondo reale pu\u00f2 essere rappresentato da modelli e termini diversi in contesti diversi.</p> <p>Consideriamo il concetto di \"Viaggio\" nella nostra applicazione:</p> <ol> <li>Nel <code>PlanningContext</code> (Contesto di Pianificazione):</li> </ol> <p>- Il termine chiave \u00e8 <code>Viaggio</code>.</p> <p>- Il modello \u00e8 ricco: ha un ID, date, una lista di <code>Tappe</code>, regole di validazione complesse (un viaggio non pu\u00f2 avere tappe sovrapposte, ecc.). Il suo scopo \u00e8 la pianificazione logistica.</p> <ol> <li>Nel <code>BillingContext</code> (Contesto di Fatturazione):</li> </ol> <p>- Potremmo non avere affatto il concetto di <code>Viaggio</code>. Potremmo avere il concetto di <code>Prodotto Acquistato</code>.</p> <p>- Il modello <code>ProdottoAcquistato</code> potrebbe avere un <code>trip_id</code> come riferimento, ma i suoi attributi principali sarebbero <code>Prezzo</code>, <code>DataAcquisto</code>, <code>StatoPagamento</code>. La sua logica riguarderebbe rimborsi e fatture, non l'aggiunta di tappe.</p> <ol> <li>Nel <code>SocialContext</code> (Contesto Social):</li> </ol> <p>- Qui, l'utente non \"pianifica\" pi\u00f9, ma \"condivide\". Il termine chiave potrebbe essere <code>Diario di Viaggio</code>.</p> <p>- Il modello si concentrerebbe su <code>Foto</code>, <code>Racconti</code>, <code>Valutazioni</code>. La logica riguarderebbe la privacy (chi pu\u00f2 vederlo) e i commenti.</p> <p>Tentare di creare un'unica, mostruosa classe <code>Trip</code> che serva tutti e tre i contesti sarebbe un disastro. Ogni contesto ha il suo proprio Linguaggio Ubiquo, ottimizzato per risolvere uno specifico problema di business. L'integrazione tra contesti avviene tramite traduzione esplicita ai confini (come vedremo nel Capitolo 18, \"Context Mapping\").</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#76-conclusioni-e-prossimi-passi","title":"7.6. Conclusioni e Prossimi Passi","text":"<p>L'Ubiquitous Language non \u00e8 un lusso, ma una necessit\u00e0 per il successo di progetti software complessi. \u00c8 l'investimento che facciamo per garantire che ci\u00f2 che costruiamo sia esattamente ci\u00f2 che il business necessita.</p> <ul> <li> <p>Abbassa la frizione: Elimina la necessit\u00e0 di traduzione mentale tra business e tecnologia.</p> </li> <li> <p>Rende il codice espressivo: Il codice diventa una narrazione chiara del dominio.</p> </li> <li> <p>Guida il design: La scoperta del linguaggio guida la scoperta dei modelli (Entit\u00e0, Value Objects, Aggregati).</p> </li> <li> <p>\u00c8 il cuore della collaborazione: Trasforma lo sviluppo software da un'attivit\u00e0 di \"raccolta requisiti\" a un processo di problem-solving condiviso.</p> </li> </ul> <p>Nei prossimi capitoli, vedremo come usare questo linguaggio per definire i mattoncini fondamentali del nostro modello di dominio: Aggregati, Entit\u00e0 e Value Objects. Il Linguaggio Ubiquo sar\u00e0 la nostra guida costante, la nostra stella polare nella progettazione tattica.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-8-aggregates-e-confini-di-consistenza","title":"Capitolo 8: Aggregates e Confini di Consistenza","text":"<p>Nei capitoli precedenti, abbiamo stabilito le fondamenta della nostra filosofia di progettazione. Abbiamo capito l'importanza di un modello di dominio ricco (Capitolo 6) e abbiamo imparato a costruirci attorno un Linguaggio Ubiquo (Capitolo 7) per garantire che il nostro codice parli la lingua del business. Ora, dobbiamo affrontare una delle sfide pi\u00f9 grandi nella progettazione di software complessi: gestire le relazioni e garantire la coerenza dei dati.</p> <p>Un modello di dominio non \u00e8 una collezione di oggetti isolati. \u00c8 una rete intricata di relazioni: un <code>Viaggio</code> ha delle <code>Tappe</code>, un <code>Utente</code> ha delle <code>Preferenze</code>, una <code>Proposta di Itinerario</code> \u00e8 associata a dei <code>Luoghi</code>. Se ogni oggetto potesse essere modificato liberamente da qualsiasi punto del sistema, il caos regnerebbe sovrano. Come possiamo garantire che, dopo ogni operazione, il nostro sistema si trovi in uno stato valido e consistente?</p> <p>La risposta del Domain-Driven Design a questa domanda \u00e8 il pattern dell'Aggregate (Aggregato). L'aggregato \u00e8 forse il pi\u00f9 cruciale dei pattern tattici. \u00c8 il guardiano della consistenza, il pilastro che ci permette di costruire modelli robusti e manutenibili. In questo capitolo, ne sveleremo ogni segreto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#81-il-problema-un-intreccio-di-oggetti-ingestibile","title":"8.1. Il Problema: Un Intreccio di Oggetti Ingestibile","text":"<p>Immaginiamo il nostro modello di dominio per \"Where Should I Be?\" senza il concetto di Aggregato. Avremmo una serie di oggetti collegati tra loro:</p> <pre><code>+----------+\u00a0 \u00a0 \u00a0 1..*\u00a0 \u00a0 \u00a0 +---------+\u00a0 \u00a0 \u00a0 1..1\u00a0 \u00a0 \u00a0 +--------+\n\n\n\n|\u00a0 Utente\u00a0 |----------------| Viaggio |----------------| Budget |\n\n\n\n+----------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +----+----+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +--------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 1..*\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+-------+\u00a0 \u00a0 \u00a0 1..1\u00a0 \u00a0 \u00a0 +-------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| Tappa |----------------| Luogo |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+-------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +-------+\n</code></pre> <p>Ora, consideriamo una semplice operazione: \"l'utente vuole estendere la sua vacanza di un giorno\". Questa azione scatena una cascata di potenziali problemi di consistenza:</p> <ol> <li> <p>Modifica della Data: Un programmatore scrive il codice per modificare la data di fine del <code>Viaggio</code>.</p> </li> <li> <p>Violazione delle Regole: Cosa succede se una <code>Tappa</code> era pianificata proprio nel giorno che ora \u00e8 stato eliminato? Quella <code>Tappa</code> \u00e8 ora orfana, invalida. Il nostro modello \u00e8 in uno stato inconsistente.</p> </li> <li> <p>Violazione del Budget: Estendere il viaggio potrebbe invalidare il <code>Budget</code> associato. Forse il budget era calcolato su base giornaliera.</p> </li> <li> <p>Logica Sparsa: Dove mettiamo il codice di validazione? Un pezzo nel servizio che modifica il <code>Viaggio</code>, un altro nel servizio che gestisce le <code>Tappe</code>? Come ci assicuriamo che tutte le regole vengano sempre applicate, in ogni punto del sistema che modifica questi oggetti?</p> </li> </ol> <p>Senza un confine chiaro, la responsabilit\u00e0 di mantenere la coerenza \u00e8 distribuita, e quindi, di fatto, non \u00e8 di nessuno. \u00c8 incredibilmente facile dimenticare una regola, portando a dati corrotti e bug difficili da diagnosticare.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#82-la-soluzione-laggregate-come-scudo-di-consistenza","title":"8.2. La Soluzione: L'Aggregate come Scudo di Consistenza","text":"<p>L'Aggregate pattern risolve questo problema introducendo un confine formale attorno a un gruppo di oggetti correlati.</p> <p>Definizione: Un Aggregate \u00e8 un cluster di oggetti di dominio (Entit\u00e0 e Value Objects) che pu\u00f2 essere trattato come una singola unit\u00e0. Ogni Aggregato ha un'entit\u00e0 principale chiamata Aggregate Root (Radice dell'Aggregato), che funge da unico punto di accesso per qualsiasi modifica al suo interno.</p> <p>L'Aggregate Root \u00e8 il guardiano. Il suo compito \u00e8 far rispettare gli invarianti\u2014regole di business che devono essere sempre vere\u2014all'interno del suo confine.</p> <p>Pensiamo a un'automobile come analogia:</p> <ul> <li> <p>L'Automobile \u00e8 l'Aggregate Root.</p> </li> <li> <p>Il Motore, le Ruote, il Sistema Elettrico sono oggetti interni all'aggregato.</p> </li> <li> <p>L'interfaccia pubblica dell'auto (volante, pedali, cambio) sono i metodi dell'Aggregate Root.</p> </li> <li> <p>Quando premiamo l'acceleratore, non stiamo interagendo direttamente con le valvole di iniezione del carburante. Stiamo invocando un metodo sull'Aggregate \"Automobile\", che si assicura che il motore riceva la giusta quantit\u00e0 di carburante, che la trasmissione sia nella marcia corretta, ecc., mantenendo l'intero sistema in uno stato consistente e funzionante. Non possiamo bypassare l'interfaccia e manipolare direttamente i pistoni mentre l'auto \u00e8 in marcia.</p> </li> </ul> <p>L'Aggregate applica lo stesso principio al nostro software. Definiamo un confine attorno a <code>Viaggio</code> e alle sue <code>Tappe</code>. Il <code>Viaggio</code> diventa l'Aggregate Root.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#83-le-regole-doro-per-lavorare-con-gli-aggregati","title":"8.3. Le Regole d'Oro per Lavorare con gli Aggregati","text":"<p>Perch\u00e9 il pattern funzioni, dobbiamo seguire scrupolosamente alcune regole. Queste non sono suggerimenti; sono leggi fondamentali per il successo del design.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#regola-1-laggregate-root-e-lunico-punto-daccesso","title":"Regola 1: L'Aggregate Root \u00e8 l'Unico Punto d'Accesso","text":"<p>Il codice esterno pu\u00f2 avere un riferimento solo all'Aggregate Root. Non deve mai avere un riferimento diretto a un oggetto interno all'aggregato.</p> <p>Come si implementa in Go? Tramite l'incapsulamento. I campi che contengono gli oggetti interni non vengono esportati (iniziano con lettera minuscola).</p> <p>Vediamo come progettare l'aggregato <code>Viaggio</code>:</p> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: Viaggio come Aggregate Root\n\n\n\n//\n\n\n\n\n\n// planning/trip.go\n\n\n\npackage planning\n\n\n\n\n\nimport \"time\"\n\n\n\n\n\n// ... altre definizioni come TripID, Place, etc.\n\n\n\n\n\ntype TripStatus string\n\n\n\n\n\nconst (\n\n\n\n\u00a0\u00a0\u00a0\u00a0TripStatusPlanning \u00a0 TripStatus = \"Planning\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0TripStatusInProgress TripStatus = \"InProgress\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0TripStatusCompleted\u00a0 TripStatus = \"Completed\"\n\n\n\n)\n\n\n\n\n\n// La struct Tappa non \u00e8 esportata. Pu\u00f2 essere usata solo all'interno\n\n\n\n// del package 'planning'. Meglio ancora, \u00e8 usata solo dal Viaggio.\n\n\n\ntype stop struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0place \u00a0 \u00a0 Place\n\n\n\n\u00a0\u00a0\u00a0\u00a0dayOfTrip int\n\n\n\n\u00a0\u00a0\u00a0\u00a0notes \u00a0 \u00a0 string\n\n\n\n}\n\n\n\n\n\n// Viaggio \u00e8 l'Aggregate Root. \u00c8 l'unico tipo esportato.\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id\u00a0 \u00a0 \u00a0 \u00a0 TripID\n\n\n\n\u00a0\u00a0\u00a0\u00a0ownerID \u00a0 UserID // Riferimento a un altro aggregato tramite ID (vedi Regola 2)\n\n\n\n\u00a0\u00a0\u00a0\u00a0status\u00a0 \u00a0 TripStatus\n\n\n\n\u00a0\u00a0\u00a0\u00a0dateRange DateRange // Value Object\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Il campo 'stops' \u00e8 privato! Nessuno dall'esterno pu\u00f2 manipolare\n\n\n\n\u00a0\u00a0\u00a0\u00a0// direttamente la slice delle tappe.\n\n\n\n\u00a0\u00a0\u00a0\u00a0stops \u00a0 \u00a0 []stop\n\n\n\n}\n\n\n\n\n\n// L'unico modo per aggiungere una Tappa \u00e8 attraverso questo metodo\n\n\n\n// sull'Aggregate Root, che pu\u00f2 far rispettare gli invarianti.\n\n\n\nfunc (t *Trip) AddStop(place Place, day int, notes string) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// INVARIANTE 1: Non si possono aggiungere tappe a un viaggio non in pianificazione.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if t.status != TripStatusPlanning {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"cannot add stop to a trip not in planning status\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// INVARIANTE 2: La tappa deve essere all'interno delle date del viaggio.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if !t.dateRange.ContainsDay(day) { // Assumendo che DateRange abbia questa logica\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return errors.New(\"stop day is outside the trip's date range\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... altre regole ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0t.stops = append(t.stops, stop{place: place, dayOfTrip: day, notes: notes})\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n\n\n\n\n\n// Se il codice esterno ha bisogno di leggere le tappe, forniamo\n\n\n\n// un metodo che restituisce una COPIA (Value Object) o una versione\n\n\n\n// read-only, non un puntatore alla slice interna.\n\n\n\ntype StopInfo struct { // Un Data Transfer Object (DTO)\n\n\n\n\u00a0\u00a0\u00a0\u00a0PlaceName string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Day \u00a0 \u00a0 \u00a0 int\n\n\n\n\u00a0\u00a0\u00a0\u00a0Notes \u00a0 \u00a0 string\n\n\n\n}\n\n\n\n\n\nfunc (t *Trip) Stops() []StopInfo {\n\n\n\n\u00a0\u00a0\u00a0\u00a0infos := make([]StopInfo, len(t.stops))\n\n\n\n\u00a0\u00a0\u00a0\u00a0for i, s := range t.stops {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0infos[i] = StopInfo{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PlaceName: s.place.Name,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Day: \u00a0 \u00a0 \u00a0 s.dayOfTrip,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Notes: \u00a0 \u00a0 s.notes,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0return infos\n\n\n\n}\n</code></pre> <p>Controesempio (COSA NON FARE):</p> <p>Go</p> <pre><code>type Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ESPORTATO! Disastro imminente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0Stops []*Stop\n\n\n\n}\n\n\n\n\n\n// Codice client malvagio\n\n\n\ntrip := repository.FindByID(...)\n\n\n\nnewStop := &amp;Stop{...}\n\n\n\n// Bypass totale di tutte le regole di business!\n\n\n\ntrip.Stops = append(trip.Stops, newStop)\u00a0\n\n\n\nrepository.Save(trip) // Il nostro modello \u00e8 ora corrotto.\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#regola-2-riferirsi-ad-altri-aggregati-solo-tramite-id","title":"Regola 2: Riferirsi ad Altri Aggregati solo tramite ID","text":"<p>Questa regola \u00e8 tanto sottile quanto potente. Un aggregato non dovrebbe contenere un riferimento diretto in memoria (un puntatore) a un altro aggregato. Dovrebbe contenere solo l'ID dell'altro aggregato.</p> <p>Nel nostro <code>Trip</code>, notate: <code>ownerID UserID</code>, non <code>owner *User</code>.</p> <p>Perch\u00e9 questa regola \u00e8 cos\u00ec importante?</p> <ol> <li> <p>Mantenere i Confini Chiari: Se <code>Trip</code> contenesse un <code>*User</code>, sarebbe facile per un programmatore scrivere <code>trip.owner.ChangeEmail()</code>, modificando un altro aggregato dall'interno di uno diverso. Questo distrugge il concetto di confine e di responsabilit\u00e0.</p> </li> <li> <p>Prestazioni e Scalabilit\u00e0: Caricare un aggregato dal database deve essere un'operazione rapida. Se <code>Trip</code> contenesse un <code>*User</code>, che a sua volta contiene una lista di <code>*Trip</code>, caricare un singolo viaggio potrebbe potenzialmente caricare l'intero database in memoria. Mantenendo solo gli ID, carichiamo solo ci\u00f2 che ci serve.</p> </li> <li> <p>Abilitare la Distribuzione: In un sistema a microservizi, l'aggregato <code>User</code> potrebbe vivere in un servizio completamente diverso (<code>IdentityService</code>) rispetto all'aggregato <code>Trip</code> (<code>PlannerService</code>). Un riferimento diretto in memoria \u00e8 impossibile. Un riferimento tramite ID \u00e8 l'unico modo per farli comunicare.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#regola-3-una-transazione-un-aggregato","title":"Regola 3: Una Transazione, un Aggregato","text":"<p>Il confine di un aggregato definisce il confine di una transazione. Quando eseguiamo un comando su un aggregato, tutte le modifiche a tutti gli oggetti al suo interno devono essere salvate atomicamente (tutto o niente).</p> <p>Questo implica che una singola transazione di business non dovrebbe modificare pi\u00f9 di un aggregato.</p> <p>\"Ma come faccio a mantenere la coerenza tra aggregati diversi?\", potreste chiedere. La risposta \u00e8 la consistenza eventuale (eventual consistency).</p> <p>Se, quando un <code>Trip</code> viene creato, dobbiamo aggiornare un contatore nel <code>User</code> (es. <code>numberOfTrips</code>), non lo facciamo nella stessa transazione. Invece:</p> <ol> <li> <p>Salviamo il nuovo aggregato <code>Trip</code>. Questa \u00e8 la prima transazione, atomica e consistente.</p> </li> <li> <p>L'aggregato <code>Trip</code>, dopo essere stato salvato, pubblica un Domain Event (evento di dominio), come <code>TripCreated</code>.</p> </li> <li> <p>Un altro pezzo del sistema (un altro servizio o un gestore di eventi) ascolta questo evento e, in una seconda e separata transazione, carica l'aggregato <code>User</code> e aggiorna il suo contatore.</p> </li> </ol> <p>Per un breve istante, il <code>Trip</code> esiste ma il contatore non \u00e8 ancora aggiornato. Questo va benissimo per la maggior parte dei casi di business. Il sistema \u00e8 eventualmente consistente. Questo approccio \u00e8 la chiave per costruire sistemi scalabili e disaccoppiati.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#84-progettare-aggregati-efficaci-larte-della-dimensione-giusta","title":"8.4. Progettare Aggregati Efficaci: L'Arte della Dimensione Giusta","text":"<p>La domanda pi\u00f9 difficile nel design degli aggregati \u00e8: \"Quanto deve essere grande?\". Non c'\u00e8 una risposta unica, ma ci sono delle euristiche fondamentali.</p> <p>Approfondimento: Vaughn Vernon, nel suo libro \"Implementing Domain-Driven Design\", discute ampiamente queste regole. La sua raccomandazione \u00e8 chiara: modellare aggregati piccoli.</p> <p>Euristiche di Design:</p> <ol> <li> <p>Partire dal Piccolo: La regola predefinita dovrebbe essere: un aggregato contiene solo l'Aggregate Root e, al massimo, qualche Value Object. Includere altre entit\u00e0 solo se strettamente necessario.</p> </li> <li> <p>La Domanda Chiave sulla Consistenza: Per decidere se un oggetto deve stare dentro o fuori un aggregato, ponetevi questa domanda: \"Se modifico l'Aggregate Root, questo oggetto deve essere modificato nella stessa identica transazione per mantenere il sistema valido?\".</p> </li> </ol> <p>- Se la risposta \u00e8 s\u00ec, allora deve stare dentro. Esempio: quando modifico le date di un <code>Viaggio</code>, le <code>Tappe</code> devono essere validate immediatamente. <code>Tappa</code> sta dentro <code>Viaggio</code>.</p> <p>- Se la risposta \u00e8 no, pu\u00f2 essere gestito con consistenza eventuale. Esempio: quando un <code>Utente</code> cambia il suo nome, non \u00e8 necessario aggiornare istantaneamente il nome dell'autore in tutti i suoi <code>Viaggi</code> passati. <code>Utente</code> e <code>Viaggio</code> sono aggregati separati.</p> <ol> <li>Considerare i Casi d'Uso: Il design degli aggregati \u00e8 guidato dal comportamento, non solo dai dati. Analizzate i comandi che il vostro sistema deve eseguire. Se molti comandi richiedono di modificare <code>A</code> e <code>B</code> insieme, potrebbero appartenere allo stesso aggregato. Ma se <code>B</code> pu\u00f2 cambiare spesso e indipendentemente da <code>A</code>, \u00e8 un forte indicatore che dovrebbero essere separati.</li> </ol> <p>L'Aggregato <code>Viaggio</code> nella nostra App</p> <p>Applichiamo queste regole a \"Where Should I Be?\":</p> <ul> <li> <p>Aggregate Root: <code>Trip</code></p> </li> <li> <p>Entit\u00e0 Interne: <code>stop</code> (nota la <code>s</code> minuscola)</p> </li> <li> <p>Value Objects Interni: <code>DateRange</code>, <code>Money</code> (per il budget)</p> </li> <li> <p>Riferimenti Esterni (ID): <code>ownerID</code> (che punta all'aggregato <code>User</code>), <code>originalProposalID</code> (che punta a un eventuale aggregato <code>ItineraryProposal</code>).</p> </li> </ul> <p>Questo design garantisce che ogni <code>Trip</code> sia un'isola di consistenza, facilmente gestibile, persistibile e scalabile.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#85-il-ciclo-di-vita-factory-e-repository","title":"8.5. Il Ciclo di Vita: Factory e Repository","text":"<p>Ora che abbiamo i nostri aggregati, come li creiamo e li salviamo? Qui entrano in gioco altri due pattern tattici.</p> <ul> <li> <p>Factory (Fabbrica): Se la creazione di un aggregato \u00e8 complessa (richiede la validazione di molti parametri per creare uno stato iniziale valido), possiamo usare una Factory. Una Factory \u00e8 un oggetto o una funzione il cui unico scopo \u00e8 creare altri oggetti. Il nostro <code>NewTrip(...)</code> del Capitolo 6 \u00e8 un semplice esempio di Factory Method.</p> </li> <li> <p>Repository (Deposito): Questo pattern (che esploreremo a fondo nel Capitolo 13) si occupa della persistenza degli aggregati. Dal punto di vista del dominio, un Repository \u00e8 come una \"collezione in memoria\" di aggregati. Avremo un <code>TripRepository</code>, ma non avremo un <code>StopRepository</code>. Perch\u00e9? Perch\u00e9 la Regola 1 ci impone di accedere alle <code>Tappe</code> solo attraverso l'aggregato <code>Viaggio</code>. Il Repository carica e salva l'aggregato come un'unica unit\u00e0.</p> </li> </ul> <p>Go</p> <pre><code>// Interfaccia di un potenziale Repository\n\n\n\ntype TripRepository interface {\n\n\n\n\u00a0\u00a0\u00a0\u00a0Save(ctx context.Context, trip *Trip) error\n\n\n\n\u00a0\u00a0\u00a0\u00a0FindByID(ctx context.Context, id TripID) (*Trip, error)\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#86-conclusioni-ordine-dal-caos","title":"8.6. Conclusioni: Ordine dal Caos","text":"<p>Gli aggregati sono il cuore pulsante del modello tattico di DDD. Sono lo strumento principale con cui trasformiamo un groviglio di oggetti interconnessi in un sistema ordinato, robusto e comprensibile.</p> <ul> <li> <p>Definiscono confini transazionali chiari.</p> </li> <li> <p>Proteggono l'integrit\u00e0 del modello facendo rispettare gli invarianti.</p> </li> <li> <p>Semplificano il design limitando le relazioni tra oggetti.</p> </li> <li> <p>Abilitano la scalabilit\u00e0 promuovendo la consistenza eventuale tra di essi.</p> </li> </ul> <p>Padroneggiare l'arte di progettare aggregati efficaci \u00e8 una delle competenze pi\u00f9 preziose per un architetto software. Richiede pratica, un dialogo costante con gli esperti di dominio e la disciplina di seguire le regole d'oro che abbiamo delineato.</p> <p>Nel prossimo capitolo, faremo un passo indietro e analizzeremo pi\u00f9 in dettaglio i due tipi di oggetti che compongono i nostri aggregati: i Value Objects e le Entities.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-9-value-objects-e-immutabilita","title":"Capitolo 9: Value Objects e Immutabilit\u00e0","text":"<p>Nei capitoli precedenti abbiamo esplorato il design di alto livello del nostro modello di dominio, definendo il Linguaggio Ubiquo e i confini di consistenza degli Aggregati. Ora \u00e8 il momento di zoomare ancora di pi\u00f9, fino ad arrivare ai mattoncini fondamentali con cui questi aggregati sono costruiti: gli oggetti stessi.</p> <p>Nel Domain-Driven Design, gli oggetti del nostro modello si dividono in due categorie principali: le Entit\u00e0 (Entities) e gli Oggetti Valore (Value Objects). Mentre le entit\u00e0 hanno un'identit\u00e0 che persiste nel tempo, i Value Objects descrivono e misurano aspetti del dominio. Sono onnipresenti, eppure spesso vengono trascurati, portando a un design fragile e poco espressivo.</p> <p>In questo capitolo, ci dedicheremo interamente ai Value Objects. Scopriremo perch\u00e9 sono molto pi\u00f9 di semplici contenitori di dati e come il loro superpotere\u2014l'immutabilit\u00e0\u2014possa drasticamente migliorare la robustezza, la sicurezza e la chiarezza del nostro codice Go.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#91-la-malattia-silenziosa-lossessione-per-i-primitivi","title":"9.1. La Malattia Silenziosa: L'Ossessione per i Primitivi","text":"<p>Apriamo il cofano di un'applicazione software tipica e, molto spesso, troveremo una malattia di progettazione tanto comune quanto dannosa: la Primitive Obsession (Ossessione per i Tipi Primitivi). Questa si manifesta quando usiamo tipi di base del linguaggio (stringhe, interi, float) per rappresentare concetti di dominio che hanno un significato e delle regole proprie.</p> <p>Consideriamo una prima, ingenua implementazione del nostro aggregato <code>Viaggio</code> (Trip):</p> <p>Go</p> <pre><code>//\n\n\n\n// CONTROESEMPIO: Un modello afflitto da Primitive Obsession\n\n\n\n//\n\n\n\npackage naive\n\n\n\n\n\nimport \"time\"\n\n\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0Destination\u00a0 \u00a0 \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Problema 1: Date non correlate\n\n\n\n\u00a0\u00a0\u00a0\u00a0StartDate\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 time.Time\n\n\n\n\u00a0\u00a0\u00a0\u00a0EndDate\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 time.Time\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Problema 2: Denaro come due primitive separate\n\n\n\n\u00a0\u00a0\u00a0\u00a0BudgetAmount \u00a0 \u00a0 \u00a0 float64\n\n\n\n\u00a0\u00a0\u00a0\u00a0BudgetCurrency \u00a0 \u00a0 string // \"EUR\"? \"euro\"? \"E\"? Cosa \u00e8 valido?\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Problema 3: Email come semplice stringa\n\n\n\n\u00a0\u00a0\u00a0\u00a0OwnerContactEmail\u00a0 string\n\n\n\n}\n</code></pre> <p>Questo codice sembra innocuo, ma nasconde una miriade di problemi:</p> <ol> <li> <p>Mancanza di Significato e Unit\u00e0: <code>BudgetAmount</code> e <code>BudgetCurrency</code> sono concetti inseparabili. Un importo senza una valuta non ha senso. Rappresentandoli come due campi distinti, creiamo la possibilit\u00e0 che vengano gestiti separatamente, portando a errori. Lo stesso vale per <code>StartDate</code> e <code>EndDate</code>, che insieme definiscono un \"intervallo di date\".</p> </li> <li> <p>Assenza di Validazione: Cosa impedisce a un programmatore di inserire <code>\"banana\"</code> nel campo <code>BudgetCurrency</code>? O un <code>EndDate</code> precedente a <code>StartDate</code>? O una stringa senza <code>@</code> in <code>OwnerContactEmail</code>? Nulla. La validazione, se esiste, sar\u00e0 sparsa in giro per la codebase, invece di essere legata al dato stesso.</p> </li> <li> <p>Logica Dispersa: Se volessimo confrontare due budget, dovremmo scrivere una funzione esterna che prende quattro parametri (<code>amount1</code>, <code>currency1</code>, <code>amount2</code>, <code>currency2</code>), controlla che le valute siano uguali e poi confronta gli importi. Questa logica non appartiene a un servizio generico, ma al concetto stesso di \"denaro\".</p> </li> </ol> <p>I Value Objects sono la cura per questa malattia. Ci permettono di raggruppare questi attributi in un concetto coeso, dotato di significato, regole e comportamento.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#92-cose-un-value-object","title":"9.2. Cos'\u00e8 un Value Object?","text":"<p>Definizione: Un Value Object \u00e8 un oggetto che rappresenta un aspetto descrittivo del dominio. \u00c8 definito completamente dai valori dei suoi attributi e non possiede un'identit\u00e0 concettuale propria.</p> <p>Analizziamo le sue caratteristiche fondamentali:</p> <ul> <li> <p>Descrive, Misura o Quantifica: Un Value Object non \u00e8 \"la cosa\", ma una descrizione della cosa. L'indirizzo di una persona non \u00e8 la persona. Il colore di un'auto non \u00e8 l'auto. L'importo di una transazione non \u00e8 la transazione.</p> </li> <li> <p>Uguaglianza Strutturale: Due Value Objects sono considerati uguali se tutti i loro attributi sono identici. Una banconota da 10\u20ac \u00e8 perfettamente interscambiabile con un'altra banconota da 10\u20ac. Non ci interessa il loro numero di serie (la loro identit\u00e0), ma solo il loro valore. Questo \u00e8 in netto contrasto con le Entit\u00e0, dove due oggetti con gli stessi attributi ma ID diversi sono considerati distinti.</p> </li> <li> <p>Auto-Validante: Un Value Object non dovrebbe mai esistere in uno stato non valido. La sua funzione di costruzione (la sua \"factory\") \u00e8 responsabile di far rispettare tutti gli invarianti. Se i dati non sono validi, la creazione fallisce.</p> </li> <li> <p>Immutabile: Questa \u00e8 la caratteristica pi\u00f9 importante e potente. Una volta creato, un Value Object non pu\u00f2 pi\u00f9 essere modificato. Se si desidera un valore diverso, si deve creare una nuova istanza dell'oggetto.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#93-immutabilita-il-superpotere-dei-value-objects","title":"9.3. Immutabilit\u00e0: Il Superpotere dei Value Objects","text":"<p>L'immutabilit\u00e0 non \u00e8 solo una buona pratica, \u00e8 un cambiamento di paradigma che porta benefici enormi. Un oggetto immutabile \u00e8 un oggetto il cui stato interno non pu\u00f2 essere alterato dopo la sua creazione.</p> <p>Perch\u00e9 l'immutabilit\u00e0 \u00e8 cos\u00ec potente?</p> <ol> <li> <p>Sicurezza nei Sistemi Concorrenti: In Go, la concorrenza \u00e8 una funzionalit\u00e0 di prima classe. Quando pi\u00f9 goroutine accedono a dati condivisi e modificabili, abbiamo bisogno di meccanismi di sincronizzazione complessi (come i mutex) per evitare le data race. Gli oggetti immutabili, per loro natura, sono intrinsecamente thread-safe. Possiamo passarli liberamente tra le goroutine con la certezza assoluta che nessuno li modificher\u00e0, eliminando un'intera classe di bug.</p> </li> <li> <p>Prevedibilit\u00e0 e Riduzione del Carico Cognitivo: Quando riceviamo un oggetto mutabile come parametro di una funzione, non possiamo essere sicuri del suo stato. Qualche altro pezzo del sistema potrebbe averlo modificato. Con un oggetto immutabile, questo problema scompare. Il suo valore \u00e8 fisso e prevedibile per tutto il suo ciclo di vita. Il nostro ragionamento diventa pi\u00f9 semplice e locale.</p> </li> <li> <p>Comportamento Matematico: Le operazioni sui tipi primitivi come i numeri sono intrinsecamente immutabili. Quando calcoliamo <code>5 + 3</code>, non modifichiamo il numero <code>5</code>. L'operazione produce un nuovo numero, <code>8</code>. I Value Objects dovrebbero comportarsi allo stesso modo. Un'operazione come <code>budgetIniziale.Aggiungi(spesa)</code> non modifica <code>budgetIniziale</code>, ma restituisce un <code>nuovoBudget</code>. Questo rende il codice pi\u00f9 robusto e facile da testare.</p> </li> </ol> <p>Come si ottiene l'immutabilit\u00e0 in Go?</p> <p>Poich\u00e9 Go non ha un costrutto const a livello di struct come altri linguaggi, l'immutabilit\u00e0 si ottiene per convenzione e disciplina:</p> <ul> <li> <p>Campi non esportati: Tutti i campi della struct devono avere un nome che inizia con lettera minuscola per impedire la modifica diretta dall'esterno del package.</p> </li> <li> <p>Nessun \"Setter\": Non fornire alcun metodo che modifichi lo stato interno dell'oggetto (es. <code>SetAmount(...)</code>).</p> </li> <li> <p>Le Operazioni Restituiscono Nuove Istanze: Ogni metodo che esegue una logica di trasformazione deve restituire una nuova istanza del Value Object con il nuovo stato.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#94-progettare-value-objects-in-go-esempi-pratici","title":"9.4. Progettare Value Objects in Go: Esempi Pratici","text":"<p>Rifattorizziamo il nostro modello <code>Trip</code> usando Value Objects ben progettati.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#esempio-1-il-value-object-money","title":"Esempio 1: Il Value Object <code>Money</code> \ud83d\udcb0","text":"<p>Basta con <code>float64</code> per il denaro! I float binari sono notoriamente imprecisi per i calcoli finanziari a causa di errori di arrotondamento. Useremo una libreria <code>decimal</code> e creeremo un VO <code>Money</code>.</p> <p>Riferimento Chiave: Una libreria eccellente e ampiamente utilizzata per i decimali in Go \u00e8 <code>github.com/shopspring/decimal</code>. \u00c8 considerata lo standard de facto.</p> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: Il Value Object Money\n\n\n\n//\n\n\n\npackage domain\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"errors\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/shopspring/decimal\"\n\n\n\n)\n\n\n\n\n\n// Money \u00e8 un Value Object immutabile e auto-validante.\n\n\n\ntype Money struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Campi non esportati per garantire l'immutabilit\u00e0.\n\n\n\n\u00a0\u00a0\u00a0\u00a0amount \u00a0 decimal.Decimal\n\n\n\n\u00a0\u00a0\u00a0\u00a0currency string\n\n\n\n}\n\n\n\n\n\n// NewMoney agisce da Factory e da guardiano degli invarianti.\n\n\n\nfunc NewMoney(amount decimal.Decimal, currency string) (Money, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if currency == \"\" { // Esempio di validazione\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Money{}, errors.New(\"currency cannot be empty\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// In un'app reale, qui si controllerebbe se la valuta \u00e8 un codice ISO 4217 valido.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return Money{amount: amount, currency: currency}, nil\n\n\n\n}\n\n\n\n\n\n// Metodi per l'accesso in sola lettura.\n\n\n\nfunc (m Money) Amount() decimal.Decimal {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return m.amount\n\n\n\n}\n\n\n\n\n\nfunc (m Money) Currency() string {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return m.currency\n\n\n\n}\n\n\n\n\n\n// Add \u00e8 un'operazione che restituisce una NUOVA istanza di Money.\n\n\n\n// L'oggetto originale 'm' non viene mai modificato.\n\n\n\nfunc (m Money) Add(other Money) (Money, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if m.currency != other.currency {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Money{}, errors.New(\"cannot add money with different currencies\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0newAmount := m.amount.Add(other.amount)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return Money{amount: newAmount, currency: m.currency}, nil\n\n\n\n}\n\n\n\n\n\n// Equals implementa l'uguaglianza strutturale.\n\n\n\nfunc (m Money) Equals(other Money) bool {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return m.amount.Equals(other.amount) &amp;&amp; m.currency == other.currency\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#esempio-2-il-value-object-daterange","title":"Esempio 2: Il Value Object <code>DateRange</code> \ud83d\uddd3\ufe0f","text":"<p>Un intervallo di date \u00e8 un concetto singolo, non due date separate.</p> <p>Go</p> <pre><code>package domain\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"errors\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"time\"\n\n\n\n)\n\n\n\n\n\ntype DateRange struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0start time.Time\n\n\n\n\u00a0\u00a0\u00a0\u00a0end \u00a0 time.Time\n\n\n\n}\n\n\n\n\n\nfunc NewDateRange(start, end time.Time) (DateRange, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if start.After(end) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return DateRange{}, errors.New(\"start date cannot be after end date\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0return DateRange{start: start, end: end}, nil\n\n\n\n}\n\n\n\n\n\n// La logica di business \u00e8 ora co-locata con i dati.\n\n\n\nfunc (dr DateRange) Contains(t time.Time) bool {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return (t.Equal(dr.start) || t.After(dr.start)) &amp;&amp; (t.Equal(dr.end) || t.Before(dr.end))\n\n\n\n}\n\n\n\n\n\nfunc (dr DateRange) DurationInDays() int {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return int(dr.end.Sub(dr.start).Hours() / 24)\n\n\n\n}\n\n\n\n\n\nfunc (dr DateRange) Equals(other DateRange) bool {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return dr.start.Equal(other.start) &amp;&amp; dr.end.Equal(other.end)\n\n\n\n}\n</code></pre> <p>Con questi VO, il nostro aggregato <code>Trip</code> diventa molto pi\u00f9 pulito, robusto ed espressivo:</p> <p>Go</p> <pre><code>// Trip rifattorizzato con Value Objects\n\n\n\ntype Trip struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TripID\n\n\n\n\u00a0\u00a0\u00a0\u00a0destination string\n\n\n\n\u00a0\u00a0\u00a0\u00a0dateRange \u00a0 DateRange // Molto meglio di due time.Time!\n\n\n\n\u00a0\u00a0\u00a0\u00a0budget\u00a0 \u00a0 \u00a0 Money \u00a0 \u00a0 // Coeso e sicuro!\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#95-persistenza-dei-value-objects","title":"9.5. Persistenza dei Value Objects","text":"<p>I database relazionali non hanno un tipo di colonna <code>Money</code> o <code>DateRange</code>. Come li salviamo?</p> <p>La risposta \u00e8 la scomposizione. Il Value Object esiste nel nostro modello di dominio, ma quando dobbiamo persisterlo, lo \"appiattiamo\" nelle sue parti primitive. Il Repository (che vedremo nel Capitolo 13) \u00e8 responsabile di questa traduzione.</p> <ul> <li> <p>Salvataggio: Quando il <code>TripRepository</code> salva un <code>Trip</code>, prender\u00e0 il VO <code>budget</code> e scriver\u00e0 i suoi valori in due colonne della tabella <code>trips</code>: <code>budget_amount</code> (di tipo <code>NUMERIC</code>) e <code>budget_currency</code> (di tipo <code>VARCHAR</code>).</p> </li> <li> <p>Caricamento: Quando il repository legge una riga dalla tabella <code>trips</code>, prender\u00e0 i valori dalle colonne <code>budget_amount</code> e <code>budget_currency</code> e user\u00e0 la factory <code>NewMoney</code> per ricostruire il Value Object <code>Money</code> prima di idratare l'aggregato <code>Trip</code>.</p> </li> </ul> <p>Questo meccanismo mantiene il nostro modello di dominio puro e completamente agnostico rispetto allo schema di persistenza.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#96-value-object-vs-entity-un-confronto-chiave","title":"9.6. Value Object vs. Entity: Un Confronto Chiave","text":"<p>\u00c8 fondamentale non confondere i Value Objects con le Entit\u00e0, che esploreremo nel prossimo capitolo. La differenza principale risiede nel concetto di identit\u00e0.</p> <p>|Caratteristica|Value Object|Entity (Entit\u00e0)|</p> <p>|---|---|---|</p> <p>|Identit\u00e0|Non ha identit\u00e0. \u00c8 definito dai suoi attributi.|Ha un'identit\u00e0 unica (ID) che non cambia mai.|</p> <p>|Uguaglianza|Uguaglianza strutturale (valori uguali).|Uguaglianza per identit\u00e0 (ID uguali).|</p> <p>|Ciclo di Vita|Effimero. Creato quando serve, poi scartato.|Ha una storia. Viene creato, modificato e cancellato.|</p> <p>|Immutabilit\u00e0|Fortemente raccomandata.|Intrinsecamente mutabile (i suoi attributi cambiano nel tempo).|</p> <p>|Esempio|<code>Money</code>, <code>DateRange</code>, <code>Indirizzo</code>|<code>Utente</code>, <code>Viaggio</code>, <code>Ordine</code>|</p> <p>Analogia finale: Pensa a una mappa della citt\u00e0 (un Value Object). Se hai due stampe identiche della stessa mappa, sono interscambiabili. Se versi del caff\u00e8 su una, la butti via e ne usi un'altra. Non \"ripari\" la mappa. Ora pensa a te stesso (un'Entit\u00e0). Sei unico. Se cambi indirizzo (un attributo), non vieni sostituito con una \"nuova persona\". La tua identit\u00e0 rimane la stessa, ma il tuo stato cambia.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#97-conclusioni-e-prossimi-passi","title":"9.7. Conclusioni e Prossimi Passi","text":"<p>Abbiamo scoperto che i Value Objects non sono semplici contenitori di dati. Sono un pattern di design fondamentale che porta un'enorme chiarezza e robustezza al nostro modello di dominio.</p> <ul> <li> <p>Combattono la Primitive Obsession dando un nome e un comportamento ai concetti del dominio.</p> </li> <li> <p>Garantiscono la validit\u00e0 tramite le loro factory.</p> </li> <li> <p>Semplificano la concorrenza e il ragionamento grazie all'immutabilit\u00e0.</p> </li> <li> <p>Rendono il codice pi\u00f9 espressivo e allineato al Linguaggio Ubiquo.</p> </li> </ul> <p>Adottare una disciplina rigorosa nell'uso dei Value Objects \u00e8 uno dei passi pi\u00f9 efficaci che potete compiere per migliorare la qualit\u00e0 del vostro codice.</p> <p>Nel prossimo capitolo, esamineremo l'altra faccia della medaglia: le Entit\u00e0, oggetti definiti non da ci\u00f2 che sono, ma da chi sono lungo il corso del tempo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-10-entities-e-identita-nel-ciclo-di-vita","title":"Capitolo 10: Entities e Identit\u00e0 nel Ciclo di Vita","text":"<p>Nel capitolo precedente, abbiamo esplorato il mondo dei Value Objects: oggetti descrittivi, definiti dai loro attributi e resi potenti dall'immutabilit\u00e0. Essi rappresentano il \"cosa\" del nostro dominio. Ora, \u00e8 il momento di rivolgere la nostra attenzione all'altra faccia della medaglia, al \"chi\": le Entit\u00e0 (Entities).</p> <p>Se un Value Object \u00e8 come il valore \"10\u20ac\", un'entit\u00e0 \u00e8 come la specifica banconota da 10\u20ac che hai nel portafoglio, con il suo numero di serie univoco. Se un Value Object \u00e8 come un indirizzo scritto su un pezzo di carta, un'entit\u00e0 \u00e8 come la persona che vive a quell'indirizzo.</p> <p>Le entit\u00e0 sono gli attori principali del nostro dominio. Hanno una storia, un ciclo di vita, e soprattutto, un'identit\u00e0 che persiste nonostante i cambiamenti. Comprendere come modellare e gestire questa identit\u00e0 \u00e8 fondamentale per costruire un dominio che rifletta fedelmente la realt\u00e0 e che sia in grado di evolvere nel tempo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#101-cose-unentita","title":"10.1. Cos'\u00e8 un'Entit\u00e0?","text":"<p>Definizione: Un'Entit\u00e0 \u00e8 un oggetto del dominio che non \u00e8 definito dai suoi attributi, ma da un filo di continuit\u00e0 e da un'identit\u00e0 unica. Due istanze di un'entit\u00e0 sono considerate diverse anche se i loro attributi sono identici, a meno che non condividano la stessa identit\u00e0.</p> <p>Un <code>Utente</code> nella nostra applicazione \"Where Should I Be?\" \u00e8 l'esempio perfetto di un'entit\u00e0. Consideriamo due utenti:</p> <ol> <li> <p>Mario Rossi, email: <code>m.rossi@example.com</code>, ID: <code>123-abc</code></p> </li> <li> <p>Mario Rossi, email: <code>mario.rossi@email.it</code>, ID: <code>456-def</code></p> </li> </ol> <p>Anche se condividono lo stesso nome, sono due persone distinte, due entit\u00e0 separate nel nostro sistema. Anni dopo, il primo utente potrebbe cambiare la sua email in <code>mario.r@newdomain.com</code>. I suoi attributi sono cambiati, ma la sua identit\u00e0 (<code>122-abc</code>) \u00e8 rimasta la stessa. \u00c8 sempre lo stesso utente, con una storia continua.</p> <p>Le caratteristiche chiave di un'entit\u00e0 sono:</p> <ul> <li> <p>Identit\u00e0 Unica e Stabile: Questo \u00e8 il suo tratto distintivo. L'identit\u00e0 viene assegnata alla creazione e non cambia mai per tutto il ciclo di vita dell'entit\u00e0.</p> </li> <li> <p>Ciclo di Vita Definito: Un'entit\u00e0 viene creata, il suo stato viene modificato attraverso varie operazioni di business e, alla fine, pu\u00f2 essere archiviata o rimossa. Ha una storia.</p> </li> <li> <p>Intrinsecamente Mutabile: Lo scopo di un'entit\u00e0 \u00e8 proprio quello di tracciare i cambiamenti di stato nel tempo. Un <code>Viaggio</code> passa dallo stato <code>Planning</code> a <code>Completed</code>. Un <code>Ordine</code> passa da <code>Pending</code> a <code>Shipped</code>. Questa mutabilit\u00e0 \u00e8 una caratteristica desiderata e necessaria.</p> </li> <li> <p>Uguaglianza basata sull'Identit\u00e0: L'unico modo per determinare se due variabili che puntano a un'entit\u00e0 si riferiscono allo stesso concetto di business \u00e8 confrontare i loro ID. <code>viaggio1.ID() == viaggio2.ID()</code>.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#102-il-cuore-dellentita-gestire-lidentita","title":"10.2. Il Cuore dell'Entit\u00e0: Gestire l'Identit\u00e0 \ud83c\udd94","text":"<p>Poich\u00e9 l'identit\u00e0 \u00e8 cos\u00ec centrale, la sua generazione e rappresentazione sono decisioni di design critiche.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#come-generare-gli-id-la-scelta-cruciale","title":"Come Generare gli ID: La Scelta Cruciale","text":"<p>Esistono diversi approcci, ma nel contesto del DDD e dei sistemi moderni, la scelta \u00e8 netta.</p> <ol> <li>ID Generati dal Database (L'Anti-Pattern \ud83d\udc4e)</li> </ol> <p>Un approccio comune, specialmente con i vecchi ORM, \u00e8 quello di affidarsi al database per generare l'ID (es. colonne AUTO_INCREMENT o SERIAL).</p> <p>Perch\u00e9 \u00e8 una cattiva idea nel DDD?</p> <ul> <li> <p>Accoppiamento Forte: Il nostro modello di dominio diventa dipendente dal meccanismo di persistenza. Un'entit\u00e0 non \u00e8 \"completa\" e non ha una vera identit\u00e0 finch\u00e9 non viene salvata nel database.</p> </li> <li> <p>Complessit\u00e0 Implementativa: Il metodo <code>Save</code> di un repository deve avere una logica speciale per capire se sta inserendo un nuovo record (e quindi deve recuperare l'ID generato) o aggiornandone uno esistente.</p> </li> <li> <p>Difficolt\u00e0 nei Sistemi Distribuiti: Se abbiamo pi\u00f9 istanze del nostro servizio che scrivono su database diversi (o in scenari multi-master), gestire sequenze di interi senza conflitti diventa un incubo.</p> </li> <li> <p>Testing pi\u00f9 Complesso: I test unitari del dominio non dovrebbero richiedere un database, ma se l'ID viene da l\u00ec, diventa pi\u00f9 difficile.</p> </li> <li> <p>ID Generati dall'Applicazione (La Scelta Vincente \ud83d\udc4d)</p> </li> </ul> <p>L'approccio raccomandato \u00e8 che sia l'applicazione stessa a generare l'ID, prima che l'entit\u00e0 venga passata al livello di persistenza. Il candidato ideale per questo compito \u00e8 l'UUID (Universally Unique Identifier).</p> <p>Riferimento Chiave: La libreria standard de facto per la gestione di UUID in Go \u00e8 <code>github.com/google/uuid</code>.</p> <p>Vantaggi dell'UUID:</p> <ul> <li> <p>Disaccoppiamento Totale: L'entit\u00e0 nasce gi\u00e0 con la sua identit\u00e0 definitiva, assegnata nel dominio. \u00c8 completa e valida prima ancora di toccare il database.</p> </li> <li> <p>Logica di Persistenza Semplificata: Il metodo <code>Save</code> del repository pu\u00f2 diventare un semplice \"UPSERT\" (UPDATE or INSERT). Se l'ID esiste, aggiorna; altrimenti, inserisce. Non c'\u00e8 bisogno di logica condizionale.</p> </li> <li> <p>Pronto per la Distribuzione: Gli UUID sono progettati per essere unici anche quando generati da milioni di macchine diverse contemporaneamente, senza bisogno di un'autorit\u00e0 centrale.</p> </li> <li> <p>Sicurezza: Gli ID sequenziali possono esporre informazioni (es. \"so che l'ordine #1001 viene dopo il #1000\") e rendere pi\u00f9 facili attacchi di enumerazione. Gli UUID non hanno questo problema.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#modellare-lidentita-in-go","title":"Modellare l'Identit\u00e0 in Go","text":"<p>Anche se un UUID \u00e8 una stringa o un array di byte, non dovremmo usare tipi primitivi. Applichiamo il pattern Value Object all'identit\u00e0 stessa! Creiamo tipi specifici per ogni ID.</p> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: ID come Tipi specifici\n\n\n\n//\n\n\n\n\n\n// identity/identity.go\n\n\n\npackage identity\n\n\n\n\n\nimport \"github.com/google/uuid\"\n\n\n\n\n\n// UserID \u00e8 un tipo distinto. Non \u00e8 una semplice stringa.\n\n\n\ntype UserID uuid.UUID\n\n\n\n\n\nfunc NewUserID() UserID {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return UserID(uuid.New())\n\n\n\n}\n\n\n\n\n\nfunc UserIDFromString(s string) (UserID, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id, err := uuid.Parse(s)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return UserID(id), err\n\n\n\n}\n\n\n\n\n\nfunc (id UserID) String() string {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return uuid.UUID(id).String()\n\n\n\n}\n\n\n\n\n\n// TripID \u00e8 un altro tipo distinto.\n\n\n\ntype TripID uuid.UUID\n\n\n\n\n\nfunc NewTripID() TripID {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return TripID(uuid.New())\n\n\n\n}\n\n\n\n\n\nfunc TripIDFromString(s string) (TripID, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id, err := uuid.Parse(s)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return TripID(id), err\n\n\n\n}\n\n\n\n\n\nfunc (id TripID) String() string {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return uuid.UUID(id).String()\n\n\n\n}\n</code></pre> <p>Perch\u00e9 questo sforzo extra \u00e8 cos\u00ec importante?</p> <ul> <li> <p>Type Safety: Il compilatore Go ora ci impedir\u00e0 di commettere errori come <code>trip.ownerID = trip.ID()</code>. Un <code>UserID</code> e un <code>TripID</code> sono tipi diversi e incompatibili, anche se la loro rappresentazione sottostante \u00e8 la stessa. Questo elimina un'intera categoria di bug.</p> </li> <li> <p>Esprimere il Linguaggio Ubiquo: Il codice ora dice <code>TripID</code>, non un generico <code>uuid.UUID</code>. \u00c8 pi\u00f9 chiaro e allineato al dominio.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#103-progettare-entita-in-go","title":"10.3. Progettare Entit\u00e0 in Go","text":"<p>Armati del nostro approccio all'identit\u00e0, vediamo come modellare le entit\u00e0 chiave della nostra applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#lentita-user","title":"L'Entit\u00e0 <code>User</code>","text":"<p>L'utente \u00e8 un'entit\u00e0 che non \u00e8 un Aggregate Root (nel nostro design attuale, ma potrebbe diventarlo in un <code>IdentityContext</code> separato). \u00c8 una classica entit\u00e0 che tiene traccia dei dati di un utente.</p> <p>Go</p> <pre><code>// user/user.go\n\n\n\npackage user\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/identity\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/common\" // Dove definiamo VO come Email\n\n\n\n)\n\n\n\n\n\ntype SubscriptionLevel string // Questo potrebbe essere un VO pi\u00f9 complesso\n\n\n\n\n\nconst (\n\n\n\n\u00a0\u00a0\u00a0\u00a0LevelFree\u00a0 \u00a0 SubscriptionLevel = \"Free\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0LevelPremium SubscriptionLevel = \"Premium\"\n\n\n\n)\n\n\n\n\n\ntype User struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0id\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identity.UserID\n\n\n\n\u00a0\u00a0\u00a0\u00a0email \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 common.Email // Un Value Object\n\n\n\n\u00a0\u00a0\u00a0\u00a0name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string\n\n\n\n\u00a0\u00a0\u00a0\u00a0subscriptionLevel SubscriptionLevel\n\n\n\n\u00a0\u00a0\u00a0\u00a0// altri attributi...\n\n\n\n}\n\n\n\n\n\n// NewUser \u00e8 la nostra Factory per creare un Utente in uno stato valido.\n\n\n\nfunc NewUser(name string, email common.Email) (*User, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... validazione ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0return &amp;User{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identity.NewUserID(),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 email,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subscriptionLevel: LevelFree, // Stato iniziale di default\n\n\n\n\u00a0\u00a0\u00a0\u00a0}, nil\n\n\n\n}\n\n\n\n\n\n// Metodi che modificano lo stato (mutabilit\u00e0).\n\n\n\n// Questi metodi contengono la logica di business relativa alla modifica.\n\n\n\nfunc (u *User) ChangeEmail(newEmail common.Email) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// In un'app reale, potremmo voler invalidare la vecchia sessione\n\n\n\n\u00a0\u00a0\u00a0\u00a0// o inviare un'email di notifica. La logica vive qui.\n\n\n\n\u00a0\u00a0\u00a0\u00a0u.email = newEmail\n\n\n\n}\n\n\n\n\n\nfunc (u *User) UpgradeToPremium() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0if u.subscriptionLevel == LevelPremium {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return // \u00c8 gi\u00e0 premium, non fare nulla\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0u.subscriptionLevel = LevelPremium\n\n\n\n}\n\n\n\n\n\n// Metodi per esporre i dati in modo controllato.\n\n\n\nfunc (u *User) ID() identity.UserID {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return u.id\n\n\n\n}\n\n\n\n\n\nfunc (u *User) Email() common.Email {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return u.email\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#entita-vs-aggregate-root-una-chiarificazione","title":"Entit\u00e0 vs. Aggregate Root: Una Chiarificazione","text":"<p>Nel capitolo 8, abbiamo definito <code>Viaggio</code> come il nostro Aggregate Root. Ora lo analizziamo come entit\u00e0.</p> <ul> <li> <p>Tutti gli Aggregate Root sono Entit\u00e0: <code>Viaggio</code> ha un'identit\u00e0 (<code>TripID</code>) e un ciclo di vita, quindi \u00e8 senza dubbio un'entit\u00e0. Essere un Aggregate Root \u00e8 un \"ruolo\" aggiuntivo che un'entit\u00e0 assume: quello di guardiano della consistenza per un cluster di oggetti.</p> </li> <li> <p>Non tutte le Entit\u00e0 sono Aggregate Root: Potremmo avere entit\u00e0 interne a un aggregato. Per esempio, se una <code>Tappa</code> (Stop) dovesse avere una sua identit\u00e0 e un suo ciclo di vita complesso, potremmo modellarla come un'entit\u00e0 interna all'aggregato <code>Viaggio</code>. Nel nostro design, abbiamo scelto di mantenerla pi\u00f9 semplice (come uno <code>struct</code> non esportato), ma in domini pi\u00f9 complessi (es. ogni <code>Tappa</code> ha le sue recensioni e foto), potrebbe diventare un'entit\u00e0 a tutti gli effetti. La scelta dipende sempre dagli invarianti che dobbiamo proteggere.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#104-gestire-il-ciclo-di-vita-di-unentita","title":"10.4. Gestire il Ciclo di Vita di un'Entit\u00e0","text":"<p>Un'entit\u00e0 vive un percorso che va dalla creazione alla cancellazione. Il nostro codice deve gestire ogni fase.</p> <ol> <li>Creazione (Nascita \ud83c\udf31)</li> </ol> <p>Avviene tramite una Factory (come la funzione NewUser). Il suo scopo \u00e8 garantire che nessuna entit\u00e0 venga mai creata in uno stato invalido. L'ID viene generato qui.</p> <ol> <li>Recupero e Salvataggio (Vita Quotidiana \ud83c\udfe0)</li> </ol> <p>Questo \u00e8 il dominio dei Repository.</p> <ul> <li> <p><code>userRepo.FindByID(ctx, userID)</code>: Carica un'entit\u00e0 dalla persistenza, ricostruendola nel suo stato attuale.</p> </li> <li> <p><code>userRepo.Save(ctx, user)</code>: Persiste lo stato attuale dell'entit\u00e0. Poich\u00e9 l'ID \u00e8 gi\u00e0 parte dell'entit\u00e0, questo metodo non si preoccupa se si tratta di un inserimento o di un aggiornamento.</p> </li> <li> <p>Modifica (Cambiamento \ud83c\udfad)</p> </li> </ul> <p>Lo stato di un'entit\u00e0 viene modificato chiamando i suoi metodi di business (es. user.ChangeEmail(...)). Questi metodi incapsulano la logica e garantiscono che la transizione di stato sia valida. Il codice chiamante (es. un Application Service o un HTTP Handler) orchestra queste chiamate.</p> <ol> <li>Cancellazione (Fine \ud83c\udfc1)</li> </ol> <p>Raramente si esegue una DELETE fisica dal database (hard delete). Questo comporterebbe la perdita di dati storici importanti. L'approccio preferito \u00e8 il soft delete.</p> <ul> <li> <p>Si aggiunge un campo all'entit\u00e0, come <code>deactivatedAt *time.Time</code> o <code>status Status</code>.</p> </li> <li> <p>Si definisce un metodo <code>Deactivate()</code> sull'entit\u00e0 che imposta questo stato.</p> </li> <li> <p>Il metodo <code>Delete()</code> del repository, invece di eseguire una <code>DELETE</code>, eseguir\u00e0 un <code>UPDATE</code> per impostare lo stato di disattivazione.</p> </li> <li> <p>Tutti i metodi di recupero (<code>Find...</code>) del repository dovranno poi includere una clausola <code>WHERE deactivated_at IS NULL</code> per escludere le entit\u00e0 \"cancellate\".</p> </li> </ul> <p>Questo preserva la storia e la coerenza referenziale, un aspetto fondamentale in molti domini di business.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#105-conclusioni","title":"10.5. Conclusioni","text":"<p>Le Entit\u00e0 sono la spina dorsale del nostro modello di dominio. Rappresentano i concetti che hanno una storia e un'identit\u00e0 che trascende i loro attributi.</p> <ul> <li> <p>Abbiamo stabilito che l'identit\u00e0 \u00e8 la caratteristica fondamentale di un'entit\u00e0 e che deve essere gestita con cura.</p> </li> <li> <p>Abbiamo promosso l'uso di ID generati dall'applicazione (UUID) come standard per disaccoppiare il dominio dalla persistenza e abilitare la scalabilit\u00e0.</p> </li> <li> <p>Abbiamo visto come modellare gli ID come tipi specifici per aumentare la sicurezza e l'espressivit\u00e0 del codice.</p> </li> <li> <p>Abbiamo delineato il ciclo di vita completo di un'entit\u00e0, dalla creazione tramite Factory alla cancellazione tramite soft delete.</p> </li> </ul> <p>Con una solida comprensione di Value Objects ed Entit\u00e0, ora possediamo i mattoncini per costruire qualsiasi aggregato. Ma cosa succede quando una logica di business non sembra appartenere a nessun oggetto specifico? Nel prossimo capitolo, affronteremo questo problema introducendo l'ultimo dei building block tattici: i Domain Services.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-11-domain-services","title":"Capitolo 11: Domain Services","text":"<p>Finora, nel nostro percorso attraverso la progettazione tattica, abbiamo assemblato una potente cassetta degli attrezzi. Abbiamo imparato a definire un Linguaggio Ubiquo per comunicare efficacemente (Capitolo 7), a proteggere la consistenza con gli Aggregati (Capitolo 8) e a costruire questi aggregati con i mattoncini fondamentali delle Entit\u00e0 (Capitolo 10) e dei Value Objects (Capitolo 9).</p> <p>Un principio cardine che abbiamo promosso \u00e8 quello di creare modelli di dominio ricchi, dove la logica di business risiede all'interno degli oggetti di dominio stessi (Entit\u00e0 e Value Objects). Questo approccio \u00e8 potente e porta a un design coeso e comprensibile. Tuttavia, a volte ci imbattiamo in un problema: cosa fare quando un'operazione di business significativa non sembra appartenere naturalmente a nessun singolo oggetto?</p> <p>Forzare questa logica \"senzatetto\" in un'entit\u00e0 o in un value object a cui non appartiene ne violerebbe la coesione e ne offuscherebbe le responsabilit\u00e0. Per queste situazioni, il DDD ci offre l'ultimo dei suoi building block tattici: il Domain Service (Servizio di Dominio).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#111-il-problema-delloperazione-senzatetto","title":"11.1. Il Problema dell'Operazione \"Senzatetto\"","text":"<p>Consideriamo alcuni scenari nel nostro dominio \"Where Should I Be?\":</p> <ol> <li>Conversione di una Proposta: La funzionalit\u00e0 principale della nostra app \u00e8 prendere una <code>PropostaDiItinerario</code> generata dall'AI e trasformarla in un <code>Viaggio</code> concreto per un <code>Utente</code>. Dove dovrebbe risiedere questa logica di conversione?</li> </ol> <p>- Su <code>Viaggio</code>? Non proprio, perch\u00e9 un <code>Viaggio</code> non dovrebbe sapere come \u00e8 fatto l'oggetto <code>PropostaDiItinerario</code>.</p> <p>- Su <code>PropostaDiItinerario</code>? No, perch\u00e9 una proposta \u00e8 solo un suggerimento e non dovrebbe avere la responsabilit\u00e0 di creare un'entit\u00e0 complessa come un <code>Viaggio</code>.</p> <p>- Su <code>Utente</code>? Assolutamente no. L'utente innesca l'azione, ma la sua entit\u00e0 non dovrebbe contenere la logica complessa di pianificazione dei viaggi.</p> <ol> <li>Trasferimento di Propriet\u00e0: Immaginiamo una futura funzionalit\u00e0 che permetta a un utente di trasferire un <code>Viaggio</code> a un altro utente. Questa operazione coinvolge due aggregati <code>Utente</code> e un aggregato <code>Viaggio</code>. Mettere questa logica in una qualsiasi delle tre entit\u00e0 sarebbe una forzatura.</li> </ol> <p>Questi sono esempi classici di operazioni che coinvolgono pi\u00f9 oggetti di dominio, dove la responsabilit\u00e0 \u00e8 distribuita. Qui entra in gioco il Domain Service.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#112-cose-un-domain-service","title":"11.2. Cos'\u00e8 un Domain Service?","text":"<p>Definizione: Un Domain Service \u00e8 un tipo specifico di servizio che incapsula un processo o un'operazione di business significativa che non appartiene concettualmente a nessuna entit\u00e0 o value object. I Domain Services rappresentano i \"verbi\" del dominio.</p> <p>Le sue caratteristiche distintive sono cruciali per non abusarne:</p> <ul> <li> <p>Rappresenta un'Azione: Il nome di un Domain Service dovrebbe riflettere l'operazione che compie. Nomi come <code>ConvertitoreProposta</code> (Proposal Converter) o <code>CalcolatorePrezzi</code> (Pricing Calculator) sono eccellenti. Se il nome suona come un'entit\u00e0 (es. <code>GestoreViaggi</code>), probabilmente state sbagliando strada.</p> </li> <li> <p>\u00c8 Stateless (Senza Stato): Questa \u00e8 la regola pi\u00f9 importante. Un Domain Service non deve avere uno stato proprio. Riceve tutto ci\u00f2 di cui ha bisogno tramite i parametri dei suoi metodi, esegue l'operazione e restituisce un risultato. Qualsiasi istanza di un Domain Service deve essere interscambiabile con qualsiasi altra. Se sentite il bisogno di memorizzare dati nel servizio tra una chiamata e l'altra, quello che vi serve \u00e8 probabilmente un'entit\u00e0.</p> </li> <li> <p>Opera su Oggetti di Dominio: Un Domain Service parla il Linguaggio Ubiquo. I suoi parametri e i suoi valori di ritorno sono oggetti del dominio (Aggregati, Entit\u00e0, Value Objects), non tipi primitivi o DTO.</p> </li> <li> <p>Contiene solo Logica di Dominio: Non deve sapere nulla di database, transazioni, richieste HTTP, logging o qualsiasi altra infrastruttura. \u00c8 un componente puro del layer di dominio.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#113-domain-service-vs-application-service-una-distinzione-fondamentale","title":"11.3. Domain Service vs. Application Service: Una Distinzione Fondamentale \u26a0\ufe0f","text":"<p>Questo \u00e8 uno dei punti che genera pi\u00f9 confusione, ma \u00e8 essenziale per una corretta architettura a strati (che vedremo nella Parte III con la Clean Architecture).</p> <p>Un Application Service non \u00e8 la stessa cosa di un Domain Service.</p> <ul> <li>L'Application Service \u00e8 l'orchestratore di un caso d'uso. \u00c8 il punto di ingresso per il mondo esterno (es. un controller HTTP). Il suo compito \u00e8:</li> </ul> <p>1. Iniziare/gestire una transazione.</p> <p>2. Recuperare gli aggregati necessari usando i Repository.</p> <p>3. Invocare i metodi sugli aggregati o sui Domain Services per eseguire il lavoro.</p> <p>4. Salvare gli aggregati modificati usando i Repository.</p> <p>5. Completare la transazione.</p> <p>6. Pubblicare eventi per altri sistemi (se necessario).</p> <ul> <li>Il Domain Service \u00e8 un pezzo del puzzle usato dall'Application Service. Contiene solo la logica di business pura che non trova posto altrove.</li> </ul> <p>|Caratteristica|Application Service (Il Direttore d'Orchestra \ud83c\udfbc)|Domain Service (Il Musicista Virtuoso \ud83c\udfbb)|</p> <p>|---|---|---|</p> <p>|Scopo|Orchestrazione di un caso d'uso completo.|Esecuzione di una specifica operazione di dominio.|</p> <p>|Stato|Pu\u00f2 essere stateful all'interno di una singola richiesta.|Assolutamente Stateless.|</p> <p>|Consapevolezza|Conosce l'infrastruttura (DB, transazioni, sicurezza).|Pura logica di dominio. Ignora l'infrastruttura.|</p> <p>|Input/Output|Primitivi (ID, DTO da richieste HTTP), <code>context.Context</code>.|Oggetti di Dominio (Aggregati, Entit\u00e0, VO).|</p> <p>|Chiamato Da|Mondo esterno (Controller HTTP, Handler gRPC).|Application Services o, a volte, altri Domain Services.|</p> <p>Flusso di Esempio:</p> <ol> <li> <p>Un <code>HTTP Handler</code> riceve una richiesta <code>POST /trips/from-proposal</code> con un <code>proposalID</code> nel body.</p> </li> <li> <p>L'handler chiama il metodo <code>CreateTripFromProposal(ctx, userID, proposalID)</code> sull'Application Service.</p> </li> <li> <p>L'Application Service:</p> </li> </ol> <p>a. Recupera l'Utente dal userRepository.</p> <p>b. Recupera la PropostaDiItinerario dal proposalRepository.</p> <p>c. Istanzia il nostro Domain Service ProposalConverter.</p> <p>d. Chiama converter.ConvertToTrip(utente, proposta).</p> <p>e. Riceve un nuovo aggregato Viaggio (o un errore).</p> <p>f. Salva il nuovo Viaggio usando il tripRepository.</p> <p>g. Restituisce l'ID del nuovo viaggio all'handler.</p> <ol> <li>L'<code>HTTP Handler</code> risponde con <code>201 Created</code> e l'ID.</li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#114-progettare-un-domain-service-in-go","title":"11.4. Progettare un Domain Service in Go","text":"<p>Applichiamo questi concetti per costruire il nostro <code>ProposalConverter</code>.</p> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: Il Domain Service ProposalConverter\n\n\n\n//\n\n\n\npackage planning\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"errors\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Importiamo i nostri modelli di dominio da altri package\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/user\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/suggestions\"\n\n\n\n)\n\n\n\n\n\n// ProposalConverter \u00e8 il nostro Domain Service.\n\n\n\n// \u00c8 una struct vuota perch\u00e9 \u00e8 stateless.\n\n\n\ntype ProposalConverter struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Le dipendenze (se ci sono) dovrebbero essere altre astrazioni\n\n\n\n\u00a0\u00a0\u00a0\u00a0// del dominio, non handle di database o client HTTP.\n\n\n\n}\n\n\n\n\n\n// NewProposalConverter \u00e8 la sua semplice factory.\n\n\n\nfunc NewProposalConverter() ProposalConverter {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return ProposalConverter{}\n\n\n\n}\n\n\n\n\n\n// ConvertToTrip \u00e8 il cuore del servizio. Prende in input oggetti\n\n\n\n// di dominio puri (User e ItineraryProposal) e restituisce un\n\n\n\n// oggetto di dominio (Trip) o un errore.\n\n\n\nfunc (pc ProposalConverter) ConvertToTrip(\n\n\n\n\u00a0\u00a0\u00a0\u00a0u user.User,\n\n\n\n\u00a0\u00a0\u00a0\u00a0p suggestions.ItineraryProposal,\n\n\n\n) (*Trip, error) {\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Logica di business che coinvolge pi\u00f9 oggetti.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Qui potremmo avere regole complesse basate sul livello di abbonamento dell'utente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0if u.SubscriptionLevel() == user.LevelFree &amp;&amp; len(p.Stops()) &gt; 5 {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"free users cannot create trips with more than 5 stops\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Creazione dell'aggregato tramite la sua factory.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Il Domain Service non deve conoscere i dettagli interni di NewTrip.\n\n\n\n\u00a0\u00a0\u00a0\u00a0newTrip, err := NewTrip(u.ID(), p.Name()) // NewTrip \u00e8 la factory del nostro aggregato Trip\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. Orchestrazione delle modifiche sull'aggregato.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Il Domain Service chiama i metodi pubblici dell'aggregato,\n\n\n\n\u00a0\u00a0\u00a0\u00a0// rispettandone i confini e gli invarianti.\n\n\n\n\u00a0\u00a0\u00a0\u00a0for _, suggestedStop := range p.Stops() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// La logica di validazione di una singola tappa \u00e8 ancora\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// responsabilit\u00e0 del metodo AddStop() sull'aggregato Trip.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0err := newTrip.AddStop(suggestedStop.Place(), suggestedStop.Day(), suggestedStop.Notes())\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Se una tappa non \u00e8 valida, l'intera operazione fallisce.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, err\u00a0\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 4. Restituzione del risultato: un aggregato nuovo e consistente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return newTrip, nil\n\n\n\n}\n</code></pre> <p>Questo design \u00e8 pulito e manutenibile:</p> <ul> <li> <p>La logica di coordinamento \u00e8 isolata nel <code>ProposalConverter</code>.</p> </li> <li> <p>La logica di consistenza interna del <code>Viaggio</code> \u00e8 ancora protetta dal suo Aggregate Root.</p> </li> <li> <p>Il servizio \u00e8 facilmente testabile in isolamento, poich\u00e9 non ha dipendenze infrastrutturali.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#115-quando-usare-un-domain-service-una-checklist","title":"11.5. Quando Usare un Domain Service: Una Checklist \u2705","text":"<p>Abusare dei Domain Services \u00e8 un errore comune che porta a modelli anemici, dove tutta la logica finisce nei servizi e gli oggetti di dominio diventano semplici contenitori di dati. Prima di crearne uno, chiedetevi sempre:</p> <ul> <li> <p> L'operazione coinvolge pi\u00f9 di un aggregato/entit\u00e0? Se la logica opera solo su un singolo aggregato, dovrebbe essere un metodo su quell'aggregato.</p> </li> <li> <p> L'operazione sembra \"stonata\" su qualsiasi oggetto esistente? Se tentare di inserire un metodo in un'entit\u00e0 la fa sentire meno coesa, \u00e8 un buon candidato per un Domain Service.</p> </li> <li> <p> L'operazione \u00e8 stateless? Se avete bisogno di stato, non \u00e8 un Domain Service.</p> </li> <li> <p> L'operazione \u00e8 un concetto importante nel Linguaggio Ubiquo? Operazioni come \"Calcolare Tasse\", \"Trasferire Fondi\", \"Convertire Proposta\" sono processi di business fondamentali e candidati ideali.</p> </li> </ul> <p>Se la risposta a queste domande \u00e8 \"s\u00ec\", allora procedete con la creazione di un Domain Service.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#116-conclusioni-completare-la-cassetta-degli-attrezzi-tattica","title":"11.6. Conclusioni: Completare la Cassetta degli Attrezzi Tattica","text":"<p>Con l'introduzione dei Domain Services, la nostra cassetta degli attrezzi per la progettazione tattica del DDD \u00e8 finalmente completa. Ora abbiamo uno strumento per ogni tipo di logica di business:</p> <ul> <li> <p>Value Objects: Per descrivere e misurare, con la garanzia dell'immutabilit\u00e0.</p> </li> <li> <p>Entit\u00e0: Per rappresentare oggetti con un'identit\u00e0 e una storia.</p> </li> <li> <p>Aggregati: Per raggruppare entit\u00e0 e value objects in confini di consistenza.</p> </li> <li> <p>Domain Services: Per orchestrare operazioni complesse che attraversano i confini degli oggetti.</p> </li> </ul> <p>Abbiamo imparato a creare modelli di dominio ricchi, espressivi e robusti. Ora siamo pronti per fare un passo indietro e vedere come inserire questo modello di dominio all'interno di un'architettura software pi\u00f9 ampia e pulita.</p> <p>Nella Parte III, esploreremo la Clean Architecture, il Repository Pattern e la Dependency Injection, imparando a proteggere il nostro prezioso dominio dalle preoccupazioni del mondo esterno e a costruire un'applicazione veramente enterprise.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-iii-architettura-pulita-e-pattern-avanzati","title":"Parte III: Architettura Pulita e Pattern Avanzati","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-12-clean-architecture-e-separazione-delle-responsabilita","title":"Capitolo 12: Clean Architecture e Separazione delle Responsabilit\u00e0","text":"<p>Benvenuti nella Parte III del nostro libro. Nelle sezioni precedenti, ci siamo immersi nella progettazione tattica del DDD. Abbiamo forgiato un modello di dominio ricco e significativo, composto da Aggregati, Entit\u00e0 e Value Objects, e abbiamo imparato a comunicare attraverso un Linguaggio Ubiquo. Ora possediamo un cuore pulsante per la nostra applicazione: un core domain che rappresenta la vera essenza del business di \"Where Should I Be?\".</p> <p>Ma questo cuore prezioso non pu\u00f2 vivere nel vuoto. Deve essere inserito in un corpo, un'applicazione funzionante che interagisce con il mondo esterno: database, API di terze parti, interfacce utente. Come possiamo strutturare la nostra applicazione in modo che il nostro dominio rimanga protetto, puro e isolato dai dettagli tecnici e mutevoli dell'infrastruttura?</p> <p>La risposta \u00e8 un'architettura a strati che impone una rigorosa separazione delle responsabilit\u00e0. In questo capitolo, esploreremo uno degli schemi architetturali pi\u00f9 influenti e potenti per raggiungere questo obiettivo: la Clean Architecture.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#121-il-problema-il-grande-pasticcio-di-fango-big-ball-of-mud","title":"12.1. Il Problema: Il \"Grande Pasticcio di Fango\" (Big Ball of Mud)","text":"<p>Senza una disciplina architetturale, i sistemi software tendono a degenerare in quello che viene chiamato un Big Ball of Mud. In questo anti-pattern, i confini tra le responsabilit\u00e0 svaniscono. Il codice che gestisce la logica di business \u00e8 intrecciato con le query del database, con la gestione delle richieste HTTP e con la formattazione delle risposte JSON.</p> <p>Immaginiamo un tipico <code>http.Handler</code> in Go scritto senza una chiara architettura:</p> <p>Go</p> <pre><code>//\n\n\n\n// CONTROESEMPIO: Un handler che fa tutto (Big Ball of Mud)\n\n\n\n//\n\n\n\nfunc CreateTripHandler(db *sql.DB, openAIClient *openai.Client) http.HandlerFunc {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return func(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1. Logica HTTP: Parsing del body della richiesta\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var reqBody struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name\u00a0 \u00a0 \u00a0 string\u00a0 \u00a0 `json:\"name\"`\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StartDate time.Time `json:\"start_date\"`\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err := json.NewDecoder(r.Body).Decode(&amp;reqBody); err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Invalid request body\", http.StatusBadRequest)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2. Logica di Business: Validazione\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if reqBody.Name == \"\" {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Trip name is required\", http.StatusBadRequest)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if reqBody.StartDate.Before(time.Now()) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Start date must be in the future\", http.StatusBadRequest)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 3. Logica di Persistenza: Scrittura diretta sul DB\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tripID := uuid.New().String()\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_, err := db.ExecContext(r.Context(),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"INSERT INTO trips (id, name, start_date) VALUES ($1, $2, $3)\",\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tripID, reqBody.Name, reqBody.StartDate)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Failed to save trip\", http.StatusInternalServerError)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 4. Interazione con API esterne\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... codice che chiama direttamente openAIClient ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5. Logica HTTP: Scrittura della risposta\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w.Header().Set(\"Content-Type\", \"application/json\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w.WriteHeader(http.StatusCreated)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0json.NewEncoder(w).Encode(map[string]string{\"id\": tripID})\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n}\n</code></pre> <p>Questo approccio \u00e8 disastroso per diversi motivi:</p> <ul> <li> <p>Fragilit\u00e0: Un cambiamento allo schema del database richiede una modifica all'handler HTTP. Un cambiamento alla libreria OpenAI potrebbe rompere la logica di business.</p> </li> <li> <p>Impossibilit\u00e0 di Test: Come si pu\u00f2 testare la logica di validazione del business in isolamento? \u00c8 necessario avviare un server HTTP e un database reale, rendendo i test lenti, complessi e inaffidabili.</p> </li> <li> <p>Non Riutilizzabile: Se volessimo esporre la stessa funzionalit\u00e0 tramite un'interfaccia gRPC o una CLI, dovremmo duplicare tutta la logica di business e di persistenza.</p> </li> <li> <p>Accoppiamento Forte: Ogni parte del sistema \u00e8 strettamente accoppiata a tutte le altre.</p> </li> </ul> <p>La Clean Architecture \u00e8 una strategia formale per prevenire questo caos.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#122-introduzione-alla-clean-architecture","title":"12.2. Introduzione alla Clean Architecture \ud83e\uddc5","text":"<p>La Clean Architecture, resa popolare da Robert C. \"Uncle Bob\" Martin, non \u00e8 un framework, ma un modello architetturale per la progettazione di sistemi software. Propone di strutturare il software in una serie di cerchi concentrici, simili a una cipolla.</p> <p>(Fonte: blog.cleancoder.com)</p> <p>Ogni cerchio rappresenta un diverso livello di software. I livelli esterni sono meccanismi, quelli interni sono policy. La regola fondamentale che governa questa architettura \u00e8 la Regola della Dipendenza (The Dependency Rule).</p> <p>La Regola della Dipendenza: Le dipendenze del codice sorgente possono puntare solo verso l'interno. Niente in un cerchio interno pu\u00f2 sapere alcunch\u00e9 di un cerchio esterno. In particolare, il nome di qualcosa dichiarato in un cerchio esterno non deve essere menzionato dal codice in un cerchio interno.</p> <p>Questo significa che la logica di business (interna) non deve dipendere dai dettagli dell'interfaccia utente o del database (esterni). Al contrario, sono i dettagli esterni che devono dipendere e conformarsi alle policy definite internamente.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#123-i-livelli-della-clean-architecture-in-dettaglio","title":"12.3. I Livelli della Clean Architecture in Dettaglio","text":"<p>Analizziamo ogni livello e mappiamolo ai componenti della nostra applicazione Go.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#livello-1-giallo-entita-entities","title":"\ud83d\udfe1 Livello 1 (Giallo): Entit\u00e0 (Entities)","text":"<p>Questo \u00e8 il cerchio pi\u00f9 interno. Contiene gli oggetti di dominio che abbiamo meticolosamente progettato nella Parte II: gli Aggregati, le Entit\u00e0 e i Value Objects.</p> <ul> <li> <p>Cosa c'\u00e8 qui: Le struct <code>Trip</code>, <code>User</code>, <code>Money</code>, <code>DateRange</code>, ecc.</p> </li> <li> <p>Caratteristiche: Questo strato contiene la logica di business pi\u00f9 generale e di alto livello. \u00c8 il cuore pulsante dell'applicazione.</p> </li> <li> <p>Dipendenze: Nessuna. Questo codice \u00e8 Go puro. Non importa se l'applicazione \u00e8 web, se usa PostgreSQL o DynamoDB. Queste regole di business sono universalmente valide nel nostro dominio.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#livello-2-rosso-casi-duso-use-cases-application-services","title":"\ud83d\udd34 Livello 2 (Rosso): Casi d'Uso (Use Cases / Application Services)","text":"<p>Questo livello contiene la logica di business specifica dell'applicazione. Orchestrami i casi d'uso del sistema. Corrisponde perfettamente a quello che abbiamo chiamato Application Service nel capitolo 11.</p> <ul> <li> <p>Cosa c'\u00e8 qui: Un <code>TripApplicationService</code> con metodi come <code>CreateTripFromProposal</code>, <code>AddStopToTrip</code>, <code>GetUserTrips</code>.</p> </li> <li> <p>Caratteristiche: Ogni metodo orchestra un flusso di lavoro: recupera le entit\u00e0, invoca i loro metodi (o quelli dei Domain Services) e le salva di nuovo.</p> </li> <li> <p>Dipendenze: Dipende dal livello delle Entit\u00e0. Conosce e usa gli oggetti di dominio. Non conosce nulla dei livelli esterni. Ma come fa a salvare i dati senza conoscere il database? Tramite l'Inversione delle Dipendenze.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#livello-3-verde-adattatori-di-interfaccia-interface-adapters","title":"\ud83d\udfe2 Livello 3 (Verde): Adattatori di Interfaccia (Interface Adapters)","text":"<p>Questo livello \u00e8 un insieme di \"traduttori\" o \"adattatori\". Il loro compito \u00e8 convertire i dati da un formato comodo per un livello esterno (come il web o il DB) a un formato comodo per i livelli interni (Use Cases ed Entit\u00e0), e viceversa.</p> <ul> <li>Cosa c'\u00e8 qui:</li> </ul> <p>- Adattatori DB: Le implementazioni concrete dei nostri <code>Repository</code> (es. <code>PostgresTripRepository</code>).</p> <p>- Adattatori Web: I nostri <code>http.Handler</code> o <code>gRPCHandler</code>. Questi traducono le richieste HTTP in chiamate ai metodi degli Use Cases.</p> <p>- Presenters: Oggetti che prendono i dati di output dagli Use Cases e li formattano per la UI (es. in JSON).</p> <ul> <li>Caratteristiche: \u00c8 il ponte tra il mondo del dominio e il mondo dell'infrastruttura.</li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#livello-4-blu-framework-e-driver-frameworks-and-drivers","title":"\ud83d\udd35 Livello 4 (Blu): Framework e Driver (Frameworks and Drivers)","text":"<p>Questo \u00e8 il cerchio pi\u00f9 esterno. Contiene tutti i dettagli, tutto ci\u00f2 che \u00e8 volatile e specifico di una tecnologia.</p> <ul> <li> <p>Cosa c'\u00e8 qui: Il web framework (es. <code>net/http</code> di Go), il driver del database (es. <code>pq</code> o <code>pgx</code>), il client SDK di AWS, il frontend SvelteKit, la libreria di logging.</p> </li> <li> <p>Caratteristiche: \u00c8 il livello pi\u00f9 \"instabile\". Le tecnologie cambiano. L'obiettivo della Clean Architecture \u00e8 rendere questo strato un dettaglio implementativo facilmente sostituibile, senza impattare i livelli interni pi\u00f9 stabili.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#124-implementare-la-clean-architecture-in-go","title":"12.4. Implementare la Clean Architecture in Go","text":"<p>Vediamo come la Regola della Dipendenza prende forma in un progetto Go.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#la-struttura-delle-directory","title":"La Struttura delle Directory","text":"<p>Una buona struttura di directory pu\u00f2 aiutare a visualizzare e far rispettare i confini architetturali.</p> <pre><code>/where-should-i-be\n\n\n\n\u00a0\u00a0/internal\n\n\n\n\u00a0\u00a0\u00a0\u00a0/domain\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/trip/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trip.go \u00a0 \u00a0 \u00a0 \u00a0 // Aggregate Root, Entit\u00e0 interne, VO\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trip_factory.go // Factory\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/user/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user.go\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/common/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0money.go\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email.go\n\n\n\n\u00a0\u00a0\u00a0\u00a0/application\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trip_service.go \u00a0 // TripApplicationService (Use Cases)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports.go\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Definizioni delle interfacce (es. TripRepository)\n\n\n\n\u00a0\u00a0\u00a0\u00a0/adapters\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/persistence/postgres/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0postgres_trip_repo.go // Implementazione del Repository\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/web/http/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trip_handler.go // Handler HTTP\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/gateway/openai/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0openai_client.go // Adattatore per l'API di OpenAI\n\n\n\n\u00a0\u00a0/cmd\n\n\n\n\u00a0\u00a0\u00a0\u00a0/server/\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0main.go \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Il punto di ingresso dove tutto viene \"cablato\"\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-principio-di-inversione-delle-dipendenze-dip","title":"Il Principio di Inversione delle Dipendenze (DIP)","text":"<p>Il DIP \u00e8 la magia che fa funzionare la Clean Architecture. Dice che i moduli di alto livello non dovrebbero dipendere da quelli di basso livello, ma entrambi dovrebbero dipendere da astrazioni (interfacce).</p> <ol> <li>Definiamo l'interfaccia nel livello interno: Il nostro <code>Application Service</code> ha bisogno di un repository. Definiamo l'interfaccia <code>TripRepository</code> nel package <code>application</code>.</li> </ol> <p>Go</p> <p>``` go</p> <p>// internal/application/ports.go</p> <p>package application</p> <p>import (</p> <p>\"context\"</p> <p>\"where-should-i-be/internal/domain/trip\"</p> <p>)</p> <p>// TripRepository \u00e8 una \"porta\" che il nostro caso d'uso</p> <p>// utilizza per parlare con la persistenza.</p> <p>type TripRepository interface {</p> <p>Save(ctx context.Context, t *trip.Trip) error</p> <p>FindByID(ctx context.Context, id trip.ID) (*trip.Trip, error)</p> <p>}</p> <p>```</p> <ol> <li>L'Use Case dipende dall'interfaccia: Il nostro <code>TripApplicationService</code> riceve un <code>TripRepository</code> come dipendenza.</li> </ol> <p>Go</p> <p>``` go</p> <p>// internal/application/trip_service.go</p> <p>package application</p> <p>// ...</p> <p>type TripApplicationService struct {</p> <p>repo TripRepository // Dipende dall'interfaccia, non da un'implementazione!</p> <p>}</p> <p>func (s TripApplicationService) CreateNewTrip(...) (trip.Trip, error) {</p> <p>// ... logica ...</p> <p>newTrip := // ...</p> <p>return newTrip, s.repo.Save(ctx, newTrip) // Usa l'interfaccia</p> <p>}</p> <p>```</p> <ol> <li>Implementiamo l'interfaccia nel livello esterno: L'adattatore per PostgreSQL implementa l'interfaccia definita nel livello applicativo.</li> </ol> <p>Go</p> <p>``` go</p> <p>// internal/adapters/persistence/postgres/postgres_trip_repo.go</p> <p>package postgres</p> <p>import (</p> <p>\"database/sql\"</p> <p>// ...</p> <p>)</p> <p>// La struct dipende da un dettaglio infrastrutturale: *sql.DB</p> <p>type PostgresTripRepository struct {</p> <p>db *sql.DB</p> <p>}</p> <p>// Il metodo Save implementa l'interfaccia del livello applicativo.</p> <p>func (r PostgresTripRepository) Save(ctx context.Context, t trip.Trip) error {</p> <p>// ... logica SQL per salvare il viaggio ...</p> <p>}</p> <p>// ...</p> <p>```</p> <p>Il flusso di controllo va dal controller all'use case e poi al repository, ma le dipendenze del codice sorgente puntano sempre verso l'interno: <code>PostgresTripRepository</code> (esterno) dipende da <code>application.TripRepository</code> (interno). Abbiamo invertito la dipendenza!</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#125-i-vantaggi-concreti-della-clean-architecture","title":"12.5. I Vantaggi Concreti della Clean Architecture \ud83c\udfc6","text":"<p>Perch\u00e9 sobbarcarsi tutto questo lavoro di strutturazione? I benefici a lungo termine sono immensi.</p> <ul> <li> <p>Testabilit\u00e0 Superiore: Possiamo testare i nostri <code>Application Services</code> e il nostro <code>Domain</code> in totale isolamento, fornendo un'implementazione \"mock\" del <code>TripRepository</code>. I test diventano velocissimi, affidabili e facili da scrivere.</p> </li> <li> <p>Indipendenza dal Database: Domani vogliamo passare da PostgreSQL a DynamoDB per ragioni di costo e scalabilit\u00e0? Nessun problema. Basta scrivere un nuovo adattatore <code>DynamoDBTripRepository</code> che implementi la stessa interfaccia. Nessuna riga di codice nel dominio o nell'applicazione deve essere modificata.</p> </li> <li> <p>Indipendenza dall'Interfaccia Utente: L'applicazione non sa se \u00e8 guidata da una richiesta HTTP, gRPC o da una riga di comando. Possiamo aggiungere nuove interfacce senza toccare i casi d'uso.</p> </li> <li> <p>Manutenibilit\u00e0 e Comprensibilit\u00e0: Le responsabilit\u00e0 sono chiare. Un nuovo sviluppatore sa esattamente dove guardare per trovare la logica di business, dove per trovare il codice del database e dove per trovare gli handler HTTP.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#126-conclusioni-proteggere-il-nostro-asset-piu-prezioso","title":"12.6. Conclusioni: Proteggere il Nostro Asset pi\u00f9 Prezioso","text":"<p>La Clean Architecture non \u00e8 solo un modo di organizzare le directory; \u00e8 una filosofia che ci impone di riconoscere che il modello di dominio \u00e8 l'asset pi\u00f9 prezioso del nostro software. L'interfaccia utente, il database, i framework... sono solo dettagli. Dettagli importanti, ma che cambiano nel tempo. Il business, invece, ha una stabilit\u00e0 maggiore.</p> <p>Adottando la Clean Architecture e la Regola della Dipendenza, costruiamo un \"muro di fuoco\" attorno al nostro dominio, proteggendolo dalla volatilit\u00e0 dell'infrastruttura. Creiamo un sistema che non \u00e8 solo funzionante oggi, ma che \u00e8 anche testabile, manutenibile e pronto a evolvere per gli anni a venire.</p> <p>Nel prossimo capitolo, approfondiremo uno degli adattatori pi\u00f9 importanti: il Repository Pattern, esplorando nel dettaglio come implementare un'astrazione efficace per la persistenza.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-13-repository-pattern-e-astrazione-della-persistenza","title":"Capitolo 13: Repository Pattern e Astrazione della Persistenza","text":"<p>Nel capitolo precedente, abbiamo eretto le mura della nostra fortezza con la Clean Architecture, stabilendo una regola ferrea: il nostro prezioso dominio, il cuore del sistema, non deve sapere nulla del mondo esterno, specialmente dei dettagli sordidi e mutevoli della persistenza dei dati. Questa \u00e8 una grande idea in teoria, ma solleva una domanda fondamentale: se il dominio \u00e8 isolato, come facciamo a salvare e caricare i nostri oggetti di business? Come fa il nostro aggregato <code>Viaggio</code> a passare da un oggetto in memoria a una serie di righe in un database PostgreSQL, e viceversa?</p> <p>La risposta \u00e8 un ponte, un'astrazione attentamente progettata che si trova al confine tra il nostro mondo pulito del dominio e il mondo disordinato dell'infrastruttura. Nel Domain-Driven Design, questo ponte ha un nome specifico: il Repository Pattern.</p> <p>Il Repository \u00e8 molto pi\u00f9 di un semplice oggetto di accesso ai dati (DAO). \u00c8 un pattern fondamentale del DDD che fornisce l'illusione di una collezione di oggetti di dominio in memoria, permettendo al resto della nostra applicazione di rimanere beatamente ignorante dei dettagli di SQL, NoSQL o qualsiasi altra tecnologia di storage.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#131-cose-il-repository-pattern","title":"13.1. Cos'\u00e8 il Repository Pattern?","text":"<p>Definizione: Il Repository Pattern media tra il layer di dominio e il layer di mappatura dei dati, agendo come una collezione di oggetti di dominio in memoria. Incapsula la logica necessaria per ottenere oggetti di dominio e persisterne le modifiche.</p> <p>Analizziamo questa definizione. I punti chiave sono:</p> <ol> <li> <p>L'Illusione di una Collezione in Memoria: Questo \u00e8 il concetto pi\u00f9 importante. Quando il nostro <code>Application Service</code> usa un repository, il codice dovrebbe dare l'impressione di interagire con una semplice collezione, come una slice o una mappa. Dovrebbe poter dire: \"Cara collezione di Viaggi, dammi il viaggio con questo ID\" o \"Cara collezione di Viaggi, salva questo nuovo viaggio\". Non dovrebbe mai dire: \"Esegui questa query SQL con una <code>JOIN</code> sulla tabella delle tappe\".</p> </li> <li> <p>Lavora con gli Aggregati: Un repository \u00e8 definito per un aggregato. Avremo un <code>TripRepository</code> per gestire l'aggregato <code>Viaggio</code>. Non avremo un <code>StopRepository</code> separato. Perch\u00e9? Perch\u00e9, come stabilito nel Capitolo 8, l'integrit\u00e0 di un aggregato \u00e8 garantita dalla sua radice (l'Aggregate Root). Non si possono modificare le sue parti interne bypassando la radice. Pertanto, si carica e si salva sempre l'aggregato nella sua interezza.</p> </li> <li> <p>Incapsula la Logica di Persistenza: Tutto il codice specifico per la tecnologia (query SQL, chiamate all'SDK di DynamoDB, ecc.) \u00e8 nascosto all'interno dell'implementazione concreta del repository. Il resto dell'applicazione non lo vede mai.</p> </li> <li> <p>Traduce tra Modelli: Come abbiamo visto nel capitolo sui Value Objects, il nostro dominio usa tipi ricchi come <code>Money</code> o <code>DateRange</code>. Il database, invece, usa tipi primitivi come <code>NUMERIC</code>, <code>VARCHAR</code> e <code>TIMESTAMP</code>. Il repository \u00e8 responsabile di questa traduzione (o mapping) in entrambe le direzioni.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#132-progettare-linterfaccia-del-repository-la-porta","title":"13.2. Progettare l'Interfaccia del Repository (La \"Porta\")","text":"<p>Seguendo i principi della Clean Architecture, il nostro <code>Application Layer</code> (dove vivono i casi d'uso) non dipende dall'implementazione concreta del repository, ma da una sua astrazione: un'interfaccia Go. Questa interfaccia \u00e8 la \"porta\" attraverso cui il dominio parla al mondo esterno.</p> <p>Dove vive l'interfaccia? Vive nel layer applicativo, perch\u00e9 \u00e8 quest'ultimo a definirne il contratto di cui ha bisogno.</p> <p>Go</p> <pre><code>//\n\n\n\n// ESEMPIO CORRETTO: L'interfaccia del Repository\n\n\n\n//\n\n\n\n\n\n// internal/application/ports.go\n\n\n\npackage application\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/trip\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/identity\"\n\n\n\n)\n\n\n\n\n\n// TripRepository definisce il contratto che i casi d'uso\n\n\n\n// si aspettano per interagire con la persistenza dei viaggi.\n\n\n\n// I nomi dei metodi sono agnostici rispetto alla tecnologia.\n\n\n\ntype TripRepository interface {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Save gestisce sia la creazione (INSERT) che l'aggiornamento (UPDATE).\n\n\n\n\u00a0\u00a0\u00a0\u00a0// \u00c8 un'operazione di \"upsert\".\n\n\n\n\u00a0\u00a0\u00a0\u00a0Save(ctx context.Context, t *trip.Trip) error\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// FindByID recupera un singolo aggregato tramite la sua identit\u00e0.\n\n\n\n\u00a0\u00a0\u00a0\u00a0FindByID(ctx context.Context, id identity.TripID) (*trip.Trip, error)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// FindByOwnerID \u00e8 un esempio di un metodo di query pi\u00f9 specifico\n\n\n\n\u00a0\u00a0\u00a0\u00a0// richiesto da un caso d'uso.\n\n\n\n\u00a0\u00a0\u00a0\u00a0FindByOwnerID(ctx context.Context, ownerID identity.UserID) ([]*trip.Trip, error)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Delete rimuove un aggregato.\n\n\n\n\u00a0\u00a0\u00a0\u00a0Delete(ctx context.Context, id identity.TripID) error\n\n\n\n}\n</code></pre> <p>Convenzioni di Naming e Progettazione:</p> <ul> <li> <p>Usate verbi che evocano una collezione: <code>Find</code>, <code>Save</code>, <code>Delete</code>, <code>Add</code>. Evitate <code>Insert</code>, <code>Update</code>, <code>Select</code>.</p> </li> <li> <p>I metodi accettano e restituiscono sempre oggetti di dominio (<code>*trip.Trip</code>, <code>identity.TripID</code>), mai DTO o tipi di database.</p> </li> <li> <p>Ogni metodo dovrebbe accettare un <code>context.Context</code> come primo parametro. Questa \u00e8 una best practice fondamentale in Go per la gestione di deadline, cancellation e passaggio di dati di richiesta (come i trace ID per l'observability).</p> </li> </ul> <p>Come gestire query complesse?</p> <p>Evitate di riempire l'interfaccia con un metodo per ogni combinazione di filtri. Questo la renderebbe fragile e difficile da mantenere. Le strategie sono:</p> <ol> <li> <p>Metodi di Query Specifici: Aggiungete metodi solo per le query che sono chiaramente definite dai casi d'uso, come <code>FindByOwnerID</code>.</p> </li> <li> <p>Specification Pattern: Un pattern pi\u00f9 avanzato dove si costruisce un oggetto-query che incapsula i criteri di ricerca e lo si passa a un metodo <code>Find</code> generico.</p> </li> <li> <p>Separare le Letture (CQRS): Per query complesse e di sola lettura (es. reportistica), spesso \u00e8 meglio non usare affatto il repository dell'aggregato. Si pu\u00f2 creare un \"modello di lettura\" ottimizzato (una read model) interrogato direttamente, bypassando il dominio. Questo \u00e8 il primo passo verso il CQRS, che affronteremo nel Capitolo 15.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#133-implementazione-concreta-postgrestriprepository","title":"13.3. Implementazione Concreta: <code>PostgresTripRepository</code>","text":"<p>Ora costruiamo l'adattatore per PostgreSQL. Questo codice vive nel layer pi\u00f9 esterno (<code>adapters</code>).</p> <p>Dove vive l'implementazione? <code>internal/adapters/persistence/postgres/</code></p> <p>Go</p> <pre><code>// internal/adapters/persistence/postgres/postgres_trip_repo.go\n\n\n\npackage postgres\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"database/sql\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"errors\"\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/application\" // Importa per l'interfaccia\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/trip\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/identity\"\n\n\n\n)\n\n\n\n\n\n// PostgresTripRepository \u00e8 l'implementazione concreta per PostgreSQL.\n\n\n\n// Dipende da un dettaglio infrastrutturale: *sql.DB.\n\n\n\ntype PostgresTripRepository struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0db *sql.DB\n\n\n\n}\n\n\n\n\n\n// NewPostgresTripRepository \u00e8 la sua factory.\n\n\n\nfunc NewPostgresTripRepository(db *sql.DB) *PostgresTripRepository {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return &amp;PostgresTripRepository{db: db}\n\n\n\n}\n\n\n\n\n\n// Garanzia a tempo di compilazione che la nostra struct implementa l'interfaccia.\n\n\n\nvar _ application.TripRepository = (*PostgresTripRepository)(nil)\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#implementazione-del-metodo-save","title":"Implementazione del Metodo <code>Save</code>","text":"<p>Il salvataggio di un aggregato \u00e8 un'operazione transazionale.</p> <p>Go</p> <pre><code>func (r *PostgresTripRepository) Save(ctx context.Context, t *trip.Trip) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0tx, err := r.db.BeginTx(ctx, nil)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Defer a rollback in caso di errore. Se il commit ha successo,\n\n\n\n\u00a0\u00a0\u00a0\u00a0// il rollback non far\u00e0 nulla.\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer tx.Rollback()\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Salva l'Aggregate Root (UPSERT)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Qui scomponiamo i Value Objects (DateRange, Budget) in colonne primitive.\n\n\n\n\u00a0\u00a0\u00a0\u00a0_, err = tx.ExecContext(ctx, `\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO trips (id, owner_id, name, status, start_date, end_date, budget_amount, budget_currency)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ON CONFLICT (id) DO UPDATE SET\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = EXCLUDED.name,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = EXCLUDED.status,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start_date = EXCLUDED.start_date,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date = EXCLUDED.end_date,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0budget_amount = EXCLUDED.budget_amount,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0budget_currency = EXCLUDED.budget_currency\n\n\n\n\u00a0\u00a0\u00a0\u00a0`, t.ID(), t.OwnerID(), t.Name(), t.Status(), t.DateRange().Start(), t.DateRange().End(), t.Budget().Amount(), t.Budget().Currency())\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Sincronizza le entit\u00e0 figlie (le Tappe)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// La strategia pi\u00f9 semplice e robusta \u00e8 \"delete-then-insert\".\n\n\n\n\u00a0\u00a0\u00a0\u00a0_, err = tx.ExecContext(ctx, \"DELETE FROM stops WHERE trip_id = $1\", t.ID())\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0for _, s := range t.Stops() { // Assumendo che Trip abbia un getter Stops()\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_, err = tx.ExecContext(ctx, `\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO stops (id, trip_id, place_id, day, notes)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES ($1, $2, $3, $4, $5)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`, s.ID(), t.ID(), s.PlaceID(), s.Day(), s.Notes())\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. Se tutto \u00e8 andato bene, conferma la transazione.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return tx.Commit()\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#implementazione-del-metodo-findbyid","title":"Implementazione del Metodo <code>FindByID</code>","text":"<p>Il caricamento richiede il processo inverso di idratazione: da righe di database a un aggregato ricco.</p> <p>Go</p> <pre><code>func (r *PostgresTripRepository) FindByID(ctx context.Context, id identity.TripID) (*trip.Trip, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Recupera la riga dell'Aggregate Root\n\n\n\n\u00a0\u00a0\u00a0\u00a0row := r.db.QueryRowContext(ctx, \"SELECT ... FROM trips WHERE id = $1\", id)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... variabili per scansionare i dati ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0err := row.Scan(&amp;id, &amp;ownerID, /* ... e tutti gli altri campi ... */)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if errors.Is(err, sql.ErrNoRows) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, application.ErrTripNotFound // Un errore definito nel layer applicativo\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Recupera le entit\u00e0 figlie\n\n\n\n\u00a0\u00a0\u00a0\u00a0rows, err := r.db.QueryContext(ctx, \"SELECT ... FROM stops WHERE trip_id = $1\", id)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer rows.Close()\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0var stops []trip.Stop // Assumendo che Stop sia un tipo esportato o accessibile\n\n\n\n\u00a0\u00a0\u00a0\u00a0for rows.Next() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... scansiona i dati di una tappa ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... ricostruisci l'oggetto Stop ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stops = append(stops, rebuiltStop)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. Idrata l'Aggregato\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Usiamo una Factory per ricostruire l'aggregato, assicurandoci che sia valido.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return trip.Hydrate(id, ownerID, /* ... tutti gli altri parametri e le tappe ... */), nil\n\n\n\n}\n</code></pre> <p>Nota: <code>trip.Hydrate</code> sarebbe una factory speciale, non pubblica, usata solo dal repository per assemblare un aggregato da dati gi\u00e0 esistenti, potenzialmente bypassando alcune validazioni che si applicano solo alla creazione ex-novo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#134-repository-vs-dao-data-access-object","title":"13.4. Repository vs. DAO (Data Access Object)","text":"<p>\u00c8 facile confondere questi due pattern, ma la loro intenzione \u00e8 molto diversa.</p> <p>|Caratteristica|Repository (Pattern di DDD)|DAO (Pattern di Accesso ai Dati)|</p> <p>|---|---|---|</p> <p>|Lavora con|Aggregati di dominio.|Singole tabelle del database.|</p> <p>|Restituisce|Oggetti di dominio ricchi e consistenti.|DTO (Data Transfer Objects) o dati grezzi.|</p> <p>|Granularit\u00e0|Grossolana. Es. <code>TripRepository</code>.|Fine. Es. <code>TripDAO</code>, <code>StopDAO</code>.|</p> <p>|Scopo|Astrazione del comportamento di una collezione.|Astrazione di una singola fonte di dati.|</p> <p>Un Repository potrebbe usare internamente diversi DAO per comporre un aggregato, ma il layer applicativo non deve saperlo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#135-test-e-mocking-la-ricompensa-dellastrazione","title":"13.5. Test e Mocking: La Ricompensa dell'Astrazione","text":"<p>Il pi\u00f9 grande vantaggio di questa architettura \u00e8 la testabilit\u00e0. Poich\u00e9 i nostri <code>Application Services</code> dipendono da un'interfaccia, possiamo facilmente sostituirla nei test con un'implementazione fittizia (mock).</p> <p>Go</p> <pre><code>// Esempio di test per un Application Service\n\n\n\nfunc TestCreateNewTrip_Success(t *testing.T) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Setup: Crea il mock del repository\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo := new(mocks.TripRepository) // Usando una libreria come testify/mock\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripToSave := // ... costruisci l'oggetto trip che ti aspetti venga salvato ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Expectation: D\u00ec al mock cosa aspettarsi\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Ci aspettiamo che il metodo Save venga chiamato una volta con il nostro oggetto.\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo.On(\"Save\", mock.Anything, tripToSave).Return(nil)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 3. Execution: Crea il servizio con il mock e chiamalo\n\n\n\n\u00a0\u00a0\u00a0\u00a0appService := application.NewTripApplicationService(mockRepo)\n\n\n\n\u00a0\u00a0\u00a0\u00a0result, err := appService.CreateNewTrip(...)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 4. Assertion: Verifica i risultati\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NotNil(t, result)\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo.AssertExpectations(t) // Verifica che Save sia stato chiamato come previsto.\n\n\n\n}\n</code></pre> <p>Questo test viene eseguito in millisecondi, senza richiedere un database, permettendoci di verificare la logica del nostro caso d'uso in completo isolamento.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#136-conclusioni-lastrazione-che-libera-il-dominio","title":"13.6. Conclusioni: L'Astrazione che Libera il Dominio","text":"<p>Il Repository Pattern \u00e8 molto pi\u00f9 di un meccanismo per accedere ai dati. \u00c8 un'astrazione strategica che:</p> <ul> <li> <p>Disaccoppia il dominio dalla persistenza, realizzando la promessa della Clean Architecture.</p> </li> <li> <p>Semplifica il layer applicativo, fornendo una semplice metafora di una collezione.</p> </li> <li> <p>Centralizza la logica di accesso ai dati e di mapping, rendendola pi\u00f9 facile da gestire e ottimizzare.</p> </li> <li> <p>Aumenta esponenzialmente la testabilit\u00e0 del nostro sistema.</p> </li> </ul> <p>Padroneggiare il Repository Pattern significa costruire un ponte robusto e flessibile tra il cuore del nostro software e il mondo esterno. Con questo ponte in posizione, siamo ora pronti a esplorare come \"iniettare\" queste dipendenze in modo pulito e come evolvere i nostri pattern di dati con CQRS.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-14-dependency-injection-professionale-in-go","title":"Capitolo 14: Dependency Injection Professionale in Go","text":"<p>Nei capitoli precedenti di questa sezione, abbiamo compiuto un lavoro monumentale. Abbiamo progettato un'architettura pulita che protegge il nostro dominio (Capitolo 12) e abbiamo definito un ponte robusto verso il mondo della persistenza tramite il Repository Pattern (Capitolo 13). Ora abbiamo una serie di componenti ben definiti e disaccoppiati:</p> <ul> <li> <p>Un <code>HTTP Handler</code> che dipende da un <code>Application Service</code>.</p> </li> <li> <p>Un <code>Application Service</code> che dipende da un'interfaccia <code>Repository</code>.</p> </li> <li> <p>Un'implementazione <code>PostgresRepository</code> che dipende da una connessione al database <code>*sql.DB</code>.</p> </li> </ul> <p>Questi componenti sono come dei mattoncini LEGO\u00ae di alta qualit\u00e0, ognuno con le sue porte e i suoi connettori ben definiti. Ma ora sorge la domanda fondamentale: chi assembla i mattoncini? Chi crea tutte queste istanze e le \"passa\" (le inietta) alle altre che ne hanno bisogno?</p> <p>Questa fase, spesso trascurata, \u00e8 critica. Un assemblaggio disordinato pu\u00f2 vanificare tutti i benefici di un'architettura pulita. In questo capitolo, affronteremo il \"problema del cablaggio\" e impareremo a gestirlo in modo professionale in Go utilizzando il pattern della Dependency Injection (DI) e strumenti moderni come Google Wire.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#141-il-problema-il-cablaggio-nel-caos","title":"14.1. Il Problema: Il Cablaggio nel Caos","text":"<p>Quando un'applicazione \u00e8 piccola, \u00e8 facile assemblare i componenti manualmente nella funzione <code>main</code>.</p> <p>Go</p> <pre><code>//\n\n\n\n// CONTROESEMPIO: Cablaggio manuale e disordinato\n\n\n\n//\n\n\n\nfunc main() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Configurazione sparsa\n\n\n\n\u00a0\u00a0\u00a0\u00a0dbUser := os.Getenv(\"DB_USER\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0dbPass := os.Getenv(\"DB_PASS\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0connStr := fmt.Sprintf(\"user=%s password=%s ...\", dbUser, dbPass)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creazione delle dipendenze\n\n\n\n\u00a0\u00a0\u00a0\u00a0db, err := sql.Open(\"postgres\", connStr)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Fatalf(\"failed to open db connection: %v\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer db.Close()\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Cablaggio manuale\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripRepo := postgres.NewPostgresTripRepository(db)\n\n\n\n\u00a0\u00a0\u00a0\u00a0userRepo := postgres.NewPostgresUserRepository(db)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... altri 10 repository ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripService := application.NewTripApplicationService(tripRepo)\n\n\n\n\u00a0\u00a0\u00a0\u00a0userService := application.NewUserApplicationService(userRepo)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... altri 10 servizi applicativi ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0authService := // ... creazione del servizio di autenticazione ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creazione degli handler, un incubo di parametri\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripHandler := web.NewTripHandler(tripService, authService)\n\n\n\n\u00a0\u00a0\u00a0\u00a0userHandler := web.NewUserHandler(userService, authService)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/trips\", tripHandler.HandleCreateTrip)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0log.Fatal(http.ListenAndServe(\":8080\", nil))\n\n\n\n}\n</code></pre> <p>Questo approccio non scala. Man mano che l'applicazione cresce, la funzione <code>main</code> diventa un \"mostro\":</p> <ul> <li> <p>Fragile: L'ordine di inizializzazione \u00e8 critico e facile da sbagliare.</p> </li> <li> <p>Difficile da Leggere: Comprendere il grafo delle dipendenze dell'applicazione richiede di analizzare un'enorme e complessa funzione.</p> </li> <li> <p>Violazione del DRY (Don't Repeat Yourself): Le stesse dipendenze (come <code>authService</code>) vengono passate a pi\u00f9 costruttori.</p> </li> <li> <p>Difficile da Testare: Testare il processo di avvio stesso diventa quasi impossibile.</p> </li> </ul> <p>Abbiamo bisogno di un approccio sistematico. Abbiamo bisogno della Dependency Injection.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#142-cose-la-dependency-injection-di","title":"14.2. Cos'\u00e8 la Dependency Injection (DI)?","text":"<p>La Dependency Injection \u00e8 un concetto sorprendentemente semplice, che abbiamo gi\u00e0 applicato istintivamente.</p> <p>Definizione: La Dependency Injection \u00e8 un design pattern in cui un oggetto o una funzione riceve le dipendenze di cui ha bisogno da una fonte esterna, invece di crearle da solo. \u00c8 l'applicazione pratica del Principio di Inversione delle Dipendenze.</p> <p>Invece di questo (Service Locator, un anti-pattern):</p> <p>Go</p> <pre><code>func NewTripApplicationService() *TripApplicationService {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Il servizio crea la sua dipendenza. MALE!\n\n\n\n\u00a0\u00a0\u00a0\u00a0repo := postgres.NewPostgresTripRepository(globalDB)\u00a0\n\n\n\n\u00a0\u00a0\u00a0\u00a0return &amp;TripApplicationService{repo: repo}\n\n\n\n}\n</code></pre> <p>Facciamo questo (Dependency Injection):</p> <p>Go</p> <pre><code>func NewTripApplicationService(repo TripRepository) *TripApplicationService {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Il servizio riceve la sua dipendenza. BENE!\n\n\n\n\u00a0\u00a0\u00a0\u00a0return &amp;TripApplicationService{repo: repo}\n\n\n\n}\n</code></pre> <p>La DI non \u00e8 un framework, \u00e8 un principio di progettazione. La vera sfida non \u00e8 usare la DI, ma gestire l'assemblaggio di un intero grafo di dipendenze in modo pulito. \u00c8 qui che entrano in gioco i contenitori DI.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#143-il-contenitore-di-lassemblatore-intelligente","title":"14.3. Il Contenitore DI: L'Assemblatore Intelligente \ud83e\udd16","text":"<p>Immagina un contenitore DI come un capocantiere esperto in una fabbrica di automobili. Invece di assemblare l'auto pezzo per pezzo manualmente, tu gli fornisci le \"istruzioni di montaggio\" per ogni componente (il motore, il telaio, le ruote) e gli dici: \"Costruiscimi un'auto\". Il capocantiere legge le istruzioni, capisce che per montare le ruote serve il telaio, e che per montare il telaio serve il motore, quindi assembla tutto nell'ordine corretto e ti consegna l'auto finita.</p> <p>Un contenitore DI fa esattamente questo per il nostro software. Le sue responsabilit\u00e0 sono:</p> <ol> <li> <p>Registrazione: Gli insegnamo come costruire ogni componente. Questi \"insegnamenti\" sono le nostre funzioni <code>New...</code>, chiamate provider o costruttori.</p> </li> <li> <p>Risoluzione del Grafo: Analizza le dipendenze. Vede che <code>Handler</code> richiede <code>Service</code>, che richiede <code>Repository</code>, che richiede <code>DB</code>, e costruisce un piano per assemblarli.</p> </li> <li> <p>Iniezione: Chiama i nostri costruttori, passando le dipendenze richieste che ha gi\u00e0 costruito.</p> </li> <li> <p>Gestione del Ciclo di Vita: Decide se un oggetto deve essere un singleton (creato una sola volta per tutta la durata dell'applicazione, come una connessione al DB) o transient (creato nuovo ogni volta che serve).</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#144-approcci-alla-di-in-go-una-scelta-di-campo","title":"14.4. Approcci alla DI in Go: Una Scelta di Campo","text":"<p>La community di Go ha opinioni forti sulla DI. Esistono tre approcci principali:</p> <ol> <li>Cablaggio Manuale Strutturato (Pure Go)</li> </ol> <p>Questo approccio prevede di scrivere il codice di cablaggio a mano, ma in modo pulito e strutturato, spesso in una funzione Build o in un package wire. \u00c8 trasparente, non ha \"magia\", ma pu\u00f2 diventare verboso.</p> <ol> <li>DI basata su Reflection (Da Evitare)</li> </ol> <p>Librerie come facebookgo/inject usano la reflection (reflect package) per iniettare le dipendenze automaticamente in campi struct taggati.</p> <p>Perch\u00e9 evitarle? Spostano il controllo dal programmatore alla libreria. Gli errori di dipendenza si verificano a runtime invece che a compile-time. Il codice \u00e8 pi\u00f9 difficile da seguire e le performance possono risentirne. In generale, la community Go le considera un anti-pattern.</p> <ol> <li>DI basata su Generazione di Codice (La Scelta Professionale \u2705)</li> </ol> <p>Questo \u00e8 il punto d'incontro ideale per Go. Uno strumento a riga di comando analizza il codice e genera un file .go che contiene il cablaggio manuale e pulito. Otteniamo i benefici dell'automazione senza sacrificare nessuno dei vantaggi di Go.</p> <ul> <li> <p>Nessuna Magia, Nessuna Reflection: Il codice generato \u00e8 Go standard, leggibile e debuggabile.</p> </li> <li> <p>Sicurezza a Compile-Time: Se una dipendenza non pu\u00f2 essere soddisfatta, il generatore di codice fallisce, non la tua applicazione in produzione.</p> </li> <li> <p>Performance Massime: Il codice generato \u00e8 efficiente come se lo avessi scritto a mano.</p> </li> </ul> <p>Lo strumento di riferimento in questa categoria \u00e8 Google Wire.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#145-guida-pratica-a-google-wire","title":"14.5. Guida Pratica a Google Wire","text":"<p>Wire \u00e8 diventato lo standard de facto per la DI in Go. Vediamo come usarlo nel nostro progetto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-1-installare-wire","title":"Passo 1: Installare Wire","text":"<p>Bash</p> <pre><code>go install github.com/google/wire/cmd/wire@latest\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-2-scrivere-i-costruttori-providers","title":"Passo 2: Scrivere i Costruttori (Providers)","text":"<p>La buona notizia \u00e8 che, seguendo i principi della Clean Architecture, abbiamo gi\u00e0 scritto la maggior parte dei nostri provider! Sono le nostre funzioni <code>New...</code>.</p> <p>Go</p> <pre><code>// internal/adapters/persistence/postgres/postgres_trip_repo.go\n\n\n\nfunc NewPostgresTripRepository(db *sql.DB) *PostgresTripRepository { ... }\n\n\n\n\n\n// internal/application/trip_service.go\n\n\n\nfunc NewTripApplicationService(repo TripRepository) *TripApplicationService { ... }\n\n\n\n\n\n// internal/adapters/web/http/trip_handler.go\n\n\n\nfunc NewTripHandler(service *application.TripApplicationService) *TripHandler { ... }\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-3-creare-il-set-di-provider-e-linjector","title":"Passo 3: Creare il Set di Provider e l'Injector","text":"<p>Ora dobbiamo dire a Wire come usare questi costruttori. Lo facciamo in un file <code>wire.go</code> (che per convenzione viene ignorato dalla compilazione Go grazie a un build tag).</p> <p>Go</p> <pre><code>// cmd/server/wire.go\n\n\n\n\n\n//go:build wireinject\n\n\n\n// +build wireinject\n\n\n\n\n\npackage main\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"database/sql\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/google/wire\"\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// importiamo tutti i nostri package\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/application\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/adapters/persistence/postgres\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/adapters/web/http\"\n\n\n\n)\n\n\n\n\n\n// Definiamo un \"Provider Set\" per raggruppare i provider correlati.\n\n\n\n// Questo \u00e8 utile per la riusabilit\u00e0.\n\n\n\nvar tripSet = wire.NewSet(\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Diciamo a Wire che quando serve un'interfaccia application.TripRepository,\n\n\n\n\u00a0\u00a0\u00a0\u00a0// deve usare l'implementazione *postgres.PostgresTripRepository.\n\n\n\n\u00a0\u00a0\u00a0\u00a0wire.Bind(new(application.TripRepository), new(*postgres.PostgresTripRepository)),\n\n\n\n\u00a0\u00a0\u00a0\u00a0postgres.NewPostgresTripRepository,\n\n\n\n\u00a0\u00a0\u00a0\u00a0application.NewTripApplicationService,\n\n\n\n\u00a0\u00a0\u00a0\u00a0http.NewTripHandler,\n\n\n\n)\n\n\n\n\n\n// L'Injector \u00e8 una funzione che dice a Wire quale oggetto finale vogliamo costruire.\n\n\n\n// Il corpo di questa funzione verr\u00e0 generato da Wire.\n\n\n\nfunc initializeApp(db *sql.DB) (*http.TripHandler, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// La chiamata a wire.Build istruisce il generatore.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// L'errore `panic` \u00e8 un segnaposto che non verr\u00e0 mai eseguito.\n\n\n\n\u00a0\u00a0\u00a0\u00a0wire.Build(tripSet)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil, nil\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-4-eseguire-wire-e-analizzare-il-risultato","title":"Passo 4: Eseguire Wire e Analizzare il Risultato","text":"<p>Dalla directory <code>cmd/server/</code>, eseguiamo il comando:</p> <p>Bash</p> <pre><code>wire\n</code></pre> <p>Wire creer\u00e0 un nuovo file chiamato <code>wire_gen.go</code>. Diamo un'occhiata!</p> <p>Go</p> <pre><code>// cmd/server/wire_gen.go\n\n\n\n\n\n// Code generated by Wire. DO NOT EDIT.\n\n\n\n\n\n//go:generate go run -mod=mod github.com/google/wire/cmd/wire\n\n\n\n//go:build !wireinject\n\n\n\n// +build !wireinject\n\n\n\n\n\npackage main\n\n\n\n\n\n// ... import ...\n\n\n\n\n\nfunc initializeApp(db *sql.DB) (*http.TripHandler, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Questo \u00e8 codice Go pulito e leggibile, generato per noi!\n\n\n\n\u00a0\u00a0\u00a0\u00a0postgresTripRepository := postgres.NewPostgresTripRepository(db)\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripApplicationService := application.NewTripApplicationService(postgresTripRepository)\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripHandler := http.NewTripHandler(tripApplicationService)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return tripHandler, nil\n\n\n\n}\n</code></pre> <p>Nessuna magia! Wire ha semplicemente scritto il codice di cablaggio manuale che avremmo scritto noi, ma in modo automatico e senza errori.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-5-usare-linjector-in-maingo","title":"Passo 5: Usare l'Injector in <code>main.go</code>","text":"<p>La nostra funzione <code>main</code> diventa ora incredibilmente semplice e pulita.</p> <p>Go</p> <pre><code>// cmd/server/main.go\n\n\n\npackage main\n\n\n\n\n\nfunc main() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0db := // ... codice per connettersi al db ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Chiamiamo la funzione generata da Wire per assemblare l'applicazione.\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripHandler, err := initializeApp(db)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Fatalf(\"failed to initialize app: %v\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Ora usiamo l'handler\n\n\n\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/trips\", tripHandler.HandleCreateTrip)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#146-gestione-della-configurazione-e-del-cleanup","title":"14.6. Gestione della Configurazione e del Cleanup","text":"<p>Le applicazioni reali hanno bisogno di configurazioni e di rilasciare le risorse in modo pulito.</p> <p>Configurazione: Possiamo passare un oggetto <code>Config</code> alla nostra funzione <code>initializeApp</code>. Wire lo user\u00e0 per configurare i componenti.</p> <p>Cleanup: Wire ha un supporto eccellente per il cleanup. Se un provider crea una risorsa (come <code>*sql.DB</code>), pu\u00f2 restituire anche una funzione di cleanup. Wire si assicurer\u00e0 che tutte le funzioni di cleanup vengano chiamate nell'ordine inverso di creazione quando l'applicazione termina.</p> <p>Go</p> <pre><code>// Esempio di provider con cleanup\n\n\n\nfunc ProvideDatabaseConnection(cfg Config) (*sql.DB, func(), error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0db, err := sql.Open(\"postgres\", cfg.DatabaseURL)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, nil, err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0cleanup := func() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.Close()\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Println(\"Database connection closed.\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0return db, cleanup, nil\n\n\n\n}\n\n\n\n\n\n// In wire.go, initializeApp restituir\u00e0 anche la funzione di cleanup\n\n\n\nfunc initializeApp(...) (*App, func(), error) { ... }\n\n\n\n\n\n// In main.go\n\n\n\nfunc main() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0app, cleanup, err := initializeApp(...)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil { ... }\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer cleanup() // Chiusura pulita garantita!\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... avvia l'app ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#147-conclusioni-ordine-e-professionalita-nel-cablaggio","title":"14.7. Conclusioni: Ordine e Professionalit\u00e0 nel Cablaggio","text":"<p>La Dependency Injection non \u00e8 un optional in un'architettura software seria, \u00e8 il meccanismo che le permette di funzionare. Mentre il cablaggio manuale pu\u00f2 essere sufficiente per progetti piccoli, l'uso di un generatore di codice come Google Wire porta il nostro approccio a un livello professionale.</p> <ul> <li> <p>Automatizza il processo di cablaggio, riducendo il boilerplate e gli errori.</p> </li> <li> <p>Garantisce la sicurezza dei tipi e la risoluzione delle dipendenze a tempo di compilazione.</p> </li> <li> <p>Produce codice Go idiomatico, trasparente e performante, senza ricorrere a \"magie\" basate sulla reflection.</p> </li> <li> <p>Gestisce elegantemente il ciclo di vita delle risorse, inclusa la loro chiusura.</p> </li> </ul> <p>Con un sistema di DI robusto, abbiamo completato l'assemblaggio della nostra architettura. Ora siamo pronti per esplorare pattern ancora pi\u00f9 avanzati, come il CQRS, che ci permetteranno di ottimizzare e scalare ulteriormente la nostra applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-15-cqrs-e-event-sourcing","title":"Capitolo 15: CQRS e Event Sourcing","text":"<p>Siamo giunti al capitolo finale della nostra esplorazione dell'architettura e dei pattern avanzati. Finora, abbiamo costruito un sistema robusto basato su DDD e Clean Architecture, con un modello di dominio ricco e un repository che lo astrae dalla persistenza. Questo \u00e8 un modello potente e sufficiente per un'ampia gamma di applicazioni.</p> <p>Tuttavia, man mano che i sistemi crescono in complessit\u00e0, a volte emergono delle tensioni. Le necessit\u00e0 di chi scrive i dati (ottimizzazione per la consistenza, regole di business complesse) e di chi li legge (ottimizzazione per la velocit\u00e0, viste aggregate per le UI) iniziano a divergere drasticamente. Tentare di servire entrambi con un unico modello pu\u00f2 portare a compromessi, query inefficienti e complessit\u00e0.</p> <p>In questo capitolo, esploreremo due pattern avanzati, spesso usati in sinergia, che affrontano questa tensione di petto: CQRS (Command Query Responsibility Segregation) e Event Sourcing. Questi non sono strumenti da usare alla leggera, ma per i problemi giusti, offrono un livello di scalabilit\u00e0, flessibilit\u00e0 e resilienza ineguagliabile.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#151-il-problema-un-modello-due-padroni","title":"15.1. Il Problema: Un Modello, Due Padroni","text":"<p>Il nostro aggregato <code>Viaggio</code>, con le sue entit\u00e0 e i suoi value objects, \u00e8 ottimizzato per un compito: far rispettare gli invarianti di business e garantire la consistenza transazionale. \u00c8 un modello perfetto per le operazioni di scrittura.</p> <p>Ma cosa succede quando il nostro frontend SvelteKit ha bisogno di visualizzare una dashboard con una lista di tutti i viaggi dell'utente, mostrando per ognuno il nome, lo stato e il numero totale di tappe?</p> <p>Con il nostro modello attuale, l'Application Service dovrebbe:</p> <ol> <li> <p>Chiamare <code>tripRepository.FindByOwnerID(...)</code> per caricare una lista di aggregati <code>Viaggio</code>.</p> </li> <li> <p>Per ogni <code>Viaggio</code> caricato, l'intero aggregato, con tutte le sue <code>Tappe</code> e altri oggetti, viene idratato in memoria.</p> </li> <li> <p>L'applicazione dovrebbe poi ciclare su questa lista e, per ogni <code>Viaggio</code>, contare le <code>Tappe</code> per ottenere il numero totale.</p> </li> <li> <p>Infine, dovrebbe mappare questi dati in un DTO (Data Transfer Object) da inviare al frontend.</p> </li> </ol> <p>Questo approccio, sebbene funzionante, \u00e8 inefficiente. Carichiamo una mole di dati (tutti i dettagli delle tappe) solo per calcolare un conteggio. Su larga scala, questo porta a un consumo eccessivo di memoria e a query lente. Il nostro modello, ottimizzato per la scrittura, non \u00e8 ottimizzato per questa specifica lettura.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#152-cqrs-segregare-comandi-e-query","title":"15.2. CQRS: Segregare Comandi e Query","text":"<p>Il Command Query Responsibility Segregation (CQRS) \u00e8 un pattern architetturale che risolve questo problema introducendo una separazione netta tra il modello usato per modificare lo stato e quello usato per leggerlo.</p> <p>Definizione: CQRS \u00e8 un principio che separa le operazioni che modificano i dati (Comandi) da quelle che li leggono (Query). Questo porta alla creazione di due modelli distinti: un Write Model ottimizzato per la logica di business e la consistenza, e uno o pi\u00f9 Read Models ottimizzati per le interrogazioni della UI.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#lo-stack-dei-comandi-write-side","title":"Lo Stack dei Comandi (Write Side)","text":"<ul> <li> <p>Scopo: Eseguire comandi, far rispettare le regole di business, garantire la consistenza.</p> </li> <li> <p>Componenti: Questo \u00e8 il lato che abbiamo costruito finora! Contiene:</p> </li> </ul> <p>- Comandi: Oggetti che rappresentano l'intenzione di modificare lo stato (es. <code>CreateTripCommand</code>, <code>AddStopCommand</code>).</p> <p>- Command Handlers: Simili ai nostri Application Services, ricevono un comando e orchestrano il caso d'uso.</p> <p>- Modello di Dominio: I nostri Aggregati, Entit\u00e0 e Value Objects ricchi.</p> <p>- Repository: Per persistere gli aggregati.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#lo-stack-delle-query-read-side","title":"Lo Stack delle Query (Read Side)","text":"<ul> <li> <p>Scopo: Rispondere alle query in modo rapido ed efficiente.</p> </li> <li> <p>Componenti:</p> </li> </ul> <p>- Query: Oggetti che rappresentano una richiesta di dati.</p> <p>- Query Handlers: Ricevono una query, interrogano il Read Model e restituiscono un DTO.</p> <p>- Read Models: Questo \u00e8 il cuore del Read Side. Sono modelli di dati semplici, spesso \"appiattiti\" e denormalizzati, progettati su misura per una specifica vista della UI. Non contengono logica di business. Potrebbero essere semplici <code>struct</code> Go.</p> <p>- Meccanismo di Persistenza: Il Read Model pu\u00f2 vivere in un database completamente separato e usare una tecnologia diversa (es. una tabella PostgreSQL, un documento Elasticsearch, una cache Redis).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#sincronizzare-i-modelli-il-ruolo-degli-eventi","title":"Sincronizzare i Modelli: Il Ruolo degli Eventi","text":"<p>Quando un comando modifica il Write Model, come fa il Read Model a essere aggiornato? La risposta \u00e8 la comunicazione asincrona tramite eventi.</p> <ol> <li> <p>Il Command Handler processa un comando e salva l'aggregato.</p> </li> <li> <p>Subito dopo, pubblica un Domain Event (es. <code>TripCreated</code>, <code>StopAddedToTrip</code>) su un bus di eventi.</p> </li> <li> <p>Un Event Handler (o proiettore) sottoscritto a quell'evento lo riceve.</p> </li> <li> <p>L'Event Handler esegue una semplice operazione di aggiornamento sul Read Model (es. inserisce una nuova riga nella tabella dei riepiloghi dei viaggi, o incrementa un contatore).</p> </li> </ol> <p>Questo significa che il Read Model \u00e8 eventualmente consistente. Per un breve istante, potrebbe non essere aggiornato, ma si sincronizzer\u00e0 poco dopo. Per la stragrande maggioranza delle interfacce utente, questo \u00e8 un compromesso perfettamente accettabile in cambio di enormi guadagni in performance e scalabilit\u00e0.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#153-event-sourcing-la-storia-come-unica-fonte-di-verita","title":"15.3. Event Sourcing: La Storia come Unica Fonte di Verit\u00e0","text":"<p>L'Event Sourcing (ES) \u00e8 un pattern pi\u00f9 radicale e potente, che si sposa magnificamente con CQRS.</p> <p>Definizione: L'Event Sourcing \u00e8 un approccio alla persistenza in cui non si salva lo stato attuale di un'entit\u00e0, ma si persiste la sequenza cronologica e immutabile di eventi che hanno portato a quello stato. Lo stato attuale \u00e8 un effetto collaterale, un calcolo derivato da questa storia.</p> <p>Pensa al tuo estratto conto bancario. La banca non memorizza solo il tuo saldo finale. Memorizza ogni singola transazione: <code>+50\u20ac</code>, <code>+100\u20ac</code>, <code>-20\u20ac</code>. Il tuo saldo attuale \u00e8 semplicemente la somma di tutte queste transazioni. Quelle transazioni sono gli eventi.</p> <p>Concetti Chiave:</p> <ul> <li> <p>Event Store: \u00c8 il database specializzato (o una semplice tabella) che memorizza gli eventi. \u00c8 una struttura append-only (si pu\u00f2 solo aggiungere, mai modificare o cancellare). Gli eventi sono fatti, e i fatti non si cambiano.</p> </li> <li> <p>Ricostruzione dello Stato: Per ottenere lo stato corrente di un aggregato, il repository legge l'intera sequenza di eventi per quell'ID dal'Event Store e li \"riproduce\" su un'istanza vuota dell'aggregato.</p> </li> <li> <p>Eventi come Fonte di Verit\u00e0: L'Event Store diventa la fonte di verit\u00e0 assoluta e auditabile del sistema.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#come-cambia-il-nostro-aggregato-viaggio","title":"Come Cambia il Nostro Aggregato <code>Viaggio</code>","text":"<p>Per implementare l'Event Sourcing, il nostro aggregato deve cambiare leggermente.</p> <ol> <li>I metodi di comando non modificano lo stato, ma producono eventi.</li> </ol> <p>Go</p> <p>```go</p> <p>// Metodo di comando in un aggregato event-sourced</p> <p>func (t Trip) AddStop(place Place, day int, notes string) (StopAdded, error) {</p> <p>// 1. Validazione delle regole di business</p> <p>if t.status != TripStatusPlanning {</p> <p>return nil, errors.New(\"cannot add stop to a trip not in planning status\")</p> <p>}</p> <p>// ... altre validazioni ...</p> <p>// 2. Se la validazione ha successo, crea un evento. NON modificare t.stops qui!</p> <p>event := &amp;StopAdded{</p> <p>EventID: uuid.New(),</p> <p>TripID:\u00a0 t.id,</p> <p>Place: \u00a0 place,</p> <p>Day: \u00a0 \u00a0 day,</p> <p>Notes: \u00a0 notes,</p> <p>}</p> <p>return event, nil</p> <p>}</p> <p>```</p> <ol> <li>Si introduce un metodo Apply per modificare lo stato.</li> </ol> <p>Questo metodo viene usato internamente per applicare gli eventi (sia quelli nuovi che quelli storici durante la ricostruzione).</p> <p>Go</p> <p>```go</p> <p>// Metodo Apply che effettivamente muta lo stato</p> <p>func (t *Trip) Apply(event Event) {</p> <p>switch e := event.(type) {</p> <p>case *TripCreated:</p> <p>t.id = e.TripID</p> <p>t.ownerID = e.OwnerID</p> <p>t.status = TripStatusPlanning</p> <p>// ...</p> <p>case *StopAdded:</p> <p>newStop := stop{</p> <p>place: e.Place,</p> <p>dayOfTrip: e.Day,</p> <p>notes: e.Notes,</p> <p>}</p> <p>t.stops = append(t.stops, newStop)</p> <p>}</p> <p>}</p> <p>```</p> <p>Il <code>Repository</code> ora non salva pi\u00f9 lo stato, ma si limita ad accodare i nuovi eventi generati dall'aggregato nell'Event Store.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#154-la-sinergia-perfetta-cqrs-event-sourcing","title":"15.4. La Sinergia Perfetta: CQRS + Event Sourcing","text":"<p>Quando usati insieme, questi due pattern creano un'architettura incredibilmente potente e disaccoppiata.</p> <ul> <li> <p>L'Event Store diventa il cuore del sistema.</p> </li> <li> <p>Il Write Side \u00e8 il nostro aggregato event-sourced che produce eventi e li scrive nell'Event Store.</p> </li> <li> <p>Il Read Side \u00e8 composto da uno o pi\u00f9 proiettori (event handler) che sono sottoscritti al flusso di eventi dell'Event Store. Ogni volta che un nuovo evento viene salvato, i proiettori lo ricevono e aggiornano le loro specifiche tabelle di lettura denormalizzate.</p> </li> </ul> <p>Questo significa che il Read Side \u00e8 completamente disaccoppiato dal Write Side. Possiamo aggiungere nuove viste (nuovi Read Models) in qualsiasi momento, semplicemente creando un nuovo proiettore e facendogli processare la storia degli eventi dall'inizio. Non c'\u00e8 bisogno di complesse migrazioni di dati.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#155-pro-e-contro-un-martello-per-quali-chiodi","title":"15.5. Pro e Contro: Un Martello per Quali Chiodi?","text":"<p>Questi pattern sono il \"martello pneumatico\" della progettazione software. Potentissimi, ma non adatti per appendere un quadretto.</p> <p>CQRS:</p> <ul> <li> <p>\ud83d\udc4d Pro: Performance di lettura eccellenti, scalabilit\u00e0 indipendente, modelli pi\u00f9 semplici e focalizzati.</p> </li> <li> <p>\ud83d\udc4e Contro: Complessit\u00e0 architetturale (due modelli, un bus di eventi), la consistenza eventuale richiede un cambio di mentalit\u00e0 e una gestione attenta.</p> </li> <li> <p>Quando usarlo? Quando i modelli di lettura e scrittura sono molto diversi, o quando le esigenze di scalabilit\u00e0 delle query sono elevate. \u00c8 un pattern che si pu\u00f2 applicare anche solo a parti del sistema (es. solo per l'aggregato <code>Viaggio</code>), non deve essere per forza tutto o niente.</p> </li> </ul> <p>Event Sourcing:</p> <ul> <li> <p>\ud83d\udc4d Pro: Audit trail completo e immutabile (chi ha fatto cosa e quando?), capacit\u00e0 di debug eccezionali (\"viaggiare nel tempo\" per vedere lo stato in qualsiasi momento), flessibilit\u00e0 nel creare nuove proiezioni future.</p> </li> <li> <p>\ud83d\udc4e Contro: Complessit\u00e0 significativa (gestione dello store, riproduzione degli eventi, versioning degli schemi degli eventi, snapshot per le performance). \u00c8 un cambiamento di paradigma radicale.</p> </li> <li> <p>Quando usarlo? Per i domini di business core dove la storia e l'audit sono requisiti non funzionali critici (es. finanza, sanit\u00e0, logistica).</p> </li> </ul> <p>Raccomandazione per \"Where Should I Be?\":</p> <p>Per il nostro progetto, un approccio pragmatico \u00e8 il migliore.</p> <ol> <li> <p>Iniziare con un'architettura DDD/Clean standard.</p> </li> <li> <p>Introdurre CQRS selettivamente: Creare un Read Model <code>TripSummary</code> per la dashboard dei viaggi \u00e8 un'ottima prima applicazione di CQRS, che porta benefici immediati senza stravolgere l'intero sistema.</p> </li> <li> <p>Valutare Event Sourcing con cautela: Potrebbe essere overkill all'inizio. Ma se in futuro volessimo aggiungere funzionalit\u00e0 come \"Annulla l'ultima modifica al viaggio\" o \"Mostra la cronologia completa delle modifiche di un itinerario\", l'Event Sourcing diventerebbe la soluzione ideale.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#156-conclusioni-un-nuovo-orizzonte-di-possibilita","title":"15.6. Conclusioni: Un Nuovo Orizzonte di Possibilit\u00e0","text":"<p>CQRS e Event Sourcing rappresentano un passo evolutivo oltre le tradizionali architetture CRUD. Ci costringono a pensare ai dati non solo come uno stato da sovrascrivere, ma come un flusso di eventi e intenzioni.</p> <ul> <li> <p>CQRS ci permette di ottimizzare e scalare il nostro sistema in modi che un modello unificato non consente.</p> </li> <li> <p>Event Sourcing ci fornisce una fedelt\u00e0 storica perfetta, trasformando la nostra applicazione in un sistema di registrazione a prova di manomissione.</p> </li> </ul> <p>Questi pattern chiudono la nostra esplorazione della progettazione tattica e architetturale. Con questi strumenti, siamo equipaggiati per affrontare domini di una complessit\u00e0 enorme. Nella Parte IV, alzeremo lo sguardo dal codice e dall'architettura di un singolo servizio per affrontare la progettazione strategica: come scomporre un grande problema di business in contesti gestibili e farli collaborare efficacemente.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-iv-progettazione-strategica","title":"Parte IV: Progettazione Strategica","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-16-bounded-contexts","title":"Capitolo 16: Bounded Contexts","text":"<p>Benvenuti nella Parte IV del nostro viaggio. Finora ci siamo concentrati sulla progettazione tattica: abbiamo imparato a costruire modelli di dominio ricchi ed espressivi, con Aggregati, Entit\u00e0 e Value Objects, e a inserirli in un'architettura pulita. Abbiamo imparato a fare lo \"zoom-in\", a curare i dettagli del nostro codice per renderlo robusto e significativo.</p> <p>Ora \u00e8 il momento di fare \"zoom-out\". \u00c8 il momento di alzare lo sguardo dal singolo modello e affrontare la sfida pi\u00f9 grande nello sviluppo di software enterprise: la gestione della complessit\u00e0 su larga scala. I sistemi reali non sono composti da un unico, perfetto modello di dominio. Sono ecosistemi vasti, con aree di business diverse, team diversi e, soprattutto, linguaggi diversi.</p> <p>In questa sezione, entreremo nel mondo della progettazione strategica del DDD. E il suo pattern fondamentale, il concetto che permette di dominare la complessit\u00e0 su larga scala, \u00e8 il Bounded Context (Contesto Delimitato). Capire e applicare questo pattern \u00e8 ci\u00f2 che distingue un'architettura software ordinaria da una veramente strategica e resiliente.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#161-il-problema-lillusione-di-un-unico-modello-globale","title":"16.1. Il Problema: L'Illusione di un Unico Modello Globale","text":"<p>Quando un'azienda cresce, la sua complessit\u00e0 cresce con essa. Consideriamo una grande piattaforma di e-commerce e pensiamo a un concetto apparentemente semplice come \"Cliente\" (Customer).</p> <ul> <li> <p>Per il Team Vendite, un \"Cliente\" \u00e8 definito dal suo storico ordini, dalle sue informazioni di spedizione e dai dettagli di fatturazione. La loro preoccupazione \u00e8 processare un acquisto.</p> </li> <li> <p>Per il Team Marketing, un \"Cliente\" \u00e8 un profilo con dati demografici, interessi, segmenti di appartenenza e una cronologia delle interazioni con le campagne pubblicitarie. La loro preoccupazione \u00e8 la conversione e la fidelizzazione.</p> </li> <li> <p>Per il Team Assistenza, un \"Cliente\" \u00e8 un utente con una cronologia di ticket di supporto, reclami e contatti telefonici. La loro preoccupazione \u00e8 la risoluzione dei problemi.</p> </li> <li> <p>Per il Team Spedizioni, un \"Cliente\" \u00e8 semplicemente un nome e un <code>Indirizzo</code> (un Value Object) a cui consegnare un pacco.</p> </li> </ul> <p>L'errore pi\u00f9 comune e disastroso \u00e8 tentare di creare un unico, monolitico modello <code>Cliente</code> che soddisfi le esigenze di tutti. Il risultato sarebbe un \"mostro\": una <code>struct</code> o una classe con decine e decine di campi, la maggior parte dei quali <code>nullable</code> o irrilevanti per la maggior parte dei casi d'uso. Questo \"Mega-Cliente\" diventa:</p> <ul> <li> <p>Incoerente: Le regole che lo governano sono un miscuglio di logiche contraddittorie.</p> </li> <li> <p>Fragile: Una modifica richiesta dal team Marketing rischia di rompere una funzionalit\u00e0 critica del team Vendite.</p> </li> <li> <p>Di Nessuno: Nessun team ne ha la piena propriet\u00e0. Tutti hanno paura di toccarlo.</p> </li> </ul> <p>Il problema di fondo \u00e8 che un singolo modello unificato \u00e8 un'illusione. Il significato delle parole dipende dal contesto in cui vengono usate.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#162-la-soluzione-definire-i-bounded-context","title":"16.2. La Soluzione: Definire i Bounded Context","text":"<p>Il DDD risolve questo problema in modo radicale, introducendo il concetto di Bounded Context.</p> <p>Definizione: Un Bounded Context \u00e8 un confine esplicito (linguistico e applicativo) all'interno del quale un particolare modello di dominio \u00e8 coerente e ha un significato univoco. All'interno di questo confine, il Linguaggio Ubiquo \u00e8 valido e non ambiguo.</p> <p>Pensa a un Bounded Context come a una nazione. All'interno dei confini dell'Italia, la parola \"Costituzione\" si riferisce a un documento specifico con un significato preciso. Al di l\u00e0 del confine, in Francia, la stessa parola (\"Constitution\") si riferisce a un altro documento, con una storia e regole diverse. Il confine geografico delimita il contesto di validit\u00e0 del termine.</p> <p>Caratteristiche chiave di un Bounded Context:</p> <ul> <li> <p>Confine Linguistico: \u00c8 il luogo dove un Linguaggio Ubiquo vive. Anzi, possiamo dire che esiste una relazione 1:1 tra un Bounded Context e un Linguaggio Ubiquo. Questo affina la nostra comprensione dal Capitolo 7: un linguaggio non \u00e8 \"ubiquo\" in tutta l'azienda, ma \u00e8 \"ubiquo\" all'interno del suo contesto.</p> </li> <li> <p>Confine del Modello: All'interno del contesto, il modello di dominio (con i suoi Aggregati, Entit\u00e0, ecc.) \u00e8 ottimizzato per risolvere uno specifico sotto-problema di business.</p> </li> <li> <p>Confine di Consistenza: Le regole di consistenza forte (invarianti degli aggregati) sono applicate rigorosamente all'interno del contesto. La consistenza tra contesti diversi \u00e8 tipicamente gestita in modo pi\u00f9 lasco (consistenza eventuale).</p> </li> <li> <p>Confine del Team (spesso): Idealmente, un Bounded Context \u00e8 di propriet\u00e0 di un singolo team, che ha la piena autonomia di svilupparlo e farlo evolvere.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#163-identificare-i-bounded-context-in-where-should-i-be","title":"16.3. Identificare i Bounded Context in \"Where Should I Be?\"","text":"<p>Applichiamo questi principi per scomporre la nostra applicazione. Invece di pensare a un unico grande sistema, identifichiamo le sue capacit\u00e0 di business distinte.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#contesto-1-identity-access-context-identita-e-accesso","title":"Contesto 1: <code>Identity &amp; Access Context</code> (Identit\u00e0 e Accesso) \ud83d\udc64","text":"<ul> <li> <p>Responsabilit\u00e0: Gestire chi sono gli utenti e cosa possono fare. Si occupa di registrazione, login, gestione dei profili, ruoli e permessi.</p> </li> <li> <p>Linguaggio e Modello:</p> </li> </ul> <p>- <code>Utente</code>: \u00c8 l'entit\u00e0 centrale. Qui, \u00e8 un modello ricco con attributi come <code>Email</code>, <code>HashedPassword</code>, <code>StatoVerifica</code>, <code>Ruoli</code>.</p> <p>- <code>Profilo</code>: Potrebbe contenere nome, cognome, avatar.</p> <ul> <li>Obiettivo: Sicurezza e gestione dell'identit\u00e0.</li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#contesto-2-trip-planning-context-pianificazione-viaggi","title":"Contesto 2: <code>Trip Planning Context</code> (Pianificazione Viaggi) \ud83d\uddfa\ufe0f","text":"<ul> <li> <p>Responsabilit\u00e0: \u00c8 il cuore della nostra applicazione. Permette agli utenti di creare, modificare e gestire i loro itinerari di viaggio.</p> </li> <li> <p>Linguaggio e Modello:</p> </li> </ul> <p>- <code>Viaggio</code>: \u00c8 l'aggregato principale che abbiamo progettato nella Parte II.</p> <p>- <code>Tappa</code>, <code>Luogo</code>: Concetti centrali per la pianificazione.</p> <p>- <code>Utente</code>: Qui, il concetto di \"Utente\" \u00e8 molto pi\u00f9 semplice. Non ci interessano la sua password o la data di registrazione. Ci interessa solo il suo <code>UserID</code> (per collegarlo ai suoi viaggi) e forse il suo <code>LivelloAbbonamento</code> (un Value Object) per applicare regole come \"un utente Free non pu\u00f2 avere pi\u00f9 di 3 viaggi attivi\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#contesto-3-suggestions-context-suggerimenti","title":"Contesto 3: <code>Suggestions Context</code> (Suggerimenti) \u2728","text":"<ul> <li> <p>Responsabilit\u00e0: Interagire con servizi di Intelligenza Artificiale (come OpenAI) per generare proposte di itinerari basate sulle richieste degli utenti.</p> </li> <li> <p>Linguaggio e Modello:</p> </li> </ul> <p>- <code>RichiestaSuggerimento</code>: Un oggetto che cattura l'input dell'utente (\"3 giorni a Parigi per amanti dell'arte\").</p> <p>- <code>PropostaDiItinerario</code>: L'output strutturato dell'AI.</p> <p>- <code>Viaggio</code>: In questo contesto, il concetto di \"Viaggio\" non \u00e8 un aggregato complesso, ma probabilmente solo un insieme di vincoli (destinazione, durata, interessi) da inviare all'AI.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#contesto-4-billing-context-fatturazione-futuro","title":"Contesto 4: <code>Billing Context</code> (Fatturazione) - Futuro \ud83d\udcb3","text":"<ul> <li> <p>Responsabilit\u00e0: Gestire gli abbonamenti a pagamento, processare i pagamenti, generare fatture.</p> </li> <li> <p>Linguaggio e Modello:</p> </li> </ul> <p>- <code>Cliente</code>: Qui l'utente diventa un \"Cliente\", un'entit\u00e0 con un <code>MetodoDiPagamento</code>, uno <code>StatoAbbonamento</code> e una cronologia di <code>Transazioni</code>.</p> <p>- <code>Prodotto</code>: Un'entit\u00e0 che rappresenta i piani tariffari (\"Piano Premium Mensile\").</p> <p>- Il concetto di <code>Viaggio</code> qui potrebbe non esistere affatto, o essere solo una stringa descrittiva su una fattura.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#164-bounded-context-e-microservizi-un-abbinamento-perfetto","title":"16.4. Bounded Context e Microservizi: Un Abbinamento Perfetto","text":"<p>La progettazione strategica con i Bounded Context ci fornisce la mappa perfetta per una corretta scomposizione in microservizi.</p> <p>La Regola d'Oro della Decomposizione: Un microservizio dovrebbe essere l'implementazione di un singolo Bounded Context.</p> <ul> <li> <p>NON dividere un Bounded Context su pi\u00f9 microservizi: Se lo facessi, la comunicazione tra le parti del tuo modello di dominio, che dovrebbe essere in-process e fortemente consistente, diventerebbe una chiamata di rete, lenta e inaffidabile. Questo porta a problemi come le transazioni distribuite, un campo minato da evitare a tutti i costi.</p> </li> <li> <p>NON mettere pi\u00f9 Bounded Context in un unico microservizio: Se lo facessi, ricreeresti un \"mini-monolite\". I modelli e i linguaggi diversi si mescolerebbero, le logiche si intreccerebbero e perderesti i vantaggi dell'autonomia e della manutenibilit\u00e0.</p> </li> </ul> <p>La nostra architettura fisica, quindi, rifletter\u00e0 direttamente il nostro design strategico:</p> <ul> <li> <p><code>identity-access-service</code> (implementa l'Identity &amp; Access Context)</p> </li> <li> <p><code>trip-planning-service</code> (implementa il Trip Planning Context)</p> </li> <li> <p><code>suggestions-service</code> (implementa il Suggestions Context)</p> </li> </ul> <p>Questo approccio ci d\u00e0 una giustificazione di business per i nostri confini architetturali. Non stiamo creando microservizi \"perch\u00e9 sono di moda\", ma perch\u00e9 il nostro dominio di business si scompone naturalmente in queste aree di responsabilit\u00e0.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#165-i-vantaggi-di-un-design-orientato-ai-contesti","title":"16.5. I Vantaggi di un Design Orientato ai Contesti","text":"<p>Progettare esplicitamente attorno ai Bounded Context sblocca benefici enormi:</p> <ul> <li> <p>Autonomia dei Team: Il team \"Planning\" pu\u00f2 scegliere le tecnologie e le strategie di deployment migliori per il suo servizio, senza dover coordinarsi costantemente con il team \"Identity\".</p> </li> <li> <p>Chiarezza del Modello: Ogni modello di dominio \u00e8 pi\u00f9 piccolo, pi\u00f9 semplice e focalizzato su un unico scopo. Gli sviluppatori possono tenerlo interamente in testa.</p> </li> <li> <p>Evoluzione Indipendente: Possiamo sostituire completamente l'implementazione del <code>suggestions-service</code> (magari passando da OpenAI a un altro provider) senza che nessun altro servizio se ne accorga.</p> </li> <li> <p>Confini Espliciti: Ci costringe a pensare attentamente a come i diversi contesti comunicano tra loro, portando a contratti (API) pi\u00f9 puliti e intenzionali.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#166-conclusioni-dalla-tattica-alla-strategia","title":"16.6. Conclusioni: Dalla Tattica alla Strategia","text":"<p>Il Bounded Context \u00e8 il mattone fondamentale della progettazione strategica. \u00c8 lo strumento che ci permette di applicare tutti i pattern tattici che abbiamo imparato (Aggregati, Entit\u00e0, ecc.) su una scala pi\u00f9 ampia, evitando di creare un unico, ingestibile \"Grande Pasticcio di Fango\".</p> <p>Comprendere e identificare i contesti delimitati significa passare da semplice programmatore ad architetto del software. Significa imparare a vedere il sistema non come un'unica massa informe, ma come una federazione di modelli specialistici e collaborativi.</p> <p>Ora che sappiamo cosa sono i Bounded Context e perch\u00e9 sono importanti, i prossimi capitoli risponderanno a due domande cruciali:</p> <ol> <li> <p>Come possiamo scoprire questi confini in modo collaborativo ed efficace? La risposta \u00e8 l'Event Storming (Capitolo 17).</p> </li> <li> <p>Come facciamo a far comunicare tra loro questi contesti una volta che li abbiamo definiti? La risposta \u00e8 il Context Mapping (Capitolo 18).</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-17-event-storming-dalla-specifica-al-design","title":"Capitolo 17: Event Storming: Dalla Specifica al Design","text":"<p>Nel capitolo precedente, abbiamo introdotto il Bounded Context come il pilastro della progettazione strategica, lo strumento che ci permette di scomporre un dominio complesso in parti gestibili. Questo solleva una domanda da un milione di dollari: come troviamo questi confini? Come facciamo a sapere dove finisce un contesto e ne inizia un altro? Basarsi sull'intuito o su una comprensione superficiale del business \u00e8 una ricetta per il disastro.</p> <p>La risposta non si trova in un documento di 100 pagine o in una serie infinita di riunioni. Si trova in un workshop dinamico, visivo e intensamente collaborativo chiamato Event Storming.</p> <p>L'Event Storming \u00e8 una tecnica, inventata da Alberto Brandolini, che sta rivoluzionando il modo in cui i team esplorano i domini di business complessi. Non \u00e8 una riunione, \u00e8 un processo di scoperta collettiva. \u00c8 il modo pi\u00f9 efficace che conosciamo per colmare il divario tra gli esperti di dominio e gli sviluppatori, trasformando la conoscenza del business direttamente in un progetto software. In questo capitolo, impareremo a condurre un workshop di Event Storming per mappare il dominio della nostra applicazione \"Where Should I Be?\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#171-il-problema-la-conoscenza-chiusa-nei-silos","title":"17.1. Il Problema: La Conoscenza Chiusa nei Silos","text":"<p>Il modo tradizionale di raccogliere i requisiti \u00e8 spesso rotto. Gli analisti di business parlano con gli stakeholder, scrivono lunghe specifiche e le passano agli sviluppatori. Gli sviluppatori le leggono, le interpretano (spesso in modo errato), fanno domande e il ciclo si ripete. La conoscenza rimane intrappolata in \"silos\": la testa degli esperti, i documenti Word, i ticket di Jira.</p> <p>Questo processo \u00e8 lento, inefficiente e pieno di rischi di fraintendimento. L'Event Storming rompe questi silos. Mette tutte le persone chiave nella stessa stanza (fisica o virtuale) con un obiettivo comune: creare una narrazione visibile e condivisa di come funziona il business.</p> <p>I Principi Chiave:</p> <ul> <li> <p>La Collaborazione \u00e8 Essenziale: Riunisce persone con prospettive diverse: sviluppatori, esperti di dominio (le persone pi\u00f9 importanti nella stanza), product manager, designer UX, tester.</p> </li> <li> <p>La Visualizzazione \u00e8 Potere: Si usa una superficie di modellazione illimitata (un lungo rotolo di carta su un muro o una lavagna virtuale infinita come Miro) e post-it colorati. L'atto fisico di scrivere e spostare i post-it \u00e8 parte integrante del processo.</p> </li> <li> <p>Focus sugli Eventi di Dominio: Il punto di partenza non sono i dati o le funzionalit\u00e0, ma gli eventi: le cose che accadono nel business e che sono importanti per gli esperti di dominio.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#172-la-leggenda-dei-post-it-il-linguaggio-dellevent-storming","title":"17.2. La Leggenda dei Post-it: Il Linguaggio dell'Event Storming \ud83c\udfa8","text":"<p>L'Event Storming ha un suo linguaggio visivo ben definito. Ogni colore di post-it ha un significato preciso. Imparare questa \"leggenda\" \u00e8 il primo passo.</p> <p>\ud83d\udfe7 Evento di Dominio (Arancione)</p> <ul> <li> <p>Cos'\u00e8: Il protagonista assoluto. Un fatto accaduto nel passato che \u00e8 di interesse per il business.</p> </li> <li> <p>Grammatica: Sempre al tempo passato, in forma di participio passato. Es. \"Viaggio Creato\", \"Pagamento Ricevuto\", \"Utente Registrato\".</p> </li> <li> <p>Perch\u00e9: Costringe a pensare a fatti concreti e immutabili, non a desideri o processi.</p> </li> </ul> <p>\ud83d\udfe6 Comando (Azzurro)</p> <ul> <li> <p>Cos'\u00e8: L'intenzione di un utente o di un altro sistema che scatena un evento. \u00c8 la causa.</p> </li> <li> <p>Grammatica: Un verbo all'imperativo o all'infinito. Es. \"Crea Viaggio\", \"Aggiungi Tappa\".</p> </li> </ul> <p>\ud83d\udfe8 Aggregato (Giallo)</p> <ul> <li> <p>Cos'\u00e8: Il \"sostantivo\" del nostro dominio. L'oggetto di business che riceve un comando, applica le regole e, se tutto va bene, emette uno o pi\u00f9 eventi. Questi sono i nostri candidati Aggregati del DDD.</p> </li> <li> <p>Grammatica: Un nome. Es. \"Viaggio\", \"Utente\".</p> </li> </ul> <p>\ud83d\udfe9 Read Model / Vista (Verde)</p> <ul> <li> <p>Cos'\u00e8: L'informazione che viene presentata a un utente per aiutarlo a prendere una decisione (e quindi a lanciare un comando). \u00c8 la nostra UI.</p> </li> <li> <p>Grammatica: Una descrizione della vista. Es. \"Dashboard dei Viaggi\", \"Modulo di Registrazione\".</p> </li> </ul> <p>\ud83d\udfea Sistema Esterno (Viola)</p> <ul> <li> <p>Cos'\u00e8: Qualsiasi dipendenza esterna al nostro sistema: un servizio di terze parti, un'altra API aziendale, un sistema legacy.</p> </li> <li> <p>Grammatica: Il nome del sistema. Es. \"Gateway di Pagamento Stripe\", \"API di OpenAI\".</p> </li> </ul> <p>\ud83d\udfe5 Policy / Reazione (Rosa/Magenta)</p> <ul> <li> <p>Cos'\u00e8: La \"colla\" che lega i processi. \u00c8 la logica del tipo \"Ogni volta che... Allora...\". Una policy ascolta un evento e scatena un nuovo comando.</p> </li> <li> <p>Grammatica: <code>Ogni volta che [Evento], allora [Comando]</code>. Es. \"<code>Ogni volta che Utente Registrato, allora Invia Email di Benvenuto</code>\".</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#173-le-fasi-di-un-workshop-di-event-storming-mappiamo-where-should-i-be","title":"17.3. Le Fasi di un Workshop di Event Storming: Mappiamo \"Where Should I Be?\"","text":"<p>L'Event Storming non \u00e8 una sessione caotica, ma un processo strutturato in fasi, ognuna con un obiettivo specifico. Simuliamo un workshop per la nostra applicazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#fase-1-big-picture-la-tempesta-di-eventi-solo-post-it-arancioni","title":"Fase 1: Big Picture - La Tempesta di Eventi (Solo Post-it Arancioni)","text":"<ul> <li> <p>Obiettivo: Generare una comprensione di alto livello del dominio, senza preoccuparsi dei dettagli.</p> </li> <li> <p>Processo:</p> </li> </ul> <p>1. Il facilitatore riunisce tutti davanti alla superficie di modellazione vuota.</p> <p>2. La regola \u00e8 semplice: \"Per i prossimi 15 minuti, chiunque pu\u00f2 scrivere su un post-it arancione qualsiasi evento di dominio che gli viene in mente relativo alla nostra applicazione e attaccarlo al muro\".</p> <p>3. Inizia la \"tempesta\". I partecipanti scrivono e attaccano post-it senza un ordine preciso: <code>Utente Registrato</code>, <code>Viaggio Creato</code>, <code>Suggerimento Generato dall'AI</code>, <code>Tappa Aggiunta al Viaggio</code>, <code>Abbonamento Premium Acquistato</code>, <code>Password Reimpostata</code>, <code>Recensione Pubblicata</code>, <code>Viaggio Condiviso</code>.</p> <p>4. Il facilitatore fa rispettare la regola del tempo passato. Se qualcuno scrive \"Pianificare Viaggio\", viene corretto in \"Viaggio Pianificato\".</p> <p>5. Dopo la tempesta iniziale, il gruppo collabora per rimuovere i duplicati e tentare di ordinare gli eventi su una linea temporale approssimativa da sinistra a destra.</p> <p>Il risultato \u00e8 una prima, grezza narrazione del flusso di business, vista attraverso gli occhi degli esperti.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#fase-2-enforce-the-process-aggiungere-le-cause-comandi-e-attori","title":"Fase 2: Enforce the Process - Aggiungere le Cause (Comandi e Attori)","text":"<ul> <li> <p>Obiettivo: Capire cosa scatena ogni evento.</p> </li> <li> <p>Processo: Il facilitatore si sposta lungo la timeline e, per ogni evento arancione, chiede al gruppo: \"Cosa ha causato questo evento?\".</p> </li> </ul> <p>- Per l'evento <code>Viaggio Creato</code> (arancione), la causa \u00e8 il comando <code>Crea Viaggio</code> (blu).</p> <p>- Chi ha eseguito questo comando? Un <code>Utente</code> (un piccolo post-it giallo per l'attore).</p> <p>- Quale informazione ha visto l'utente per poter eseguire questo comando? La <code>Dashboard dei Viaggi</code> (verde).</p> <p>- Si procede cos\u00ec per tutti gli eventi, aggiungendo post-it blu e verdi, e iniziando a vedere le interazioni utente-sistema.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#fase-3-identificare-gli-aggregati-trovare-i-sostantivi-post-it-gialli","title":"Fase 3: Identificare gli Aggregati - Trovare i Sostantivi (Post-it Gialli)","text":"<ul> <li> <p>Obiettivo: Scoprire i nostri aggregati di dominio.</p> </li> <li> <p>Processo: Ora che abbiamo delle catene <code>Comando -&gt; Evento</code>, chiediamo: \"Chi \u00e8 responsabile di eseguire questo comando e generare questo evento?\".</p> </li> </ul> <p>- I comandi <code>Crea Viaggio</code>, <code>Aggiungi Tappa</code>, <code>Completa Viaggio</code> vengono naturalmente raggruppati attorno a un post-it giallo pi\u00f9 grande: Viaggio.</p> <p>- I comandi <code>Registra Utente</code>, <code>Aggiorna Profilo</code> si raggruppano attorno a Utente.</p> <p>- I comandi <code>Genera Suggerimento</code> si raggruppano attorno a Motore di Suggerimenti.</p> <p>Questo \u00e8 il momento \"Aha!\" del workshop. I cluster che si formano spontaneamente sulla parete rappresentano i nostri candidati Aggregati. Lo spazio vuoto tra un cluster e l'altro \u00e8 un forte indicatore di un confine.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#fase-4-identificare-i-bounded-context-disegnare-i-confini","title":"Fase 4: Identificare i Bounded Context - Disegnare i Confini","text":"<ul> <li> <p>Obiettivo: Formalizzare i confini strategici del nostro sistema.</p> </li> <li> <p>Processo:</p> </li> </ul> <p>1. Facciamo un passo indietro e osserviamo l'intera parete.</p> <p>2. Cerchiamo le \"fratture\" naturali nel modello. Dove cambia il linguaggio? Dove i cluster di aggregati sembrano parlare di cose diverse?</p> <p>3. Noteremo che il gruppo di post-it relativi a <code>Utente</code>, <code>Password</code>, <code>Registrazione</code> \u00e8 un mondo a s\u00e9.</p> <p>4. Il gruppo relativo a <code>Viaggio</code>, <code>Tappa</code>, <code>Luogo</code> \u00e8 un altro mondo, il nostro core domain.</p> <p>5. Il gruppo relativo a <code>Suggerimento</code>, <code>Prompt AI</code> e l'interazione con il sistema esterno <code>API OpenAI</code> (viola) \u00e8 un terzo mondo.</p> <p>6. Con un pennarello, disegniamo fisicamente delle linee sulla parete per separare questi gruppi.</p> <p>7. Diamo un nome a ogni area delimitata, usando il Linguaggio Ubiquo che \u00e8 emerso: Identity &amp; Access Context, Trip Planning Context, Suggestions Context.</p> <p>Abbiamo appena scoperto i nostri Bounded Context, non basandoci sulla tecnologia, ma direttamente dalla narrazione del business.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#174-dal-workshop-al-codice-tradurre-la-mappa","title":"17.4. Dal Workshop al Codice: Tradurre la Mappa","text":"<p>L'output di un Event Storming non \u00e8 solo una parete colorata, \u00e8 un vero e proprio blueprint per il nostro design software:</p> <ul> <li> <p>I Bounded Context (le aree disegnate) diventano i nostri microservizi o i moduli di alto livello della nostra applicazione.</p> </li> <li> <p>Gli Aggregati (i post-it gialli) diventano le nostre <code>struct</code> Aggregate Root nel codice Go.</p> </li> <li> <p>I Comandi (blu) diventano i metodi pubblici sui nostri aggregati e sui nostri Application Services.</p> </li> <li> <p>Gli Eventi di Dominio (arancioni) diventano le <code>struct</code> che pubblicheremo, ideali per un'architettura CQRS o event-driven.</p> </li> <li> <p>Le Policy (rosa) diventano i nostri Event Handler asincroni.</p> </li> <li> <p>I Read Models (verdi) diventano i DTO e le viste che i nostri endpoint API restituiranno al frontend.</p> </li> <li> <p>Il Linguaggio Ubiquo \u00e8 letteralmente scritto sui post-it. Abbiamo creato un primo glossario condiviso e validato da tutto il team.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#175-consigli-pratici-e-errori-da-evitare","title":"17.5. Consigli Pratici e Errori da Evitare","text":"<ul> <li> <p>\u2705 Ottenere le persone giuste: Un Event Storming senza esperti di dominio \u00e8 inutile. La loro conoscenza \u00e8 il carburante del workshop.</p> </li> <li> <p>\u2705 Usare uno spazio illimitato: La creativit\u00e0 ha bisogno di spazio. Un muro lungo o una lavagna virtuale infinita sono essenziali.</p> </li> <li> <p>\u2705 Il facilitatore \u00e8 cruciale: Deve guidare il processo, fare le domande giuste e mantenere la conversazione focalizzata sul business, non sulla tecnologia.</p> </li> <li> <p>\u274c Non discutere di tecnologia: \"Useremo PostgreSQL o DynamoDB?\" \u00e8 la domanda sbagliata in questa fase. L'Event Storming \u00e8 agnostico rispetto alla tecnologia.</p> </li> <li> <p>\u274c Non cercare la perfezione subito: L'inizio \u00e8 caotico per design. Abbracciate il caos iniziale; l'ordine emerger\u00e0.</p> </li> <li> <p>\u274c Non avere fretta: Un buon Event Storming pu\u00f2 richiedere da mezza giornata a pi\u00f9 giorni, a seconda della complessit\u00e0 del dominio. \u00c8 un investimento, non un costo.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#176-conclusioni-imparare-insieme-progettare-meglio","title":"17.6. Conclusioni: Imparare Insieme, Progettare Meglio","text":"<p>L'Event Storming \u00e8 una delle pratiche pi\u00f9 trasformative che un team possa adottare. Non \u00e8 solo un modo per raccogliere requisiti, ma una piattaforma per l'apprendimento collaborativo. Costringe sviluppatori ed esperti di business a costruire un linguaggio e una comprensione condivisi, mattone dopo mattone (o post-it dopo post-it).</p> <p>Fornisce un percorso chiaro e visuale per passare da un'idea di business astratta a una mappa concreta della nostra architettura software, basata sui confini naturali del dominio stesso.</p> <p>Ora che abbiamo scoperto i nostri Bounded Context, siamo pronti per l'ultimo passo della progettazione strategica: definire come questi contesti interagiranno tra loro. Questo \u00e8 l'argomento del prossimo capitolo, il Context Mapping.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-18-context-mapping","title":"Capitolo 18: Context Mapping","text":"<p>Nei capitoli precedenti, abbiamo compiuto il passo fondamentale dello \"zoom-out\". Abbiamo imparato a scomporre il nostro complesso dominio in Bounded Context (Capitolo 16) e abbiamo scoperto una tecnica potente come l'Event Storming (Capitolo 17) per identificare questi confini in modo collaborativo.</p> <p>Il risultato \u00e8 un'architettura che non \u00e8 pi\u00f9 un monolite informe, ma un arcipelago di \"isole\", ognuna con il proprio modello, il proprio linguaggio e la propria autonomia. Questa separazione \u00e8 un'enorme vittoria. Ma nessuna applicazione reale \u00e8 un insieme di isole disconnesse. Per fornire valore di business, questi contesti devono comunicare. Il <code>Trip Planning Context</code> deve sapere chi \u00e8 l'utente dall'<code>Identity &amp; Access Context</code>. Il <code>Suggestions Context</code> deve ricevere input dall'utente per generare proposte.</p> <p>Senza una guida, le integrazioni tra questi contesti possono diventare un groviglio caotico di dipendenze, un \"Grande Pasticcio di Fango Distribuito\". Per evitare questo, il DDD ci offre un ultimo, potente strumento strategico: il Context Mapping (Mappatura dei Contesti).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#181-cose-una-context-map","title":"18.1. Cos'\u00e8 una Context Map? \ud83d\uddfa\ufe0f","text":"<p>Definizione: Una Context Map \u00e8 un documento o un diagramma che visualizza le relazioni e i modelli di integrazione tra i diversi Bounded Context di un sistema. \u00c8 la \"mappa politica\" del nostro panorama software.</p> <p>Se i Bounded Context sono le nazioni del nostro mondo software, la Context Map \u00e8 l'atlante che mostra:</p> <ul> <li> <p>I confini tra le nazioni.</p> </li> <li> <p>Le rotte commerciali (le API e i flussi di eventi).</p> </li> <li> <p>I trattati diplomatici (i contratti e le responsabilit\u00e0 tra i team).</p> </li> <li> <p>Le relazioni di potere (chi dipende da chi).</p> </li> </ul> <p>L'obiettivo di una Context Map non \u00e8 solo documentare le integrazioni esistenti, ma progettarle intenzionalmente. Ci costringe a porci domande strategiche: \"Qual \u00e8 il modo migliore per far parlare il Contesto A con il Contesto B? Quali sono i costi e i benefici di un'integrazione stretta rispetto a una lasca?\".</p> <p>Per la nostra applicazione \"Where Should I Be?\", una prima bozza di mappa potrebbe assomigliare a questa:</p> <p>Da cambiare con una foto</p> <pre><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+--------------------------+\n\n\n\n\u00a0\u00a0[Frontend SvelteKit] --(REST/API)--&gt; | \u00a0 API Gateway\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+-----------+--------------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+----------------------------------------+------------------------------------------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| (gRPC) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | (gRPC) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v\n\n\n\n+----------------------+ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +-------------------------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +---------------------+\n\n\n\n| Identity &amp; Access\u00a0 \u00a0 | --(OHS)--&gt;| \u00a0 Trip Planning \u00a0 \u00a0 \u00a0 \u00a0 | --(ACL, Conformist)--&gt; | Suggestions \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n| Context\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | \u00a0 Context \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Context \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n| (Team A - Supplier)\u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | \u00a0 (Team B - Customer) \u00a0 |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | (Team B)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |\n\n\n\n+----------------------+ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +-------------------------+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 +----------+----------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| (ACL, Conformist)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+---------------------+\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0 \u00a0 OpenAI API \u00a0 \u00a0 \u00a0 |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| (External System) \u00a0 |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+---------------------+\n</code></pre> <p>Questa mappa, anche se semplice, \u00e8 ricca di informazioni strategiche. Usa termini come <code>OHS</code>, <code>ACL</code>, <code>Conformist</code> che rappresentano specifici pattern di integrazione. Esploriamoli in dettaglio.\u00a0</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#182-i-pattern-di-mappatura-dei-contesti","title":"18.2. I Pattern di Mappatura dei Contesti","text":"<p>Eric Evans, nel suo libro, ha definito un catalogo di pattern per descrivere le relazioni tra contesti. Li possiamo raggruppare in categorie logiche.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#a-pattern-di-collaborazione-stretta","title":"A. Pattern di Collaborazione Stretta","text":"<p>Questi pattern si usano quando due contesti sono legati a doppio filo dal successo del business.</p> <p>\ud83e\udd1d Partnership</p> <ul> <li> <p>Descrizione: Due team, che gestiscono due contesti diversi, devono collaborare intensamente per realizzare una funzionalit\u00e0. Il successo di uno dipende strettamente dal successo dell'altro. Non c'\u00e8 una chiara relazione upstream/downstream; sono partner alla pari.</p> </li> <li> <p>Quando usarlo: Quando la logica di business attraversa intrinsecamente i confini dei due contesti e richiede un coordinamento continuo.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": Immaginiamo di aggiungere un <code>Booking Context</code> per le prenotazioni. Il <code>Trip Planning Context</code> e il <code>Booking Context</code> sarebbero in una relazione di Partnership. \u00c8 inutile pianificare un viaggio se non si possono prenotare le attivit\u00e0, ed \u00e8 impossibile prenotare senza un piano. I due team dovrebbero definire le API di integrazione insieme, con riunioni frequenti e test di integrazione condivisi.</p> </li> <li> <p>Costo: Alta frizione comunicativa, richiede un grande sforzo di coordinamento.</p> </li> </ul> <p>** Shared Kernel (Nucleo Condiviso)**</p> <ul> <li> <p>Descrizione: \u00c8 il pattern di integrazione pi\u00f9 forte e pericoloso. I due team si accordano per condividere un piccolo sottoinsieme del modello di dominio (codice, librerie, talvolta anche tabelle del database).</p> </li> <li> <p>Quando usarlo: Con estrema cautela! Da usare solo per parti del dominio molto stabili e veramente generiche.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": Potremmo decidere di creare una libreria Go condivisa, <code>internal/kernel</code>, che contiene solo le definizioni dei nostri ID tipizzati (<code>identity.TripID</code>, <code>identity.UserID</code>) e magari qualche Value Object fondamentale. Poich\u00e9 questi tipi sono stabili e usati da pi\u00f9 contesti, condividerli potrebbe ridurre la duplicazione.</p> </li> <li> <p>Costo: Altissimo accoppiamento. Qualsiasi modifica allo Shared Kernel richiede il coordinamento e il re-deployment di tutti i contesti che lo utilizzano. Va contro il principio di autonomia dei microservizi. Usatelo con parsimonia, se non mai.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#b-pattern-upstreamdownstream","title":"B. Pattern Upstream/Downstream","text":"<p>Questi sono i pattern pi\u00f9 comuni e descrivono una relazione di dipendenza, dove un contesto downstream (a valle) consuma le funzionalit\u00e0 di un contesto upstream (a monte).</p> <p>\ud83d\udc51 Customer-Supplier (Cliente-Fornitore)</p> <ul> <li> <p>Descrizione: Una relazione di potere bilanciata. Il team downstream \u00e8 un \"Cliente\" che ha esigenze specifiche. Il team upstream \u00e8 il \"Fornitore\" che cerca di soddisfare queste esigenze. Il cliente pu\u00f2 influenzare la roadmap del fornitore.</p> </li> <li> <p>Quando usarlo: \u00c8 la relazione ideale tra team interni a una stessa organizzazione.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": La relazione tra <code>Trip Planning</code> (Cliente) e <code>Identity &amp; Access</code> (Fornitore) \u00e8 di tipo Customer-Supplier. Il team di Planning ha bisogno di sapere il livello di abbonamento di un utente. Pu\u00f2 quindi \"commissionare\" al team Identity un endpoint API specifico che fornisca questa informazione in un formato comodo. Il team Identity dar\u00e0 priorit\u00e0 a questa richiesta per sbloccare il team a valle.</p> </li> </ul> <p>** Conformist (Conformista)**</p> <ul> <li> <p>Descrizione: Una relazione di potere sbilanciata. Il team downstream si adatta completamente e senza discutere al modello del team upstream. Non ha alcun potere per influenzarne le decisioni.</p> </li> <li> <p>Quando usarlo: Quando si integra con un sistema esterno o legacy su cui non si ha alcun controllo, o quando \u00e8 pi\u00f9 conveniente adattarsi che negoziare.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": Il nostro <code>Suggestions Context</code> \u00e8 un Conformista nei confronti dell'API di OpenAI. Non possiamo chiedere a OpenAI di cambiare il formato della loro risposta per farci un favore. Dobbiamo accettare il loro modello cos\u00ec com'\u00e8 e adattare il nostro codice.</p> </li> </ul> <p>\ud83d\udee1\ufe0f Anti-Corruption Layer (ACL - Strato Anti-Corruzione)</p> <ul> <li> <p>Descrizione: Questo non \u00e8 un pattern di relazione, ma un pattern di implementazione sul lato downstream. \u00c8 un meccanismo di difesa. L'ACL \u00e8 un componente software (un adattatore, un facade) che traduce il modello del contesto upstream in un modello pi\u00f9 appropriato per il proprio dominio, proteggendolo da influenze esterne \"corrotte\" o scomode.</p> </li> <li> <p>Quando usarlo: Quasi sempre in una relazione Conformist! \u00c8 essenziale per mantenere l'integrit\u00e0 del proprio modello di dominio.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": Quando il <code>Suggestions Context</code> riceve una risposta complessa e magari disordinata dall'API di OpenAI, non permette a quella struttura dati di \"inquinare\" il suo dominio. Ha un adattatore, l'ACL, il cui unico compito \u00e8 prendere quella risposta grezza e tradurla nel nostro pulito oggetto di dominio <code>PropostaDiItinerario</code>.</p> </li> </ul> <p>Go</p> <p>```go</p> <p>// internal/adapters/gateway/openai/translator.go</p> <p>package openai</p> <p>// La risposta grezza dell'API esterna</p> <p>type OpenAIChatCompletion struct { / ... campi complessi ... / }</p> <p>// Il nostro pulito oggetto di dominio</p> <p>import \"where-should-i-be/internal/domain/suggestions\"</p> <p>// L'ACL \u00e8 questo traduttore.</p> <p>type Translator struct {}</p> <p>func (t Translator) ToItineraryProposal(rawResponse OpenAIChatCompletion) (suggestions.ItineraryProposal, error) {</p> <p>// Logica di parsing e traduzione per mappare</p> <p>// la risposta grezza al nostro modello di dominio.</p> <p>// ...</p> <p>return &amp;proposal, nil</p> <p>}</p> <p>```</p> <p>\ud83c\udfdb\ufe0f Open Host Service (OHS - Servizio Pubblico Aperto)</p> <ul> <li> <p>Descrizione: Il contesto upstream progetta e pubblica un'API pensata per essere un \"servizio pubblico\" per l'intera organizzazione. L'API \u00e8 ben documentata, stabile, e cerca di essere il pi\u00f9 generica possibile per servire un'ampia gamma di consumatori.</p> </li> <li> <p>Quando usarlo: Per contesti che forniscono funzionalit\u00e0 fondamentali e trasversali.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": L'<code>Identity &amp; Access Context</code> dovrebbe esporre un Open Host Service. Qualsiasi nuovo servizio che aggiungeremo in futuro avr\u00e0 probabilmente bisogno di autenticare un utente o di recuperarne l'ID. L'API di questo contesto (che sia REST o gRPC) deve essere trattata come un prodotto pubblico e stabile.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#c-pattern-di-separazione","title":"C. Pattern di Separazione","text":"<p>\ud83d\udea7 Separate Ways (Vie Separate)</p> <ul> <li> <p>Descrizione: Il pattern pi\u00f9 semplice: i due contesti non comunicano affatto. Non c'\u00e8 integrazione.</p> </li> <li> <p>Quando usarlo: Quando non c'\u00e8 alcuna ragione di business per cui due contesti debbano interagire.</p> </li> <li> <p>Esempio in \"Where Should I Be?\": Se avessimo un contesto per la gestione del blog aziendale (<code>ContentContext</code>), questo vivrebbe probabilmente in Separate Ways rispetto al <code>Trip Planning Context</code>. L'integrazione tra loro non \u00e8 necessaria e aggiungerebbe solo complessit\u00e0.</p> </li> <li> <p>Costo: Zero costi di integrazione. A volte, la migliore integrazione \u00e8 nessuna integrazione.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#183-creare-e-mantenere-una-context-map","title":"18.3. Creare e Mantenere una Context Map","text":"<p>Una Context Map non \u00e8 un artefatto da creare una volta e poi dimenticare. \u00c8 un documento vivo che guida le decisioni architetturali.</p> <ul> <li> <p>Creazione: Il primo draft di una Context Map \u00e8 un output naturale di un workshop di Event Storming. Le linee che disegniamo sulla parete per separare i contesti sono i confini sulla nostra mappa.</p> </li> <li> <p>Formato: Pu\u00f2 essere un semplice diagramma su una pagina wiki, un file nella documentazione del progetto, o un diagramma creato con strumenti come C4 Model. L'importante \u00e8 che sia visibile e accessibile a tutti i team.</p> </li> <li> <p>Manutenzione: La mappa dovrebbe essere rivista periodicamente (es. ogni trimestre) o ogni volta che si propone una nuova integrazione tra servizi. Chiedersi \"Quale pattern di mapping useremo qui?\" dovrebbe diventare una prassi standard.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#184-conclusioni-la-mappa-per-il-successo-strategico","title":"18.4. Conclusioni: La Mappa per il Successo Strategico","text":"<p>Se i Bounded Context ci aiutano a dividere per regnare (divide et impera), il Context Mapping ci insegna come governare i regni che abbiamo creato. \u00c8 il passo finale e cruciale della progettazione strategica.</p> <p>Senza una mappa esplicita, le integrazioni tendono a diventare un groviglio di dipendenze accidentali. Con una mappa, ogni connessione \u00e8 intenzionale, ogni relazione \u00e8 definita e ogni team conosce le proprie responsabilit\u00e0. Questo ci permette di:</p> <ul> <li> <p>Scegliere la giusta strategia di integrazione per ogni situazione.</p> </li> <li> <p>Gestire le dipendenze politiche e organizzative tra i team.</p> </li> <li> <p>Prevenire l'accoppiamento indesiderato e proteggere l'autonomia dei nostri servizi.</p> </li> <li> <p>Costruire un ecosistema software che non \u00e8 solo un insieme di parti, ma un tutto coerente e collaborativo.</p> </li> </ul> <p>Con questo capitolo, si conclude la nostra immersione nella progettazione strategica. Abbiamo imparato a vedere il \"quadro generale\". Nelle prossime parti del libro, torneremo a fare zoom-in, armati di questa nuova visione, per implementare i dettagli tecnici, come le API e la persistenza, in modo ancora pi\u00f9 robusto e consapevole.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-v-integrazione-e-api-robuste","title":"Parte V: Integrazione e API Robuste","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-19-openapi-31-il-contratto-tra-frontend-e-backend","title":"Capitolo 19: OpenAPI 3.1: Il Contratto tra Frontend e Backend","text":"<p>Nelle parti precedenti, abbiamo dedicato un'enorme quantit\u00e0 di energia a progettare e costruire il nostro backend. Abbiamo un dominio ricco e protetto da una Clean Architecture, con confini chiari tra i Bounded Context. Il nostro sistema interno \u00e8 un'opera di ingegneria di cui essere fieri. Ma ora, dobbiamo esporlo al mondo. Dobbiamo creare un'interfaccia, un'API, che permetta al nostro frontend SvelteKit di interagire con tutta la potenza che abbiamo costruito.</p> <p>Come gestiamo questa interfaccia critica? In molti progetti, la risposta \u00e8: \"in modo caotico\". Un developer backend crea un endpoint, ne comunica i dettagli su Slack o a voce, e il developer frontend prova a usarlo. Quando qualcosa cambia, tutto si rompe. Questo approccio informale \u00e8 una delle maggiori fonti di frizione, bug e ritardi nello sviluppo software.</p> <p>In questo capitolo, introdurremo un approccio professionale e disciplinato: il design API-first. Impareremo a usare la Specifica OpenAPI (OAS) non solo come strumento di documentazione, ma come un vero e proprio contratto legalmente vincolante tra il frontend e il backend. \u00c8 la singola fonte di verit\u00e0 che guider\u00e0 lo sviluppo, abiliter\u00e0 l'automazione e garantir\u00e0 una collaborazione fluida.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#191-il-problema-deriva-delle-api-e-accordi-verbali","title":"19.1. Il Problema: Deriva delle API e Accordi Verbali","text":"<p>Senza un contratto formale, il confine tra frontend e backend \u00e8 governato da accordi verbali e documentazione sparsa che diventa inevitabilmente obsoleta. Questo porta a problemi noti come API Drift (deriva dell'API), dove l'implementazione effettiva dell'API si allontana nel tempo da quella che era la sua specifica originale.</p> <p>Consideriamo un dialogo tipico:</p> <ul> <li> <p>Backend Dev: \"Ho creato l'endpoint <code>POST /trips</code>. Manda un JSON con <code>name</code>, <code>startDate</code> e <code>endDate</code>.\"</p> </li> <li> <p>Frontend Dev: (Implementa la chiamata).</p> </li> <li> <p>(Due settimane dopo) Backend Dev: (Per coerenza con il database) \"Ho rinominato <code>startDate</code> in <code>start_date</code>.\" (Dimentica di comunicarlo).</p> </li> <li> <p>Frontend Dev: \"L'applicazione \u00e8 rotta! La creazione dei viaggi non funziona pi\u00f9.\"</p> </li> </ul> <p>Questa scenetta comica \u00e8 la triste realt\u00e0 di molti team. Il problema non \u00e8 tecnico, ma di processo e comunicazione. La soluzione \u00e8 smettere di parlare di API in modo informale e iniziare a usare un linguaggio formale, preciso e leggibile sia dagli esseri umani che dalle macchine: la Specifica OpenAPI.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#192-cose-la-specifica-openapi-oas","title":"19.2. Cos'\u00e8 la Specifica OpenAPI (OAS)? \ud83d\udcdc","text":"<p>Definizione: La Specifica OpenAPI (precedentemente nota come Swagger) \u00e8 uno standard aperto, agnostico rispetto al linguaggio, per descrivere, documentare e consumare API RESTful. Definisce un formato (YAML o JSON) che permette a macchine e umani di comprendere le capacit\u00e0 di un servizio senza accedere al codice sorgente.</p> <p>Un file OpenAPI \u00e8 il contratto. Descrive ogni singolo aspetto della nostra API:</p> <ul> <li> <p>Endpoint disponibili: I percorsi (es. <code>/users/{userId}/trips</code>) e i metodi HTTP (GET, POST, DELETE, etc.).</p> </li> <li> <p>Parametri: I parametri di percorso (<code>{userId}</code>), di query, di header.</p> </li> <li> <p>Body delle Richieste: La struttura esatta dei dati inviati con le richieste POST o PUT.</p> </li> <li> <p>Risposte: Tutte le possibili risposte che un endpoint pu\u00f2 restituire, inclusi i codici di stato (200, 201, 404, 500) e la struttura dei dati di risposta.</p> </li> <li> <p>Schemi di Sicurezza: Come l'API \u00e8 protetta (es. JWT Bearer Token, OAuth2), un punto che si lega direttamente al nostro Capitolo 4 su AWS Cognito.</p> </li> <li> <p>Schemi dei Dati (Schemas): La definizione riutilizzabile di tutti gli oggetti dati scambiati (es. <code>Trip</code>, <code>User</code>, <code>ErrorResponse</code>).</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#193-progettare-il-contratto-per-where-should-i-be","title":"19.3. Progettare il Contratto per \"Where Should I Be?\"","text":"<p>Adottiamo un approccio API-first: progettiamo il contratto in un file <code>api.yaml</code> prima di scrivere una singola riga di codice di implementazione. Questo costringe i team a concordare il \"cosa\" prima di perdersi nel \"come\".</p> <p>Creiamo una porzione della nostra specifica per l'endpoint <code>GET /trips/{tripId}</code>.</p> <p>YAML</p> <pre><code># api.yaml\n\n\n\nopenapi: 3.1.0 # Specifichiamo la versione dello standard\n\n\n\ninfo:\n\n\n\n\u00a0\u00a0title: \"Where Should I Be? API\"\n\n\n\n\u00a0\u00a0version: \"1.0.0\"\n\n\n\n\u00a0\u00a0description: API per la pianificazione di viaggi intelligenti.\n\n\n\n\n\nservers:\n\n\n\n\u00a0\u00a0- url: https://api.whereshouldibe.com/v1\n\n\n\n\u00a0\u00a0\u00a0\u00a0description: Production Server\n\n\n\n\u00a0\u00a0- url: http://localhost:8080/v1\n\n\n\n\u00a0\u00a0\u00a0\u00a0description: Local Development Server\n\n\n\n\n\npaths:\n\n\n\n\u00a0\u00a0/trips/{tripId}:\n\n\n\n\u00a0\u00a0\u00a0\u00a0get:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0summary: \"Recupera i dettagli di un viaggio specifico\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tags:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Trips\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0security:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- bearerAuth: [] # Applichiamo lo schema di sicurezza definito sotto\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parameters:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: tripId\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in: path\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required: true\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"L'ID del viaggio da recuperare\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format: uuid\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0responses:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'200':\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"Dettagli del viaggio recuperati con successo.\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0application/json:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ref: '#/components/schemas/TripDetail' # Riferimento a uno schema riutilizzabile\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'401':\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"Non autorizzato. Il token JWT \u00e8 mancante o non valido.\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0application/json:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ref: '#/components/schemas/Error'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'404':\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"Viaggio non trovato.\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0application/json:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ref: '#/components/schemas/Error'\n\n\n\n\n\ncomponents:\n\n\n\n\u00a0\u00a0schemas:\n\n\n\n\u00a0\u00a0\u00a0\u00a0TripDetail:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: object\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0properties:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format: uuid\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0example: \"Weekend a Roma\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum: [\"Planning\", \"InProgress\", \"Completed\"]\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0startDate:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format: date\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endDate:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format: date\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stops:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: array\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0items:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ref: '#/components/schemas/Stop'\n\n\n\n\u00a0\u00a0\u00a0\u00a0Stop:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: object\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0properties:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeName:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0example: \"Colosseo\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0day:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: integer\n\n\n\n\u00a0\u00a0\u00a0\u00a0Error:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: object\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0properties:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0code:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: string\n\n\n\n\u00a0\u00a0securitySchemes:\n\n\n\n\u00a0\u00a0\u00a0\u00a0bearerAuth:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: http\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scheme: bearer\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bearerFormat: JWT\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"Autenticazione tramite JWT token ottenuto da Cognito.\"\n</code></pre> <p>Questo file YAML \u00e8 ora la nostra fonte di verit\u00e0. \u00c8 chiaro, leggibile e, soprattutto, utilizzabile da strumenti automatici.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#194-la-superpotenza-dellecosistema-openapi","title":"19.4. La Superpotenza dell'Ecosistema OpenAPI \ud83d\ude80","text":"<p>Un file YAML di per s\u00e9 non \u00e8 magico. La sua vera potenza risiede nell'enorme ecosistema di strumenti che lo possono consumare.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#1-documentazione-interattiva-automatica","title":"1. Documentazione Interattiva Automatica","text":"<p>Dimenticate le pagine Confluence scritte a mano e destinate a diventare obsolete. Con strumenti come Swagger UI o Redoc, possiamo generare automaticamente una documentazione API interattiva e bellissima. Gli sviluppatori (sia frontend che backend) possono esplorare gli endpoint, vedere gli schemi dei dati e persino provare le API direttamente dal browser.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#2-generazione-di-codice-codegen-la-chiave-dellautomazione","title":"2. Generazione di Codice (Codegen): La Chiave dell'Automazione","text":"<p>Questo \u00e8 il vantaggio pi\u00f9 grande. Dal nostro singolo file <code>api.yaml</code>, possiamo generare codice boilerplate per entrambi i lati della comunicazione, garantendo che siano sempre perfettamente sincronizzati.</p> <p>Per il Backend (Go):</p> <p>Useremo una libreria come oapi-codegen. Eseguendo un comando, possiamo generare:</p> <ul> <li> <p>Tipi Go: <code>struct</code> Go per <code>TripDetail</code>, <code>Stop</code>, <code>Error</code>, ecc. Non dovremo pi\u00f9 scriverle a mano, rischiando errori di battitura o disallineamenti.</p> </li> <li> <p>Boilerplate del Server: <code>oapi-codegen</code> pu\u00f2 generare un'interfaccia Go che i nostri <code>http.Handler</code> devono implementare. Questo ci forza a implementare ogni singolo endpoint definito nella specifica, con la firma corretta. Il contratto \u00e8 ora applicato a tempo di compilazione!</p> </li> </ul> <p>Per il Frontend (SvelteKit con TypeScript):</p> <p>Useremo una libreria come openapi-typescript-codegen. Eseguendo un comando, questo strumento legge lo stesso file api.yaml e genera:</p> <ul> <li> <p>Interfacce TypeScript: <code>interface TripDetail { ... }</code>.</p> </li> <li> <p>Un Client API Completamente Tipizzato: Funzioni come <code>getTripById(tripId: string): Promise&lt;TripDetail&gt;</code> che incapsulano la logica <code>fetch</code>, la gestione degli header e la serializzazione/deserializzazione dei dati. Il developer frontend ottiene sicurezza dei tipi e autocompletamento per tutte le chiamate API, eliminando un'intera classe di bug.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#3-testing-e-mocking","title":"3. Testing e Mocking","text":"<p>La specifica pu\u00f2 essere usata per:</p> <ul> <li> <p>Generare server mock: Il team frontend pu\u00f2 lavorare contro un server fittizio che rispetta il contratto, anche se il backend non \u00e8 ancora pronto.</p> </li> <li> <p>Contract Testing: Eseguire test automatici che verificano che l'implementazione del backend sia conforme al contratto definito nel file OpenAPI.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#195-il-flusso-di-lavoro-api-first-in-pratica","title":"19.5. Il Flusso di Lavoro API-First in Pratica","text":"<p>Il nostro ciclo di sviluppo per nuove funzionalit\u00e0 cambia radicalmente:</p> <ol> <li> <p>Progettazione del Contratto: Backend e frontend dev discutono una nuova feature e la prima cosa che fanno \u00e8 modificare e concordare il file <code>api.yaml</code>. La Pull Request contiene le modifiche al contratto, che diventa oggetto di revisione.</p> </li> <li> <p>Generazione del Codice: Una volta che il contratto \u00e8 approvato e unito al ramo principale, una pipeline CI (o uno script locale) esegue gli strumenti di <code>codegen</code> per aggiornare il codice boilerplate sia in Go che in TypeScript.</p> </li> <li> <p>Sviluppo in Parallelo: A questo punto, i due team possono lavorare in parallelo con la certezza che le interfacce non cambieranno inaspettatamente.</p> </li> </ol> <p>- Il backend developer deve \"solo\" implementare la logica di business dietro le interfacce generate.</p> <p>- Il frontend developer usa il client tipizzato per costruire la UI.</p> <ol> <li>Integrazione Semplificata: Quando entrambi hanno finito, la fase di integrazione \u00e8 molto pi\u00f9 fluida, perch\u00e9 hanno costruito le loro parti contro lo stesso identico stampo.</li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#196-conclusioni-il-contratto-come-pilastro-della-collaborazione","title":"19.6. Conclusioni: Il Contratto come Pilastro della Collaborazione","text":"<p>La Specifica OpenAPI, quando usata in un processo API-first, cessa di essere un semplice strumento di \"documentazione\" e diventa il pilastro su cui si fonda la collaborazione tra team e servizi.</p> <ul> <li> <p>Crea una Singola Fonte di Verit\u00e0: Elimina ambiguit\u00e0 e fraintendimenti.</p> </li> <li> <p>Abilita l'Automazione: Genera tipi, client e server, riducendo il codice boilerplate e gli errori manuali.</p> </li> <li> <p>Facilita lo Sviluppo in Parallelo: Disaccoppia i cicli di vita dello sviluppo frontend e backend.</p> </li> <li> <p>Applica il Contratto: Garantisce, a tempo di compilazione, che l'implementazione sia conforme al design.</p> </li> </ul> <p>In un'architettura moderna e distribuita, dove i confini tra i servizi sono le API stesse, gestirle con questo livello di disciplina non \u00e8 un lusso, ma una necessit\u00e0 per costruire sistemi scalabili, robusti e manutenibili.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-20-gestione-della-concorrenza-e-delle-sessioni-http-in-go","title":"Capitolo 20: Gestione della Concorrenza e delle Sessioni HTTP in Go","text":"<p>Nei capitoli precedenti, abbiamo definito il contratto della nostra API con OpenAPI. Ora siamo pronti per implementare il server HTTP che dar\u00e0 vita a questo contratto. Un server web moderno, per definizione, \u00e8 un sistema concorrente: deve gestire centinaia, se non migliaia, di richieste simultanee in modo efficiente e sicuro.</p> <p>Fortunatamente, il linguaggio Go \u00e8 stato progettato con la concorrenza come una cittadina di prima classe. Il suo modello basato su goroutine e canali ci fornisce strumenti incredibilmente potenti per costruire server ad alte prestazioni. Tuttavia, con grande potere deriva una grande responsabilit\u00e0. Una gestione incauta della concorrenza pu\u00f2 portare a bug sottili e devastanti, come le race condition.</p> <p>In questo capitolo, esploreremo in profondit\u00e0 il modello di concorrenza del server <code>net/http</code> di Go. Impareremo a scrivere handler sicuri, a gestire il ciclo di vita di una richiesta con <code>context.Context</code>, e implementeremo un sistema di gestione delle sessioni moderno e stateless, basato sui JWT che abbiamo introdotto nel capitolo sulla sicurezza.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#201-la-magia-del-server-nethttp-una-goroutine-per-richiesta","title":"20.1. La Magia del Server <code>net/http</code>: Una Goroutine per Richiesta","text":"<p>Quando si avvia un server web in Go con una semplice chiamata a <code>http.ListenAndServe</code>, accade qualcosa di meraviglioso e potente sotto il cofano. Per ogni singola richiesta HTTP in arrivo, il pacchetto <code>net/http</code> avvia automaticamente una nuova goroutine dedicata a servire quella richiesta.</p> <p>Una goroutine \u00e8 un \"thread\" estremamente leggero, gestito dal runtime di Go e non direttamente dal sistema operativo. Avviare una goroutine \u00e8 un'operazione rapidissima e a basso consumo di memoria (pochi kilobyte), il che rende possibile per un server Go gestire decine di migliaia di connessioni concorrenti sulla stessa macchina.</p> <p>Questo modello ha un'implicazione profonda per noi sviluppatori: il nostro codice degli handler HTTP sar\u00e0 sempre eseguito in un contesto concorrente. Non dobbiamo gestire manualmente un pool di thread, ma dobbiamo essere estremamente consapevoli dei rischi che questa concorrenza comporta, in particolare il rischio di race condition.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-pericolo-nascosto-race-conditions","title":"Il Pericolo Nascosto: Race Conditions","text":"<p>Una race condition si verifica quando pi\u00f9 goroutine accedono a una risorsa condivisa e modificabile (una variabile, una mappa, una slice, una struct) contemporaneamente, e almeno una di queste scritture pu\u00f2 portare a uno stato corrotto o imprevedibile.</p> <p>Controesempio: Un Contatore Globale (NON FARE QUESTO)</p> <p>Immaginiamo di voler tenere un semplice contatore in memoria per il numero totale di richieste ricevute.</p> <p>Go</p> <pre><code>package main\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"fmt\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"net/http\"\n\n\n\n)\n\n\n\n\n\nvar counter int // Stato condiviso e modificabile\n\n\n\n\n\nfunc CounterHandler(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0counter++ // Accesso concorrente da pi\u00f9 goroutine! DATA RACE!\n\n\n\n\u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"Questa \u00e8 la richiesta numero %d\", counter)\n\n\n\n}\n\n\n\n\n\nfunc main() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/\", CounterHandler)\n\n\n\n\u00a0\u00a0\u00a0\u00a0http.ListenAndServe(\":8080\", nil)\n\n\n\n}\n</code></pre> <p>Se si esegue questo codice e lo si testa con uno strumento di benchmark che invia richieste concorrenti (come <code>ab</code> o <code>hey</code>), i risultati saranno imprevedibili. Alcuni incrementi potrebbero andare persi. Se si esegue il programma con il Race Detector integrato in Go (<code>go run -race .</code>), il runtime rilever\u00e0 e segnaler\u00e0 immediatamente la data race.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#202-pattern-per-la-sicurezza-nella-concorrenza","title":"20.2. Pattern per la Sicurezza nella Concorrenza","text":"<p>Come possiamo scrivere codice concorrente in modo sicuro? Go ci offre diversi strumenti.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-1-mutua-esclusione-con-syncmutex","title":"Pattern 1: Mutua Esclusione con <code>sync.Mutex</code>","text":"<p>Il modo pi\u00f9 classico per proteggere una risorsa condivisa \u00e8 usare un mutex (mutual exclusion lock). Un mutex garantisce che solo una goroutine alla volta possa entrare in una \"sezione critica\" di codice.</p> <p>Go</p> <pre><code>import (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"fmt\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"net/http\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"sync\" // Importiamo il pacchetto sync\n\n\n\n)\n\n\n\n\n\nvar (\n\n\n\n\u00a0\u00a0\u00a0\u00a0counter int\n\n\n\n\u00a0\u00a0\u00a0\u00a0mu\u00a0 \u00a0 \u00a0 sync.Mutex // Il nostro mutex\n\n\n\n)\n\n\n\n\n\nfunc SafeCounterHandler(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0mu.Lock() \u00a0 // Acquisiamo il lock. Tutte le altre goroutine si bloccano qui.\n\n\n\n\u00a0\u00a0\u00a0\u00a0counter++\n\n\n\n\u00a0\u00a0\u00a0\u00a0currentCount := counter\n\n\n\n\u00a0\u00a0\u00a0\u00a0mu.Unlock() // Rilasciamo il lock, permettendo ad altre goroutine di procedere.\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"Questa \u00e8 la richiesta numero %d\", currentCount)\n\n\n\n}\n</code></pre> <p>Questo codice \u00e8 ora sicuro. Tuttavia, l'uso eccessivo di mutex pu\u00f2 diventare un collo di bottiglia per le performance, poich\u00e9 serializza l'accesso alla risorsa.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-2-la-via-idiomatica-di-go-condividere-dati-comunicando","title":"Pattern 2: La Via Idiomatica di Go - Condividere Dati Comunicando","text":"<p>Una filosofia centrale in Go \u00e8: \"Non comunicare condividendo la memoria; condividi la memoria comunicando\". Questo si traduce nell'uso dei canali (channels) per orchestrare l'accesso a risorse condivise. Invece di avere pi\u00f9 goroutine che competono per un lock, si pu\u00f2 avere una singola goroutine che \"possiede\" la risorsa e le altre comunicano con essa tramite canali per richiedere operazioni. Questo pattern \u00e8 pi\u00f9 complesso e solitamente riservato a scenari specifici.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-3-la-soluzione-migliore-progettare-servizi-stateless","title":"Pattern 3: La Soluzione Migliore - Progettare Servizi Stateless","text":"<p>La soluzione pi\u00f9 efficace e robusta per evitare problemi di concorrenza \u00e8, ove possibile, eliminare del tutto lo stato condiviso e modificabile a livello di applicazione.</p> <p>Questo \u00e8 esattamente ci\u00f2 che la nostra Clean Architecture ci incoraggia a fare!</p> <ul> <li> <p>I nostri Application Services e Repository vengono istanziati una sola volta all'avvio dell'applicazione.</p> </li> <li> <p>Essi stessi sono stateless: non mantengono uno stato che cambia tra una richiesta e l'altra. Le loro dipendenze (come <code>*sql.DB</code>) sono progettate per essere usate in modo concorrente.</p> </li> <li> <p>Ogni richiesta, nella sua goroutine, riceve i dati di cui ha bisogno (es. dal body della richiesta o dal database), chiama i metodi stateless dei servizi e lavora su una \"copia\" dei dati specifica per quella transazione.</p> </li> </ul> <p>Grazie a questo design, la maggior parte del nostro codice \u00e8 naturalmente al sicuro dalle race condition, perch\u00e9 non c'\u00e8 memoria condivisa da proteggere.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#203-contextcontext-il-sistema-nervoso-di-una-richiesta","title":"20.3. <code>context.Context</code>: Il Sistema Nervoso di una Richiesta","text":"<p>Ogni richiesta HTTP in Go ha un ciclo di vita. Potrebbe completarsi con successo, andare in timeout, o essere annullata perch\u00e9 l'utente ha chiuso il browser. Il pacchetto <code>context</code> \u00e8 lo strumento standard e indispensabile per gestire questo ciclo di vita.</p> <p>Un <code>context.Context</code> \u00e8 un oggetto che trasporta deadline, segnali di cancellazione e altri valori legati a una richiesta attraverso i confini delle API e dei processi.</p> <p>Il server <code>net/http</code> crea un <code>Context</code> per ogni richiesta e lo rende disponibile tramite <code>r.Context()</code>. Dobbiamo passarlo esplicitamente attraverso tutti i livelli della nostra applicazione.</p> <p>Casi d'Uso Chiave:</p> <ol> <li> <p>Cancellazione (Cancellation): Se un utente chiude la connessione mentre stiamo eseguendo una query database molto lunga, il context verr\u00e0 \"annullato\". Il nostro <code>database/sql</code> driver, se scritto correttamente, rilever\u00e0 questo segnale (<code>ctx.Done()</code>) e interromper\u00e0 la query, rilasciando preziose risorse del database.</p> </li> <li> <p>Timeout: Possiamo usare <code>context.WithTimeout</code> per imporre una deadline a un'intera operazione. Se un caso d'uso non si completa entro, diciamo, 5 secondi, tutte le operazioni a valle (chiamate al DB, a servizi esterni) verranno annullate.</p> </li> <li> <p>Valori Scoped-Request: Il context \u00e8 il posto giusto per memorizzare dati che sono validi solo per la durata di una singola richiesta, come un ID di tracciamento per il logging, o l'ID dell'utente autenticato.</p> </li> </ol> <p>Go</p> <pre><code>// Esempio di middleware che aggiunge un valore al context\n\n\n\nfunc AuthMiddleware(next http.Handler) http.Handler {\n\n\n\n\u00a0\u00a0\u00a0\u00a0return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... logica per validare un token JWT ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userID := // ... estrae l'ID utente dal token ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Crea un nuovo context con l'ID utente e lo mette nella richiesta\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx := context.WithValue(r.Context(), \"userIDKey\", userID)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next.ServeHTTP(w, r.WithContext(ctx))\n\n\n\n\u00a0\u00a0\u00a0\u00a0})\n\n\n\n}\n\n\n\n\n\n// L'Application Service pu\u00f2 poi recuperare il valore\n\n\n\nfunc (s *TripApplicationService) FindTripsForCurrentUser(ctx context.Context) ([]*Trip, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0userID, ok := ctx.Value(\"userIDKey\").(identity.UserID)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if !ok {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"unauthorized\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... usa userID per chiamare il repository ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#204-gestione-delle-sessioni-jwt-stateless","title":"20.4. Gestione delle Sessioni: JWT Stateless","text":"<p>Come abbiamo anticipato, un'architettura a microservizi scalabile trae enormi benefici da un approccio stateless, dove il server non ha bisogno di memorizzare lo stato della sessione di un utente tra una richiesta e l'altra.</p> <p>L'approccio tradizionale con cookie di sessione e uno store lato server (in memoria o su DB/Redis) crea un collo di bottiglia e complica lo scaling orizzontale.</p> <p>La soluzione moderna, che abbiamo adottato nel nostro design, \u00e8 usare i JSON Web Tokens (JWT).</p> <ol> <li> <p>L'utente si autentica (nel nostro caso, con AWS Cognito).</p> </li> <li> <p>Il servizio di identit\u00e0 restituisce un JWT firmato digitalmente. Il JWT \u00e8 un token che contiene le informazioni sull'utente (i claims).</p> </li> <li> <p>Il nostro frontend SvelteKit memorizza questo token e lo invia con ogni richiesta nell'header <code>Authorization: Bearer &lt;token&gt;</code>.</p> </li> <li> <p>Il nostro backend Go, ad ogni richiesta, verifica il token senza dover contattare nessun servizio esterno.</p> </li> </ol> <p>La \"sessione\" \u00e8 il token stesso. Il server rimane stateless.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#implementazione-di-un-middleware-di-validazione-jwt","title":"Implementazione di un Middleware di Validazione JWT","text":"<p>Ecco come potrebbe apparire un middleware che protegge i nostri endpoint.</p> <p>Go</p> <pre><code>// Middleware per validare un JWT di Cognito\n\n\n\nfunc JWTAuthMiddleware(next http.Handler) http.Handler {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// All'avvio, dovremmo recuperare e mettere in cache le chiavi pubbliche (JWKS) da Cognito.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// jwks_url := \"https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... codice per recuperare le chiavi ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0authHeader := r.Header.Get(\"Authorization\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if authHeader == \"\" {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Authorization header required\", http.StatusUnauthorized)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tokenString := strings.TrimPrefix(authHeader, \"Bearer \")\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if tokenString == authHeader {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Invalid Authorization header format\", http.StatusUnauthorized)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Usa una libreria come 'github.com/golang-jwt/jwt/v5'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Qui si recupera la chiave pubblica corretta dal set (JWKS)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// in base all'ID della chiave ('kid') presente nell'header del token.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... logica di lookup della chiave ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return publicKey, nil\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil || !token.Valid {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Invalid token\", http.StatusUnauthorized)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0claims, ok := token.Claims.(jwt.MapClaims)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if !ok {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Invalid token claims\", http.StatusUnauthorized)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Estrai l'ID utente (claim 'sub') e mettilo nel context\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userID := claims[\"sub\"].(string)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx := context.WithValue(r.Context(), \"userIDKey\", userID)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next.ServeHTTP(w, r.WithContext(ctx))\n\n\n\n\u00a0\u00a0\u00a0\u00a0})\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#205-conclusioni-costruire-server-robusti-e-scalabili","title":"20.5. Conclusioni: Costruire Server Robusti e Scalabili","text":"<p>La gestione della concorrenza e delle sessioni \u00e8 dove \"la gomma incontra la strada\" nello sviluppo di backend.</p> <ul> <li> <p>Go ci offre un modello di concorrenza di default che \u00e8 incredibilmente performante, ma che richiede disciplina per evitare le race condition. La migliore strategia \u00e8 progettare servizi stateless, come promosso dalla Clean Architecture.</p> </li> <li> <p>Il <code>context.Context</code> \u00e8 lo strumento essenziale per gestire il ciclo di vita delle richieste, garantendo resilienza e un corretto uso delle risorse.</p> </li> <li> <p>Le sessioni stateless basate su JWT sono l'approccio standard per le API moderne e distribuite, eliminando i colli di bottiglia e abilitando uno scaling orizzontale senza sforzo.</p> </li> </ul> <p>Padroneggiare questi concetti ci permette di tradurre il nostro design architetturale di alto livello in un'implementazione server-side che non \u00e8 solo corretta, ma anche sicura, performante e pronta per la produzione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-21-integrazione-resiliente-con-openai","title":"Capitolo 21: Integrazione Resiliente con OpenAI","text":"<p>Nel vasto ecosistema del software moderno, nessuna applicazione \u00e8 un'isola. La nostra capacit\u00e0 di creare valore \u00e8 spesso amplificata esponenzialmente dalla nostra capacit\u00e0 di integrarci con servizi esterni specializzati. Per la nostra applicazione \"Where Should I Be?\", l'integrazione con i Large Language Models (LLM) di OpenAI \u00e8 la chiave per la nostra funzionalit\u00e0 pi\u00f9 innovativa: la generazione di suggerimenti di viaggio intelligenti.</p> <p>Tuttavia, questa integrazione \u00e8 un'arma a doppio taglio. Mentre ci d\u00e0 accesso a capacit\u00e0 straordinarie, ci espone anche a un mondo di incertezza. La rete \u00e8 inaffidabile. I servizi esterni possono essere lenti, possono fallire, possono cambiare le loro API o restituire dati inaspettati. Siamo alla merc\u00e9 di un sistema che \u00e8 completamente fuori dal nostro controllo.</p> <p>Un'implementazione ingenua di questa integrazione creerebbe un sistema fragile, pronto a crollare al primo segno di difficolt\u00e0. In questo capitolo, impareremo a costruire un ponte resiliente verso OpenAI. Progetteremo e implementeremo un Anti-Corruption Layer (ACL) robusto, utilizzando pattern collaudati come Timeouts, Retries e Circuit Breakers per garantire che la nostra applicazione rimanga stabile, reattiva e affidabile, indipendentemente dal comportamento del servizio esterno.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#211-il-problema-la-fragilita-delle-chiamate-dirette","title":"21.1. Il Problema: La Fragilit\u00e0 delle Chiamate Dirette","text":"<p>Immaginiamo un approccio naive. Il nostro <code>SuggestionService</code>, all'interno di un handler HTTP, riceve una richiesta dall'utente e chiama direttamente il client Go di OpenAI.</p> <p>Go</p> <pre><code>//\n\n\n\n// CONTROESEMPIO: Un'integrazione fragile e diretta\n\n\n\n//\n\n\n\nfunc (h *Handler) HandleGenerateSuggestion(w http.ResponseWriter, r *http.Request) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... parsing della richiesta ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Chiamata diretta e sincrona al client OpenAI\n\n\n\n\u00a0\u00a0\u00a0\u00a0resp, err := h.openAIClient.CreateChatCompletion(r.Context(), openai.ChatCompletionRequest{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Model: openai.GPT4o,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Messages: []openai.ChatCompletionMessage{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... messaggi del prompt ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\n\n\n\u00a0\u00a0\u00a0\u00a0})\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Se OpenAI fallisce, il nostro server risponde con un errore 500 generico.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http.Error(w, \"Failed to generate suggestion\", http.StatusInternalServerError)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... parsing della risposta e invio al client ...\n\n\n\n}\n</code></pre> <p>Questo codice \u00e8 una bomba a orologeria. Cosa succede se:</p> <ul> <li> <p>L'API di OpenAI \u00e8 lenta? La nostra richiesta HTTP rimane appesa, bloccando una goroutine sul nostro server e facendo attendere l'utente per decine di secondi, fino a un probabile timeout del nostro load balancer.</p> </li> <li> <p>La rete ha un problema transitorio? La chiamata fallisce. L'utente riceve un errore e deve riprovare manualmente, frustrato.</p> </li> <li> <p>L'API di OpenAI \u00e8 completamente offline? Ogni richiesta al nostro endpoint fallir\u00e0, potenzialmente saturando il nostro sistema di errori e log inutili.</p> </li> <li> <p>La nostra richiesta supera i limiti di rateo di OpenAI? Riceveremo un errore <code>429 Too Many Requests</code> che non stiamo gestendo in modo intelligente.</p> </li> </ul> <p>Per costruire un sistema di livello enterprise, dobbiamo anticipare questi fallimenti e gestirli con grazia. La soluzione inizia con un design architetturale pulito: l'Anti-Corruption Layer.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#212-lanti-corruption-layer-acl-in-pratica","title":"21.2. L'Anti-Corruption Layer (ACL) in Pratica","text":"<p>Come introdotto nel Capitolo 18, un ACL \u00e8 il nostro scudo difensivo. \u00c8 un componente specifico il cui unico scopo \u00e8 mediare la comunicazione tra il nostro dominio e un sistema esterno, traducendo i dati e assorbendo gli shock.</p> <p>Il nostro ACL per OpenAI sar\u00e0 composto da:</p> <ol> <li> <p>Una Porta (Interface): Definiamo un'interfaccia nel nostro layer applicativo che descrive il contratto di cui il nostro dominio ha bisogno, in termini del nostro Linguaggio Ubiquo.</p> </li> <li> <p>Un Adattatore (Adapter): L'implementazione concreta della porta. Questo \u00e8 il nostro ACL. Contiene tutta la logica \"sporca\" di comunicazione e resilienza.</p> </li> </ol> <p>Go</p> <pre><code>// internal/application/ports.go\n\n\n\npackage application\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/suggestions\"\n\n\n\n)\n\n\n\n\n\n// SuggestionProvider \u00e8 la nostra porta. Il dominio dipende da questa astrazione.\n\n\n\ntype SuggestionProvider interface {\n\n\n\n\u00a0\u00a0\u00a0\u00a0GenerateItinerary(ctx context.Context, request suggestions.SuggestionRequest) (*suggestions.ItineraryProposal, error)\n\n\n\n}\n</code></pre> <p>Go</p> <pre><code>// internal/adapters/gateway/openai/acl.go\n\n\n\npackage openai\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/application\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/suggestions\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n)\n\n\n\n\n\n// OpenAIAdapter \u00e8 il nostro ACL, l'implementazione concreta.\n\n\n\ntype OpenAIAdapter struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0client *openai.Client\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... altre dipendenze per la resilienza ...\n\n\n\n}\n\n\n\n\n\n// NewOpenAIAdapter \u00e8 la sua factory.\n\n\n\nfunc NewOpenAIAdapter(...) *OpenAIAdapter { ... }\n\n\n\n\n\nvar _ application.SuggestionProvider = (*OpenAIAdapter)(nil)\n\n\n\n\n\nfunc (a *OpenAIAdapter) GenerateItinerary(ctx context.Context, request suggestions.SuggestionRequest) (*suggestions.ItineraryProposal, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Qui dentro implementeremo i pattern di resilienza!\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#213-pattern-di-resilienza-per-chiamate-di-rete","title":"21.3. Pattern di Resilienza per Chiamate di Rete","text":"<p>All'interno del nostro <code>OpenAIAdapter</code>, implementeremo una serie di pattern per renderlo robusto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-1-timeouts-sempre-e-comunque","title":"Pattern 1: Timeouts (Sempre e Comunque)","text":"<p>Nessuna chiamata di rete dovrebbe mai essere fatta senza un timeout. In Go, il <code>context</code> \u00e8 lo strumento perfetto per questo.</p> <p>Go</p> <pre><code>func (a *OpenAIAdapter) makeRequestWithTimeout(ctx context.Context, prompt string) (string, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo un nuovo context con un timeout di, ad esempio, 15 secondi.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// La chiamata a OpenAI verr\u00e0 annullata se dura pi\u00f9 a lungo.\n\n\n\n\u00a0\u00a0\u00a0\u00a0reqCtx, cancel := context.WithTimeout(ctx, 15*time.Second)\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer cancel() // \u00c8 fondamentale chiamare cancel per rilasciare le risorse.\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... corpo della richiesta ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0resp, err := a.client.CreateChatCompletion(reqCtx, req)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Se l'errore \u00e8 dovuto alla scadenza del timeout, possiamo loggarlo specificamente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if errors.Is(err, context.DeadlineExceeded) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Println(\"OpenAI request timed out\")\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"\", err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-2-retries-con-exponential-backoff-e-jitter","title":"Pattern 2: Retries con Exponential Backoff e Jitter","text":"<p>Per errori transitori (es. un <code>502 Bad Gateway</code> o un momentaneo problema di rete), non ha senso fallire subito. \u00c8 meglio riprovare. Ma riprovare immediatamente pu\u00f2 peggiorare le cose.</p> <ul> <li> <p>Exponential Backoff: La strategia di attesa tra un tentativo e l'altro aumenta esponenzialmente (es. 1s, 2s, 4s, 8s). Questo d\u00e0 tempo al sistema esterno di riprendersi.</p> </li> <li> <p>Jitter: Si aggiunge un piccolo ritardo casuale all'attesa per evitare che pi\u00f9 istanze del nostro servizio, in caso di fallimento di massa, riprovino tutte nello stesso identico istante (problema della \"Thundering Herd\").</p> </li> </ul> <p>Invece di reinventare la ruota, usiamo una libreria standard del settore come <code>cenkalti/backoff</code>.</p> <p>Riferimento Chiave: La libreria <code>github.com/cenkalti/backoff/v4</code> \u00e8 una scelta eccellente e robusta per implementare strategie di retry in Go.</p> <p>Go</p> <pre><code>import \"github.com/cenkalti/backoff/v4\"\n\n\n\n\n\nfunc (a *OpenAIAdapter) GenerateItinerary(...) (*suggestions.ItineraryProposal, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0var rawResponse string\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Definiamo la nostra operazione di chiamata all'API\n\n\n\n\u00a0\u00a0\u00a0\u00a0operation := func() error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// La nostra funzione con timeout\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resp, err := a.makeRequestWithTimeout(ctx, \"...\")\u00a0\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Se l'errore \u00e8 un 429 (Too Many Requests) o un 5xx,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// vogliamo riprovare. Altri errori (es. 400 Bad Request)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// sono permanenti e non ha senso riprovare.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if shouldRetry(err) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err // L'errore indica a backoff di riprovare\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return backoff.Permanent(err) // Errore permanente, non riprovare\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rawResponse = resp\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil // Successo\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo una policy di backoff esponenziale\n\n\n\n\u00a0\u00a0\u00a0\u00a0expBackoff := backoff.NewExponentialBackOff()\n\n\n\n\u00a0\u00a0\u00a0\u00a0expBackoff.MaxElapsedTime = 30 * time.Second // Non riprovare per pi\u00f9 di 30s in totale\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Eseguiamo l'operazione con la policy di retry\n\n\n\n\u00a0\u00a0\u00a0\u00a0err := backoff.Retry(operation, expBackoff)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, fmt.Errorf(\"failed to call OpenAI after multiple retries: %w\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... ora tradiamo rawResponse nel nostro ItineraryProposal ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#pattern-3-circuit-breaker-interruttore-di-circuito","title":"Pattern 3: Circuit Breaker (Interruttore di Circuito)","text":"<p>Se l'API di OpenAI \u00e8 completamente down, continuare a martellarla di richieste \u00e8 dannoso per noi (sprechiamo risorse) e per loro. Il pattern Circuit Breaker previene questo.</p> <ul> <li>Stati: Chiuso (tutto ok), Aperto (fallisce subito), Semi-Aperto (prova una richiesta per vedere se il servizio \u00e8 tornato online).</li> </ul> <p>Una libreria popolare in Go per questo \u00e8 <code>sony/gobreaker</code>.</p> <p>Go</p> <pre><code>// In NewOpenAIAdapter:\n\n\n\nvar st gobreaker.Settings\n\n\n\nst.Name = \"OpenAI\"\n\n\n\nst.OnStateChange = func(name string, from, to gobreaker.State) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0log.Printf(\"Circuit Breaker %s changed from %s to %s\", name, from, to)\n\n\n\n}\n\n\n\ncb := gobreaker.NewCircuitBreaker(st)\n\n\n\n\n\n// Dentro GenerateItinerary, prima della logica di retry:\n\n\n\nfunc (a *OpenAIAdapter) GenerateItinerary(...) (*suggestions.ItineraryProposal, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0var proposal *suggestions.ItineraryProposal\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0_, err := a.circuitBreaker.Execute(func() (interface{}, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Tutta la nostra logica con i retry va qui dentro.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ... codice con backoff.Retry ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result, err\n\n\n\n\u00a0\u00a0\u00a0\u00a0})\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Se l'errore \u00e8 gobreaker.ErrOpenState, sappiamo che il circuito \u00e8 aperto.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, fmt.Errorf(\"circuit breaker is open: %w\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0return proposal, nil\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#214-disaccoppiamento-asincrono-non-far-aspettare-lutente","title":"21.4. Disaccoppiamento Asincrono: Non Far Aspettare l'Utente","text":"<p>Anche con tutti questi pattern, una chiamata a un LLM pu\u00f2 richiedere svariati secondi. Far attendere un utente davanti a uno spinner per 10 secondi \u00e8 una pessima esperienza utente. La soluzione \u00e8 rendere l'interazione asincrona.</p> <ol> <li> <p>L'endpoint API del nostro <code>suggestions-service</code> (<code>POST /suggestions</code>) non chiama pi\u00f9 l'ACL di OpenAI direttamente.</p> </li> <li> <p>Invece, convalida la richiesta, crea un comando <code>GenerateSuggestionCommand</code> e lo pubblica su una coda di messaggi (come AWS SQS, che vedremo nel Capitolo 22).</p> </li> <li> <p>Risponde immediatamente al client con <code>202 Accepted</code> e un ID per tracciare lo stato del lavoro.</p> </li> <li> <p>Un worker in background (una AWS Lambda, vedi Capitolo 22) \u00e8 sottoscritto alla coda SQS.</p> </li> <li> <p>Quando arriva un nuovo messaggio, la Lambda si attiva ed \u00e8 lei a eseguire il nostro <code>OpenAIAdapter</code> con tutta la sua logica di resilienza.</p> </li> <li> <p>Una volta ottenuto il risultato, lo salva nel database.</p> </li> <li> <p>Il frontend pu\u00f2 interrogare un endpoint di stato o ricevere una notifica (tramite WebSocket o Server-Sent Events) che il suggerimento \u00e8 pronto.</p> </li> </ol> <p>Questo design trasforma l'esperienza utente da sincrona e bloccante ad asincrona e reattiva, e isola completamente i fallimenti del servizio esterno in un processo in background.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#215-prompt-engineering-e-validazione-delle-risposte","title":"21.5. Prompt Engineering e Validazione delle Risposte","text":"<p>La resilienza non \u00e8 solo a livello di rete, ma anche di dati.</p> <ul> <li> <p>Prompt Engineering: La qualit\u00e0 del nostro prompt \u00e8 tutto. Dobbiamo istruire esplicitamente l'LLM a fornirci una risposta strutturata. Le API pi\u00f9 recenti di OpenAI hanno una \"JSON mode\" che aiuta in questo. Un buon prompt include esempi (few-shot prompting) e una descrizione chiara dello schema JSON desiderato.</p> </li> <li> <p>Validazione Difensiva: Mai fidarsi ciecamente dell'output di un LLM. Anche in JSON mode, la struttura potrebbe non essere perfetta o i dati potrebbero essere senza senso. L'ultima fase del nostro ACL (il \"Translator\") deve:</p> </li> </ul> <p>1. Validare che il JSON sia sintatticamente corretto.</p> <p>2. Validare che la struttura corrisponda a quella attesa.</p> <p>3. Validare che i dati abbiano un senso per il nostro dominio (es. le date sono coerenti, i nomi dei luoghi non sono vuoti) prima di creare l'oggetto <code>ItineraryProposal</code>.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#216-conclusioni-costruire-ponti-robusti","title":"21.6. Conclusioni: Costruire Ponti Robusti","text":"<p>L'integrazione con servizi esterni come OpenAI \u00e8 un superpotere per le applicazioni moderne. Ma per evitare che questo superpotere diventi il nostro tallone d'Achille, dobbiamo approcciare l'integrazione con una mentalit\u00e0 difensiva e orientata alla resilienza.</p> <p>In questo capitolo, abbiamo trasformato una semplice chiamata API in un robusto Anti-Corruption Layer, combinando:</p> <ul> <li> <p>Pattern di resilienza di rete: Timeouts, Retries e Circuit Breakers.</p> </li> <li> <p>Pattern architetturali: Disaccoppiamento asincrono tramite code di messaggi.</p> </li> <li> <p>Pattern di resilienza dei dati: Prompt engineering e validazione difensiva.</p> </li> </ul> <p>Questo approccio non solo rende la nostra applicazione pi\u00f9 stabile e affidabile, ma migliora anche drasticamente l'esperienza dei nostri utenti. Ora siamo pronti ad affrontare le sfide della persistenza su larga scala nel cloud AWS.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-vi-persistenza-scalabile-su-aws","title":"Parte VI: Persistenza Scalabile su AWS","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-22-disaccoppiare-la-persistenza-con-lambda-e-sqs","title":"Capitolo 22: Disaccoppiare la Persistenza con Lambda e SQS","text":"<p>Nelle parti precedenti, abbiamo progettato un'architettura software pulita e un modello di dominio ricco. Abbiamo discusso di pattern avanzati come il CQRS, che separa le responsabilit\u00e0 di scrittura (Comandi) da quelle di lettura (Query). Ma finora, quando abbiamo parlato di salvare dati, abbiamo implicitamente assunto che l'operazione <code>repository.Save()</code> avvenisse in modo sincrono, all'interno dello stesso ciclo di richiesta-risposta dell'utente.</p> <p>Questo approccio sincrono \u00e8 semplice da capire, ma nasconde un'enorme fragilit\u00e0. Cosa succede se il nostro database \u00e8 lento o momentaneamente non disponibile? La richiesta dell'utente rimane bloccata, lo spinner sul suo browser gira all'infinito e, nel peggiore dei casi, un rallentamento del database pu\u00f2 esaurire il pool di connessioni del nostro server API, causando un'interruzione totale del servizio.</p> <p>In questo capitolo, introdurremo un'architettura molto pi\u00f9 robusta e scalabile. Impareremo a disaccoppiare il processo di scrittura dalla richiesta principale dell'utente, trasformando la persistenza da un'operazione bloccante a un flusso di lavoro asincrono. Useremo due dei servizi pi\u00f9 potenti dell'ecosistema AWS per raggiungere questo obiettivo: Amazon SQS (Simple Queue Service) e AWS Lambda.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#221-il-problema-la-tirannia-delle-scritture-sincrone","title":"22.1. Il Problema: La Tirannia delle Scritture Sincrone","text":"<p>Consideriamo il flusso di lavoro del nostro <code>TripPlanningService</code> quando un utente aggiunge una tappa a un viaggio. In un modello sincrono:</p> <ol> <li> <p>L'API riceve la richiesta <code>POST /trips/{id}/stops</code>.</p> </li> <li> <p>L'Application Service carica l'aggregato <code>Viaggio</code>.</p> </li> <li> <p>Chiama il metodo <code>viaggio.AddStop(...)</code>, che valida gli invarianti.</p> </li> <li> <p>Chiama <code>tripRepository.Save(viaggio)</code>.</p> </li> <li> <p>Il repository inizia una transazione, esegue <code>UPDATE</code> e <code>INSERT</code> sul database. L'API attende.</p> </li> <li> <p>Il database conferma il commit. L'API attende.</p> </li> <li> <p>Solo ora, l'API risponde <code>200 OK</code> all'utente.</p> </li> </ol> <p>L'intero processo \u00e8 legato alla performance del database. Se il passo 5 richiede 3 secondi, l'utente attender\u00e0 3 secondi. Questo non \u00e8 solo una cattiva esperienza utente; \u00e8 un rischio per la stabilit\u00e0 dell'intero sistema.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#222-larchitettura-asincrona-la-coda-come-buffer","title":"22.2. L'Architettura Asincrona: La Coda come Buffer","text":"<p>La soluzione \u00e8 introdurre un \"cuscinetto\" tra la nostra API e il database: una coda di messaggi.</p> <p>Definizione: Una coda di messaggi \u00e8 un servizio che agisce come una casella di posta intermediaria. I produttori inviano messaggi alla coda, dove vengono memorizzati in modo duraturo. I consumatori leggono i messaggi dalla coda e li processano quando sono pronti.</p> <p>Nel nostro caso, i componenti chiave saranno:</p> <ul> <li> <p>Amazon SQS (Simple Queue Service): Il nostro servizio di coda gestito. \u00c8 altamente disponibile, scalabile e duraturo. Funzioner\u00e0 come il buffer per le nostre operazioni di scrittura.</p> </li> <li> <p>AWS Lambda: Il nostro servizio di calcolo serverless. Scriveremo una funzione Go che verr\u00e0 eseguita automaticamente ogni volta che un nuovo messaggio arriva sulla nostra coda SQS.</p> </li> </ul> <p>Il nuovo flusso di lavoro (il lato Comando del nostro CQRS) diventa:</p> <ol> <li> <p>L'API riceve la richiesta <code>POST /trips/{id}/stops</code>.</p> </li> <li> <p>L'Application Service esegue solo la validazione sincrona essenziale. Carica l'aggregato per controllare le regole di business.</p> </li> <li> <p>Se la validazione ha successo, invece di chiamare il repository, crea un evento (es. <code>StopAddedToTripEvent</code>) e lo invia come messaggio alla nostra coda SQS.</p> </li> <li> <p>L'API risponde immediatamente all'utente con <code>202 Accepted</code>, che significa: \"Ho ricevuto la tua richiesta e la elaborer\u00f2. Non devi pi\u00f9 aspettare\". L'esperienza utente \u00e8 istantanea.</p> </li> <li> <p>Nel frattempo, in background...</p> </li> <li> <p>La coda SQS, ricevendo un nuovo messaggio, attiva automaticamente la nostra funzione AWS Lambda.</p> </li> <li> <p>La funzione Lambda riceve l'evento, istanzia il nostro <code>TripRepository</code> e finalmente esegue l'operazione di scrittura sul database.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#223-sqs-in-dettaglio-la-nostra-cassetta-postale-affidabile","title":"22.3. SQS in Dettaglio: La Nostra Cassetta Postale Affidabile","text":"<p>SQS \u00e8 un servizio semplice ma con alcune caratteristiche cruciali per un design robusto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#tipi-di-code-standard-vs-fifo","title":"Tipi di Code: Standard vs. FIFO","text":"<ul> <li> <p>Standard Queue: \u00c8 la scelta di default. Offre un throughput quasi illimitato e garantisce una consegna at-least-once (almeno una volta). L'ordine dei messaggi non \u00e8 strettamente garantito. \u00c8 la scelta perfetta per la maggior parte dei casi d'uso in cui le operazioni sono idempotenti (eseguire la stessa operazione pi\u00f9 volte ha lo stesso risultato che eseguirla una volta sola).</p> </li> <li> <p>FIFO (First-In, First-Out) Queue: Garantisce l'ordine esatto dei messaggi e una consegna exactly-once. Questo ha un costo in termini di performance (throughput inferiore). Da usare solo se l'ordine delle operazioni \u00e8 un invariante critico del business.</p> </li> </ul> <p>Per la nostra applicazione, useremo una Coda Standard per la sua scalabilit\u00e0, e progetteremo i nostri consumatori (le Lambda) perch\u00e9 siano idempotenti.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#dead-letter-queue-dlq-la-rete-di-sicurezza","title":"Dead-Letter Queue (DLQ): La Rete di Sicurezza","text":"<p>Cosa succede se la nostra funzione Lambda fallisce ripetutamente nel processare un messaggio a causa di un bug o di dati corrotti (un \"poison pill\")? Senza una DLQ, la Lambda tenterebbe all'infinito, bloccando la coda.</p> <p>Una Dead-Letter Queue \u00e8 una seconda coda SQS che funge da \"cestino\" per i messaggi falliti. Configuriamo la coda principale dicendo: \"Dopo N tentativi di elaborazione falliti, sposta questo messaggio nella DLQ\". Questo sblocca la coda principale e ci permette di ispezionare, analizzare e potenzialmente riprocessare i messaggi falliti in un secondo momento, senza interrompere il servizio. Una coda di produzione senza una DLQ configurata \u00e8 un sistema incompleto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#224-scrivere-una-funzione-lambda-in-go-per-processare-i-messaggi-sqs","title":"22.4. Scrivere una Funzione Lambda in Go per Processare i Messaggi SQS","text":"<p>Vediamo come appare il codice del nostro consumatore serverless.</p> <p>Prerequisiti:</p> <ul> <li> <p>SDK di AWS per Go V2: <code>aws.Config</code>, client SQS.</p> </li> <li> <p>Libreria per eventi Lambda: <code>github.com/aws/aws-lambda-go/events</code>.</p> </li> <li> <p>Libreria Lambda per Go: <code>github.com/aws/aws-lambda-go/lambda</code>.</p> </li> </ul> <p>Go</p> <pre><code>// cmd/trip-persistence-worker/main.go\n\n\n\npackage main\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"encoding/json\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"log\"\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/aws/aws-lambda-go/events\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/aws/aws-lambda-go/lambda\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// I nostri package interni\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/application\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/adapters/persistence/postgres\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"where-should-i-be/internal/domain/events\" // Dove definiamo i nostri eventi\n\n\n\n)\n\n\n\n\n\n// Definiamo il nostro gestore, che contiene le dipendenze.\n\n\n\n// Le dipendenze vengono inizializzate una volta per ogni istanza \"calda\" della Lambda.\n\n\n\ntype SQSHandler struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripRepo application.TripRepository\n\n\n\n}\n\n\n\n\n\n// L'inizializzazione avviene nella funzione init() o globalmente.\n\n\n\n// Questo sfrutta la \"cold start\" per preparare le connessioni.\n\n\n\nvar handler SQSHandler\n\n\n\nfunc init() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// In un'app reale, la configurazione verrebbe da variabili d'ambiente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0db, err := postgres.Connect(...)\u00a0\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Fatalf(\"failed to connect to db: %v\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0handler = SQSHandler{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tripRepo: postgres.NewPostgresTripRepository(db),\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n}\n\n\n\n\n\n// HandleRequest \u00e8 la funzione che viene invocata da AWS Lambda.\n\n\n\nfunc (h *SQSHandler) HandleRequest(ctx context.Context, sqsEvent events.SQSEvent) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Lambda pu\u00f2 inviare i messaggi in batch.\n\n\n\n\u00a0\u00a0\u00a0\u00a0for _, message := range sqsEvent.Records {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Printf(\"Processing message ID: %s\", message.MessageId)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Qui, dovremmo avere una logica per distinguere i tipi di evento,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ad esempio usando un campo \"EventType\" nel JSON.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var event events.StopAddedToTrip\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err := json.Unmarshal([]byte(message.Body), &amp;event); err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Messaggio malformato. Non ha senso riprovare.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Logghiamo l'errore e non restituiamo 'err', cos\u00ec SQS\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// considera il messaggio processato (e lo rimuove dalla coda).\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Printf(\"ERROR: failed to unmarshal message body: %v\", err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Ora che abbiamo l'evento di dominio, eseguiamo la logica di persistenza.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0err := h.tripRepo.ApplyStopAddedEvent(ctx, event)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Errore durante l'elaborazione (es. DB non disponibile).\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Restituiamo l'errore. Questo far\u00e0 s\u00ec che SQS\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// renda di nuovo visibile il messaggio per un altro tentativo.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Dopo N tentativi, finir\u00e0 nella DLQ.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Printf(\"ERROR: failed to process event for trip %s: %v\", event.TripID, err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Printf(\"Successfully processed event for trip %s\", event.TripID)\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Se tutte le elaborazioni vanno a buon fine, restituiamo nil.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return nil\n\n\n\n}\n\n\n\n\n\nfunc main() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Avviamo il listener di Lambda, passando il nostro metodo handler.\n\n\n\n\u00a0\u00a0\u00a0\u00a0lambda.Start(handler.HandleRequest)\n\n\n\n}\n</code></pre> <p>Questo codice viene compilato in un eseguibile Go, impacchettato in un file .zip e caricato su AWS Lambda.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#225-vantaggi-e-complessita-del-modello-asincrono","title":"22.5. Vantaggi e Complessit\u00e0 del Modello Asincrono","text":"<p>Adottare questo pattern porta a un'architettura pi\u00f9 complessa, ma con benefici enormi.</p> <p>Vantaggi:</p> <p>\u2705 Resilienza: Un'interruzione del database non impatta la capacit\u00e0 della nostra API di accettare nuove scritture. I messaggi si accumulano pazientemente in SQS.</p> <p>\u2705 Scalabilit\u00e0: SQS e Lambda scalano in modo indipendente e automatico. Possiamo assorbire picchi di traffico di scrittura senza dover scalare i nostri server API.</p> <p>\u2705 Esperienza Utente: La risposta API \u00e8 quasi istantanea, migliorando drasticamente la reattivit\u00e0 percepita dal frontend.</p> <p>\u2705 Disaccoppiamento: L'API server \u00e8 completamente disaccoppiato dalla logica di persistenza. Potremmo cambiare il database o la logica del worker senza toccare l'API.</p> <p>Complessit\u00e0 da Gestire:</p> <p>\u26a0\ufe0f Consistenza Eventuale: Questo \u00e8 il compromesso principale. Dopo che l'utente ha aggiunto una tappa, se ricarica la pagina istantaneamente, potrebbe non vedere ancora la modifica. Il sistema \u00e8 eventualmente consistente. La nostra UI deve essere progettata per gestire questo (es. con aggiornamenti \"ottimistici\" o polling).</p> <p>\u26a0\ufe0f Monitoring: Abbiamo ora un sistema distribuito. Il monitoraggio diventa cruciale. Dobbiamo avere allarmi sulla dimensione della coda SQS (se cresce troppo, c'\u00e8 un problema nel consumatore) e sugli errori di esecuzione della Lambda. (Vedi Capitolo 29).</p> <p>\u26a0\ufe0f Idempotenza: Poich\u00e9 le code standard SQS garantiscono una consegna at-least-once, la nostra Lambda deve essere idempotente. Se riceve lo stesso messaggio StopAddedToTrip due volte, il risultato finale deve essere lo stesso. Questo pu\u00f2 essere gestito con controlli sulla versione dell'aggregato o ID di evento univoci.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#226-conclusioni-la-persistenza-come-flusso-non-come-muro","title":"22.6. Conclusioni: La Persistenza come Flusso, non come Muro","text":"<p>Introducendo una coda di messaggi tra la nostra API e il database, abbiamo trasformato la persistenza da un \"muro\" sincrono e bloccante a un \"fiume\" asincrono, resiliente e scalabile. Questo pattern \u00e8 un pilastro delle moderne applicazioni cloud-native e realizza pienamente il potenziale disaccoppiante del nostro design CQRS.</p> <p>Sebbene introduca la complessit\u00e0 della consistenza eventuale, i guadagni in termini di robustezza, scalabilit\u00e0 ed esperienza utente sono un investimento che ripaga ampiamente in qualsiasi sistema non banale. Con questa base, siamo ora pronti a discutere della scelta del database stesso, esplorando perch\u00e9 DynamoDB potrebbe essere una scelta ancora pi\u00f9 adatta a questo modello serverless ed event-driven.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-23-scelta-del-database-su-aws-dynamodb-per-costo-ed-efficienza","title":"Capitolo 23: Scelta del Database su AWS: DynamoDB per Costo ed Efficienza","text":"<p>Nel capitolo precedente, abbiamo fatto un passo da gigante verso un'architettura pi\u00f9 resiliente, disaccoppiando le nostre operazioni di scrittura tramite code SQS e funzioni Lambda. Abbiamo costruito un sistema in cui la nostra API pu\u00f2 accettare richieste istantaneamente, delegando il lavoro \"sporco\" della persistenza a un processo in background.</p> <p>Questo design, tuttavia, mette in luce una potenziale frizione. Abbiamo parlato di usare un database relazionale come PostgreSQL, ma questo tipo di database \u00e8 stato progettato in un'era diversa, l'era dei server \"always-on\". Un database relazionale tradizionale si aspetta di avere un numero limitato di client con connessioni persistenti e di lunga durata. Il nostro nuovo mondo, fatto di centinaia di esecuzioni Lambda concorrenti e di breve durata, pu\u00f2 mettere a dura prova questo modello, portando a problemi di esaurimento delle connessioni, colli di bottiglia e costi non ottimali.</p> <p>\u00c8 il momento di mettere in discussione le nostre supposizioni e chiederci: se stiamo costruendo un'applicazione cloud-native e serverless, non dovremmo usare un database nato per questo mondo? In questo capitolo, esploreremo perch\u00e9 Amazon DynamoDB, un database NoSQL completamente gestito, non \u00e8 solo una scelta praticabile, ma spesso la scelta superiore per costo, scalabilit\u00e0 ed efficienza in un'architettura come la nostra.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#231-il-paradigma-relazionale-e-i-suoi-limiti-nel-mondo-serverless","title":"23.1. Il Paradigma Relazionale e i Suoi Limiti nel Mondo Serverless","text":"<p>Per decenni, il database relazionale (SQL) \u00e8 stato la scelta di default, quasi istintiva, per la persistenza. Offre un modello di dati strutturato, un linguaggio di query potente e le garanzie transazionali di ACID (Atomicit\u00e0, Consistenza, Isolamento, Durabilit\u00e0). Per molti sistemi, \u00e8 ancora la scelta giusta.</p> <p>Tuttavia, quando lo si accoppia con un'architettura basata su AWS Lambda, emergono delle sfide significative:</p> <ol> <li> <p>Gestione delle Connessioni: Ogni esecuzione di una funzione Lambda \u00e8 un ambiente effimero. Se ogni funzione aprisse una nuova connessione a PostgreSQL, esauriremmo rapidamente il numero massimo di connessioni del database. Le soluzioni, come l'uso di RDS Proxy per gestire un pool di connessioni, sono efficaci ma aggiungono un altro livello di complessit\u00e0 e un costo aggiuntivo.</p> </li> <li> <p>Scalabilit\u00e0: I database relazionali scalano verticalmente (aumentando la potenza della singola macchina) molto bene, ma scalare orizzontalmente (aggiungendo pi\u00f9 macchine) \u00e8 complesso. La gestione di cluster, read replicas e failover richiede un'esperienza operativa non banale.</p> </li> <li> <p>Costi: Con un database come Amazon RDS (il servizio gestito di AWS per i database relazionali), si paga per l'istanza del server, 24 ore su 24, 7 giorni su 7, indipendentemente dal fatto che stia servendo traffico o meno. Questo va contro il modello \"pay-per-use\" del paradigma serverless.</p> </li> <li> <p>Rigidit\u00e0 dello Schema: L'evoluzione di uno schema relazionale richiede migrazioni formali (<code>ALTER TABLE</code>), che possono essere operazioni delicate e complesse in un ambiente di deployment continuo.</p> </li> </ol> <p>Queste sfide non sono insormontabili, ma ci costringono a chiederci se stiamo usando il martello giusto per il chiodo giusto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#232-introduzione-a-dynamodb-un-database-nato-per-il-cloud","title":"23.2. Introduzione a DynamoDB: Un Database Nato per il Cloud \u2601\ufe0f","text":"<p>DynamoDB \u00e8 un database NoSQL chiave-valore e di documenti, completamente gestito da AWS. \u00c8 stato progettato da zero per offrire performance di latenza di millisecondi a singola cifra, a qualsiasi scala.</p> <p>Il suo modello mentale \u00e8 radicalmente diverso da quello di un database SQL.</p> <p>Componenti Fondamentali:</p> <ul> <li> <p>Tabelle: Simili alle tabelle SQL, ma non hanno uno schema fisso, se non per la chiave primaria.</p> </li> <li> <p>Item: Simili alle righe. Sono collezioni di attributi.</p> </li> <li> <p>Attributi: Simili alle colonne. Ogni item pu\u00f2 avere un set di attributi diverso.</p> </li> <li> <p>Chiave Primaria (Primary Key): Questo \u00e8 il concetto pi\u00f9 importante. \u00c8 l'unico elemento richiesto per ogni item e determina in modo univoco la sua posizione. Esistono due tipi di chiavi primarie:</p> </li> </ul> <p>1. Chiave Semplice (Partition Key): Composta da un singolo attributo, chiamato partition key (o PK). DynamoDB usa il valore della PK per partizionare i dati su pi\u00f9 server. Tutte le operazioni di lettura/scrittura basate sulla PK sono estremamente veloci.</p> <p>2. Chiave Composita (Partition Key + Sort Key): Composta da due attributi, la partition key (PK) e la sort key (SK). Tutti gli item con la stessa PK sono memorizzati insieme, ordinati fisicamente in base al valore della SK. Questo permette di eseguire query molto efficienti, come \"recupera tutti gli ordini (SK) per un cliente specifico (PK)\".</p> <p>Modello di Costo e Throughput:</p> <ul> <li> <p>On-Demand (A Consumo): La scelta ideale per iniziare e per carichi di lavoro imprevedibili. Si paga per ogni singola operazione di lettura e scrittura eseguita. Se non c'\u00e8 traffico, il costo \u00e8 zero. Si allinea perfettamente con la filosofia serverless.</p> </li> <li> <p>Provisioned (Provisionato): Per carichi di lavoro prevedibili, si pu\u00f2 \"prenotare\" una certa capacit\u00e0 di lettura/scrittura (RCU/WCU) a un costo orario inferiore.</p> </li> </ul> <p>Questo modello elimina completamente i problemi di gestione delle connessioni e di pagamento per risorse inutilizzate. Le nostre funzioni Lambda possono comunicare con DynamoDB tramite semplici chiamate API HTTP, un'interazione stateless che scala all'infinito.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#233-progettare-il-modello-di-dati-larte-del-single-table-design","title":"23.3. Progettare il Modello di Dati: L'Arte del Single-Table Design","text":"<p>Il pi\u00f9 grande errore che si possa fare con DynamoDB \u00e8 provare a usarlo come un database SQL. Il mantra della modellazione relazionale \u00e8 normalizzare (dividere i dati in pi\u00f9 tabelle per evitare ridondanze). Il mantra della modellazione DynamoDB \u00e8 denormalizzare e progettare lo schema in base ai pattern di accesso (access patterns) della nostra applicazione.</p> <p>Una delle tecniche pi\u00f9 potenti e controintuitive per chi proviene dal mondo SQL \u00e8 il Single-Table Design.</p> <p>Definizione: Nel Single-Table Design, si memorizzano diversi tipi di entit\u00e0 (es. <code>Viaggio</code>, <code>Tappa</code>, <code>Utente</code>) all'interno della stessa tabella DynamoDB, usando i valori della Partition Key (PK) e della Sort Key (SK) in modo generico per creare relazioni gerarchiche.</p> <p>Perch\u00e9 questo approccio \u00e8 cos\u00ec potente?</p> <p>Permette di recuperare collezioni di item eterogenei (es. un aggregato Viaggio con tutte le sue Tappe) con una singola e iper-efficiente chiamata API Query, invece di eseguire costose JOIN come in SQL.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#applichiamolo-a-where-should-i-be","title":"Applichiamolo a \"Where Should I Be?\"","text":"<p>Definiamo la nostra tabella <code>whereshouldibe_table</code>:</p> <ul> <li> <p>Partition Key (PK): <code>TRIP#{tripId}</code> o <code>USER#{userId}</code></p> </li> <li> <p>Sort Key (SK): <code>TRIP_METADATA</code>, <code>STOP#{stopId}</code>, <code>USER_PROFILE</code></p> </li> </ul> <p>Vediamo come appaiono i nostri dati:</p> <p>|PK (string)|SK (string)|<code>name</code> (string)|<code>status</code> (string)|<code>placeName</code> (string)|<code>email</code> (string)|...|</p> <p>|---|---|---|---|---|---|---|</p> <p>|<code>TRIP#uuid-1</code>|<code>TRIP_METADATA</code>|Weekend a Roma|Planning|-|-||</p> <p>|<code>TRIP#uuid-1</code>|<code>STOP#uuid-a</code>|-|-|Colosseo|-||</p> <p>|<code>TRIP#uuid-1</code>|<code>STOP#uuid-b</code>|-|-|Fontana di Trevi|-||</p> <p>|<code>TRIP#uuid-2</code>|<code>TRIP_METADATA</code>|Viaggio in Giappone|Completed|-|-||</p> <p>|<code>USER#uuid-x</code>|<code>USER_PROFILE</code>|Mario Rossi|-|-|mario.r@ex.com||</p> <p>Con questo schema, possiamo soddisfare i nostri pattern di accesso principali:</p> <ol> <li>Recuperare un intero aggregato <code>Viaggio</code> (il viaggio + tutte le sue tappe):</li> </ol> <p>- <code>Query</code> sulla tabella dove <code>PK = \"TRIP#uuid-1\"</code></p> <p>- Questa singola chiamata ci restituisce una collezione di item: la riga con SK <code>TRIP_METADATA</code> (i dati dell'aggregato root) e tutte le righe con SK che inizia per <code>STOP#</code> (le entit\u00e0 figlie). \u00c8 l'equivalente di una <code>JOIN</code> ma con una performance di gran lunga superiore.</p> <ol> <li>Recuperare il profilo di un utente:</li> </ol> <p>- <code>GetItem</code> sulla tabella dove <code>PK = \"USER#uuid-x\"</code> e <code>SK = \"USER_PROFILE\"</code></p>"},{"location":"books/Go%20Domain%20Driven%20Design/#gestire-accessi-secondari-con-i-gsi-global-secondary-indexes","title":"Gestire Accessi Secondari con i GSI (Global Secondary Indexes)","text":"<p>Cosa succede se abbiamo bisogno di un nuovo pattern di accesso, come \"trova tutti i viaggi di un utente\"? La nostra chiave primaria non pu\u00f2 soddisfarlo. Qui entrano in gioco i Global Secondary Indexes (GSI).</p> <p>Un GSI \u00e8 essenzialmente una \"copia\" della nostra tabella con una chiave primaria diversa. Possiamo creare un GSI con:</p> <ul> <li> <p>GSI1 PK: <code>ownerId</code> (un attributo che aggiungeremo all'item <code>TRIP_METADATA</code>)</p> </li> <li> <p>GSI1 SK: <code>status</code> o <code>creationDate</code></p> </li> </ul> <p>Interrogando questo GSI, possiamo soddisfare query come:</p> <ul> <li> <p><code>Query</code> sul GSI1 dove <code>GSI1_PK = \"USER#uuid-x\"</code> -&gt; Otteniamo tutti i viaggi di quell'utente.</p> </li> <li> <p><code>Query</code> sul GSI1 dove <code>GSI1_PK = \"USER#uuid-x\"</code> e <code>GSI1_SK</code> inizia per <code>Planning</code> -&gt; Otteniamo tutti i viaggi in pianificazione per quell'utente.</p> </li> </ul> <p>Riferimento Chiave: Per approfondire il Single-Table Design, le risorse di Alex DeBrie, in particolare il suo libro \"The DynamoDB Book\", sono considerate il gold standard assoluto.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#234-implementare-il-repository-go-per-dynamodb","title":"23.4. Implementare il Repository Go per DynamoDB","text":"<p>Il nostro <code>Repository</code> far\u00e0 da ponte, nascondendo questa complessit\u00e0 di modellazione.</p> <p>Go</p> <pre><code>// internal/adapters/persistence/dynamodb/dynamo_trip_repo.go\n\n\n\npackage dynamodb\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n)\n\n\n\n\n\ntype DynamoDBTripRepository struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0client\u00a0 \u00a0 *dynamodb.Client\n\n\n\n\u00a0\u00a0\u00a0\u00a0tableName string\n\n\n\n}\n\n\n\n\n\nfunc (r *DynamoDBTripRepository) Save(ctx context.Context, t *trip.Trip) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 1. Marshallare l'aggregato in una lista di item DynamoDB\n\n\n\n\u00a0\u00a0\u00a0\u00a0items, err := r.marshalTrip(t)\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// 2. Creare una richiesta transazionale di scrittura\n\n\n\n\u00a0\u00a0\u00a0\u00a0// DynamoDB supporta transazioni fino a 100 item.\n\n\n\n\u00a0\u00a0\u00a0\u00a0var writeOps []types.TransactWriteItem\n\n\n\n\u00a0\u00a0\u00a0\u00a0for _, item := range items {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writeOps = append(writeOps, types.TransactWriteItem{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Put: &amp;types.Put{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TableName: &amp;r.tableName,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Item:\u00a0 \u00a0 \u00a0 item,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0_, err = r.client.TransactWriteItems(ctx, &amp;dynamodb.TransactWriteItemsInput{\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TransactItems: writeOps,\n\n\n\n\u00a0\u00a0\u00a0\u00a0})\n\n\n\n\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n}\n\n\n\n\n\nfunc (r *DynamoDBTripRepository) marshalTrip(t *trip.Trip) ([]map[string]types.AttributeValue, error) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Logica per trasformare l'aggregato Trip in una lista di \"righe\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// una per i metadati e una per ogni tappa, con le PK e SK corrette.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#235-dynamodb-streams-labbinamento-perfetto-per-larchitettura-event-driven","title":"23.5. DynamoDB Streams: L'Abbinamento Perfetto per l'Architettura Event-Driven","text":"<p>DynamoDB Streams \u00e8 una delle funzionalit\u00e0 pi\u00f9 potenti e sinergiche con il nostro design. \u00c8 un flusso ordinato nel tempo di tutte le modifiche (creazioni, aggiornamenti, cancellazioni) che avvengono sugli item di una tabella.</p> <p>Possiamo configurare un \"trigger\" che invochi una funzione Lambda ogni volta che si verifica una modifica. Questo sblocca pattern potentissimi:</p> <ul> <li> <p>Replica dei Dati: Quando un <code>Viaggio</code> viene salvato su DynamoDB, lo stream pu\u00f2 attivare una Lambda che aggiorna un nostro Read Model su un altro servizio (es. un cluster Elasticsearch per ricerche full-text).</p> </li> <li> <p>Notifiche: Quando lo <code>status</code> di un viaggio cambia in <code>Completed</code>, una Lambda pu\u00f2 essere attivata per inviare un'email di notifica all'utente.</p> </li> <li> <p>Aggregazioni: Una Lambda pu\u00f2 ascoltare gli stream per calcolare e aggiornare statistiche in tempo reale.</p> </li> </ul> <p>Questo completa perfettamente il nostro modello di persistenza asincrona: la Lambda del Capitolo 22 scrive su DynamoDB, e lo stream di DynamoDB pu\u00f2 a sua volta innescare altre Lambda per compiti successivi, creando una catena di elaborazione reattiva, serverless e completamente disaccoppiata.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#236-conclusioni-scegliere-lo-strumento-giusto-per-il-lavoro-giusto","title":"23.6. Conclusioni: Scegliere lo Strumento Giusto per il Lavoro Giusto","text":"<p>La scelta del database non \u00e8 una decisione religiosa, ma una scelta ingegneristica basata su trade-off. Mentre un database relazionale \u00e8 uno strumento familiare e potente, DynamoDB offre una serie di vantaggi quasi imbattibili per l'architettura specifica che stiamo costruendo in questo libro:</p> <ul> <li> <p>Scalabilit\u00e0 Infinita e Gestita: Elimina completamente le preoccupazioni operative.</p> </li> <li> <p>Performance Prevedibili: Latenze a millisecondi a singola cifra, indipendentemente dalla scala.</p> </li> <li> <p>Modello di Costo Serverless: Il modello On-Demand si allinea perfettamente con Lambda, permettendoci di pagare solo per ci\u00f2 che usiamo.</p> </li> <li> <p>Integrazione Nativia con l'Ecosistema AWS: L'accoppiata con Lambda tramite trigger diretti o DynamoDB Streams \u00e8 un superpotere per le architetture event-driven.</p> </li> </ul> <p>Il prezzo da pagare \u00e8 un cambio di paradigma. Richiede di abbandonare l'abitudine alla normalizzazione e di abbracciare la modellazione basata sui pattern di accesso. Ma per un'applicazione cloud-native, scalabile ed efficiente, \u00e8 un investimento che ripaga esponenzialmente. Con DynamoDB come base della nostra persistenza, siamo pronti a costruire un sistema veramente enterprise.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-24-una-strategia-di-testing-completa","title":"Capitolo 24: Una Strategia di Testing Completa","text":"<p>Finora, in questa parte del libro, abbiamo progettato un'architettura di persistenza potente e scalabile, basata su servizi cloud-native come SQS, Lambda e DynamoDB. Abbiamo costruito un sistema distribuito, asincrono e resiliente. Ma con questa potenza arriva una nuova sfida: come possiamo essere sicuri che tutto funzioni? Come possiamo avere la fiducia di modificare, estendere e deployare il nostro codice sapendo di non aver rotto nulla?</p> <p>La risposta non risiede in un singolo tipo di test, ma in una strategia di testing multi-livello. In questo capitolo, abbandoneremo l'idea del testing come un'attivit\u00e0 manuale e noiosa da fare alla fine del ciclo di sviluppo. Invece, la tratteremo come una disciplina ingegneristica fondamentale, uno strumento di design che ci permette di costruire software di alta qualit\u00e0, manutenibile e robusto.</p> <p>Esploreremo la \"Piramide del Testing\" e vedremo come applicarla concretamente alla nostra architettura basata su Go, DDD e AWS, scrivendo test unitari, di integrazione e end-to-end per garantire la correttezza del nostro sistema \"Where Should I Be?\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#241-la-piramide-del-testing-un-modello-per-la-qualita-pyramids","title":"24.1. La Piramide del Testing: Un Modello per la Qualit\u00e0 pyramids","text":"<p>La Piramide del Testing \u00e8 un modello concettuale che ci aiuta a pensare e a bilanciare i nostri sforzi di testing. Suggerisce che dovremmo avere diversi tipi di test e che il loro numero dovrebbe essere inversamente proporzionale al loro costo e alla loro lentezza.</p> <p>(Fonte: Martin Fowler)</p> <ol> <li>Test Unitari (Unit Tests) - La Base della Piramide:</li> </ol> <p>- Scopo: Verificare una piccola unit\u00e0 di codice (una funzione, un metodo) in completo isolamento.</p> <p>- Caratteristiche: Sono numerosissimi, estremamente veloci da eseguire (millisecondi), economici da scrivere e mantenere. Costituiscono il fondamento della nostra rete di sicurezza.</p> <ol> <li>Test di Integrazione (Integration Tests) - Il Centro della Piramide:</li> </ol> <p>- Scopo: Verificare che diverse unit\u00e0 di codice (o componenti) collaborino correttamente. Ad esempio, testare che il nostro repository possa effettivamente parlare con un database.</p> <p>- Caratteristiche: Sono meno numerosi dei test unitari, pi\u00f9 lenti (da secondi a minuti) e pi\u00f9 costosi da scrivere e mantenere, perch\u00e9 richiedono un ambiente pi\u00f9 complesso.</p> <ol> <li>Test End-to-End (E2E) - La Cima della Piramide:</li> </ol> <p>- Scopo: Verificare un intero flusso utente attraverso tutti i livelli dell'applicazione, dal frontend al backend fino al database, in un ambiente che simula la produzione.</p> <p>- Caratteristiche: Sono pochissimi, molto lenti (minuti) ed estremamente fragili e costosi. Vanno riservati solo per i percorsi critici dell'applicazione.</p> <p>La regola d'oro della piramide \u00e8: scrivere test al livello pi\u00f9 basso possibile. Se una logica pu\u00f2 essere verificata da un test unitario, \u00e8 l\u00ec che dovrebbe essere testata.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#242-livello-1-test-unitari-il-nostro-fondamento","title":"24.2. Livello 1: Test Unitari - Il Nostro Fondamento \ud83d\udd2c","text":"<p>I test unitari sono il nostro pane quotidiano. Grazie alla Clean Architecture che abbiamo adottato, scrivere test unitari per la maggior parte del nostro codice \u00e8 incredibilmente semplice.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#testare-il-dominio","title":"Testare il Dominio","text":"<p>Il nostro layer di dominio (Aggregati, Entit\u00e0, Value Objects) non ha dipendenze infrastrutturali. \u00c8 Go puro. Questo lo rende perfettamente testabile in isolamento.</p> <p>Esempio: Testare l'Aggregato Viaggio</p> <p>Vogliamo verificare che la regola di business \"non si possono aggiungere tappe a un viaggio completato\" sia rispettata.</p> <p>Go</p> <pre><code>// internal/domain/trip/trip_test.go\n\n\n\npackage trip_test\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"testing\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/stretchr/testify/assert\" // Una libreria di asserzioni molto popolare\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... import dei nostri package di dominio ...\n\n\n\n)\n\n\n\n\n\nfunc TestTrip_AddStop_FailsIfTripIsCompleted(t *testing.T) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Arrange: prepariamo lo stato iniziale\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo un viaggio e lo portiamo allo stato \"Completed\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0trip, _ := trip.New(...) // Usiamo la nostra factory\n\n\n\n\u00a0\u00a0\u00a0\u00a0trip.Start()\n\n\n\n\u00a0\u00a0\u00a0\u00a0trip.Complete() // Metodo che cambia lo stato\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Act: eseguiamo l'azione da testare\n\n\n\n\u00a0\u00a0\u00a0\u00a0err := trip.AddStop(...) // Proviamo ad aggiungere una tappa\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Assert: verifichiamo il risultato\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.Error(t, err) // Ci aspettiamo un errore\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.Equal(t, \"cannot add stop to a completed trip\", err.Error())\n\n\n\n}\n</code></pre> <p>Questo test \u00e8 auto-contenuto, non richiede database o server, e viene eseguito in una frazione di secondo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#testare-i-servizi-applicativi-use-cases","title":"Testare i Servizi Applicativi (Use Cases)","text":"<p>I nostri <code>Application Services</code> dipendono da interfacce (le \"porte\"), come <code>TripRepository</code>. Per testarli in isolamento, usiamo i mock. Un mock \u00e8 un'implementazione fittizia di un'interfaccia, usata per simulare il comportamento di una dipendenza e verificare le interazioni.</p> <p>Riferimento Chiave: La libreria <code>github.com/stretchr/testify</code> offre un eccellente package <code>mock</code> che semplifica la creazione di oggetti mock in Go.</p> <p>Esempio: Testare <code>TripApplicationService</code></p> <p>Go</p> <pre><code>// internal/application/trip_service_test.go\n\n\n\npackage application_test\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"testing\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/stretchr/testify/mock\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n)\n\n\n\n\n\n// 1. Creiamo la struct del mock\n\n\n\ntype MockTripRepository struct {\n\n\n\n\u00a0\u00a0\u00a0\u00a0mock.Mock\n\n\n\n}\n\n\n\n\n\n// 2. Implementiamo l'interfaccia TripRepository per il mock\n\n\n\nfunc (m *MockTripRepository) Save(ctx context.Context, t *trip.Trip) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0args := m.Called(ctx, t)\n\n\n\n\u00a0\u00a0\u00a0\u00a0return args.Error(0)\n\n\n\n}\n\n\n\n// ... implementiamo anche gli altri metodi dell'interfaccia ...\n\n\n\n\n\nfunc TestTripApplicationService_CreateNewTrip(t *testing.T) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Arrange\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo := new(MockTripRepository)\n\n\n\n\u00a0\u00a0\u00a0\u00a0appService := application.NewTripApplicationService(mockRepo)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Definiamo l'aspettativa: ci aspettiamo che il metodo Save\n\n\n\n\u00a0\u00a0\u00a0\u00a0// venga chiamato esattamente una volta con qualsiasi context e qualsiasi\n\n\n\n\u00a0\u00a0\u00a0\u00a0// puntatore a un trip. Se chiamato, deve restituire 'nil' (nessun errore).\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo.On(\"Save\", mock.Anything, mock.AnythingOfType(\"*trip.Trip\")).Return(nil)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Act\n\n\n\n\u00a0\u00a0\u00a0\u00a0_, err := appService.CreateNewTrip(context.Background(), \"Mio Viaggio\", ...)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Assert\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Verifichiamo che tutte le aspettative definite sul mock siano state soddisfatte.\n\n\n\n\u00a0\u00a0\u00a0\u00a0mockRepo.AssertExpectations(t)\n\n\n\n}\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#243-livello-2-test-di-integrazione-verificare-le-collaborazioni","title":"24.3. Livello 2: Test di Integrazione - Verificare le Collaborazioni \ud83d\udd17","text":"<p>I test di integrazione verificano che i nostri \"adattatori\" (come i repository) funzionino correttamente con i servizi esterni reali (come un database).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#testare-i-repository-con-testcontainers-go","title":"Testare i Repository con <code>testcontainers-go</code>","text":"<p>Come possiamo testare il nostro <code>DynamoDBTripRepository</code> contro un vero DynamoDB senza doverne gestire un'installazione manuale? La risposta \u00e8 Testcontainers.</p> <p>Riferimento Chiave: <code>testcontainers-go</code> \u00e8 una libreria Go che permette di avviare e gestire istanze di servizi (database, code, ecc.) all'interno di container Docker, direttamente dal nostro codice di test.</p> <p>Questo ci permette di avere un ambiente pulito e isolato per ogni esecuzione dei test di integrazione.</p> <p>Esempio: Testare <code>DynamoDBTripRepository</code></p> <p>Go</p> <pre><code>// internal/adapters/persistence/dynamodb/dynamo_repo_integration_test.go\n\n\n\n\n\n//go:build integration // Un build tag per separare questi test lenti\n\n\n\n\n\npackage dynamodb_test\n\n\n\n\n\nimport (\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"testing\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"context\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/testcontainers/testcontainers-go\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0\"github.com/testcontainers/testcontainers-go/modules/dynamodb\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n)\n\n\n\n\n\nfunc TestDynamoDBTripRepository_SaveAndFind(t *testing.T) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0ctx := context.Background()\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Arrange: Avviamo un container Docker con DynamoDB Local\n\n\n\n\u00a0\u00a0\u00a0\u00a0dynamoContainer, err := dynamodb.RunContainer(ctx,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0testcontainers.WithImage(\"amazon/dynamodb-local:latest\"),\n\n\n\n\u00a0\u00a0\u00a0\u00a0)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Assicuriamoci che il container venga terminato alla fine del test\n\n\n\n\u00a0\u00a0\u00a0\u00a0defer dynamoContainer.Terminate(ctx)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo il client DynamoDB che punta al container\n\n\n\n\u00a0\u00a0\u00a0\u00a0client, err := dynamoContainer.GetClient(ctx)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo la tabella per il nostro test\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... codice per creare la tabella `whereshouldibe_table` ...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo l'istanza del repository da testare\n\n\n\n\u00a0\u00a0\u00a0\u00a0repo := dynamodb.NewDynamoDBTripRepository(client, \"whereshouldibe_table\")\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Act\n\n\n\n\u00a0\u00a0\u00a0\u00a0newTrip := trip.New(...)\n\n\n\n\u00a0\u00a0\u00a0\u00a0err = repo.Save(ctx, newTrip)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0foundTrip, err := repo.FindByID(ctx, newTrip.ID())\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Assert\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NoError(t, err)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.NotNil(t, foundTrip)\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.Equal(t, newTrip.ID(), foundTrip.ID())\n\n\n\n\u00a0\u00a0\u00a0\u00a0assert.Equal(t, newTrip.Name(), foundTrip.Name())\n\n\n\n}\n</code></pre> <p>Questo test ci d\u00e0 la massima fiducia che il nostro codice di mappatura e le query verso DynamoDB siano corretti.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#244-livello-3-test-end-to-end-e2e-simulare-il-mondo-reale","title":"24.4. Livello 3: Test End-to-End (E2E) - Simulare il Mondo Reale \ud83c\udf10","text":"<p>I test E2E sono la cima della piramide. Verificano un intero flusso di business dal punto di vista dell'utente. Sono pochi e preziosi.</p> <p>Scopo: Simulare un utente reale che interagisce con il nostro frontend SvelteKit, che a sua volta chiama le API del nostro backend, che interagisce con i servizi AWS.</p> <p>Strumenti: Useremo un framework di browser automation come Cypress o Playwright.</p> <p>Flusso di Test E2E per \"Crea un Viaggio\":</p> <ol> <li> <p>Setup: Lo script di test si assicura che l'applicazione sia deployata in un ambiente di test dedicato su AWS.</p> </li> <li> <p>Azione (UI): Lo script, tramite Cypress, apre un browser, naviga alla nostra app SvelteKit, si registra e/o effettua il login.</p> </li> <li> <p>Azione (UI): Naviga alla pagina di creazione viaggio, compila il form con \"Viaggio a Tokyo\" e clicca \"Salva\".</p> </li> <li> <p>Asserzione (UI): Lo script verifica che nella dashboard dei viaggi appaia una card con \"Viaggio a Tokyo\".</p> </li> <li> <p>Asserzione (API/DB): (Opzionale ma potente) Lo script pu\u00f2 fare una chiamata diretta all'API di backend o interrogare il database per verificare che i dati siano stati persistiti correttamente.</p> </li> <li> <p>Cleanup: Lo script cancella il viaggio e l'utente creati per mantenere l'ambiente pulito.</p> </li> </ol> <p>Questi test sono lenti e possono essere instabili (\"flaky\"), ma sono insostituibili per verificare che tutti i pezzi del nostro sistema distribuito comunichino correttamente.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#245-testare-le-architetture-serverless-lambda-e-sqs","title":"24.5. Testare le Architetture Serverless (Lambda e SQS)","text":"<p>Testare le nostre Lambda asincrone presenta sfide uniche.</p> <ul> <li> <p>Test Unitari: La logica interna della nostra funzione Lambda (<code>HandleRequest</code>) \u00e8 solo una funzione Go. Possiamo testarla unitariamente chiamandola direttamente nel nostro test e passandole un oggetto <code>events.SQSEvent</code> fittizio.</p> </li> <li> <p>Test di Integrazione Locali: Strumenti come AWS SAM (Serverless Application Model) CLI permettono di invocare le nostre funzioni Lambda localmente in un ambiente Docker che simula l'ambiente di esecuzione di AWS. Questo \u00e8 utile per testare la funzione in un contesto pi\u00f9 realistico senza deployare.</p> </li> <li> <p>Test di Integrazione nel Cloud: L'approccio con la massima fedelt\u00e0. La nostra pipeline di CI/CD deploya l'intera architettura (SQS, Lambda, DynamoDB) su un ambiente AWS di <code>staging</code> o <code>testing</code>. A questo punto, i nostri test di integrazione inviano un messaggio reale alla coda SQS e verificano (magari interrogando il DynamoDB) che la Lambda lo abbia processato correttamente.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#246-conclusioni-la-qualita-come-disciplina","title":"24.6. Conclusioni: La Qualit\u00e0 come Disciplina","text":"<p>Una strategia di testing completa non \u00e8 un'opzione, ma un requisito fondamentale per costruire software enterprise di alta qualit\u00e0. Non \u00e8 un'attivit\u00e0 da relegare alla fine, ma una disciplina che permea l'intero ciclo di vita dello sviluppo.</p> <p>Adottando la Piramide del Testing, abbiamo imparato a:</p> <ul> <li> <p>Verificare la logica di business in isolamento con test unitari veloci e affidabili, resi possibili dalla nostra Clean Architecture.</p> </li> <li> <p>Garantire la corretta collaborazione tra i nostri componenti e i servizi esterni con test di integrazione robusti, usando strumenti moderni come Testcontainers.</p> </li> <li> <p>Convalidare i flussi utente critici attraverso l'intero sistema con un piccolo numero di test E2E mirati.</p> </li> </ul> <p>Questa rete di sicurezza ci d\u00e0 la fiducia necessaria per innovare, refattorizzare e deployare il nostro codice frequentemente, sapendo che la qualit\u00e0 del nostro lavoro \u00e8 costantemente protetta.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-vii-sviluppo-deployment-e-operations","title":"Parte VII: Sviluppo, Deployment e Operations","text":""},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-25-frontend-moderno-con-sveltekit","title":"Capitolo 25: Frontend Moderno con SvelteKit","text":"<p>Benvenuti nella parte finale del nostro viaggio. Abbiamo dedicato la maggior parte di questo libro a progettare e costruire un backend eccezionalmente robusto, scalabile e manutenibile. Abbiamo esplorato i meandri del Domain-Driven Design, della Clean Architecture e della persistenza su AWS. Abbiamo un motore potente, ma un motore senza un telaio, delle ruote e un volante \u00e8 un'opera d'arte incompleta e inutilizzabile.</p> <p>L'interfaccia utente \u00e8 il punto di contatto finale con i nostri utenti. \u00c8 dove tutta la complessit\u00e0 e la potenza che abbiamo costruito vengono finalmente tradotte in valore tangibile. La scelta della tecnologia frontend non \u00e8 quindi un dettaglio secondario, ma una decisione architetturale critica che impatta la performance, la manutenibilit\u00e0 e, soprattutto, l'esperienza utente.</p> <p>In un mondo frontend dominato da framework complessi e da una grande quantit\u00e0 di boilerplate, abbiamo scelto un approccio diverso, pi\u00f9 snello e performante: SvelteKit. In questo capitolo, esploreremo perch\u00e9 SvelteKit \u00e8 il partner perfetto per il nostro backend Go e come ci permette di costruire interfacce utente moderne in modo pi\u00f9 semplice, veloce ed efficiente.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#251-perche-svelte-il-framework-che-scompare","title":"25.1. Perch\u00e9 Svelte? Il Framework che Scompare","text":"<p>Per capire SvelteKit, dobbiamo prima capire Svelte. Svelte si autodefinisce \"il framework che scompare\" e questa non \u00e8 solo una trovata di marketing, ma la sua filosofia fondamentale. A differenza di framework come React o Vue, che spediscono una pesante libreria runtime al browser dell'utente per gestire un Virtual DOM (VDOM), Svelte adotta un approccio radicalmente diverso.</p> <p>Svelte non \u00e8 una libreria, \u00e8 un compilatore.</p> <p>Invece di fare il lavoro pesante nel browser, Svelte lo fa durante la fase di compilazione. Prende i nostri file <code>.svelte</code> (che assomigliano a semplice HTML, CSS e JavaScript) e li compila in codice JavaScript vanilla, piccolo, efficiente e altamente ottimizzato, che manipola direttamente il DOM. Quando la nostra applicazione viene eseguita, il \"framework\" \u00e8 gi\u00e0 scomparso.</p> <p>Questo approccio porta a benefici enormi:</p> <ol> <li>Meno Codice, Meno Complessit\u00e0: La sintassi di Svelte \u00e8 estremamente concisa e intuitiva. Non c'\u00e8 bisogno di <code>useState</code>, <code>useEffect</code> o di imparare una sintassi di template complessa.</li> </ol> <p>Controesempio: Un contatore in React vs. Svelte</p> <p>JavaScript</p> <p>```javascript</p> <p>// React</p> <p>import { useState } from 'react';</p> <p>function Counter() {</p> <p>const [count, setCount] = useState(0);</p> <p>return  setCount(count + 1)}&gt;Clicks: {count};</p> <p>}</p> <p>```</p> <p>HTML</p> <p>```html</p> <p> count += 1}&gt;Clicks: {count}</p> <p>```</p> <ol> <li> <p>Reattivit\u00e0 Chirurgica: La reattivit\u00e0 in Svelte \u00e8 \"gratuita\". Basta assegnare un nuovo valore a una variabile e il compilatore Svelte si occupa di generare il codice minimo indispensabile per aggiornare il DOM. \u00c8 un approccio chirurgico, non c'\u00e8 bisogno di un intero VDOM che calcoli le differenze.</p> </li> <li> <p>Performance Eccezionali: Poich\u00e9 non c'\u00e8 un runtime pesante da caricare e nessun VDOM da calcolare nel browser, le applicazioni Svelte sono pi\u00f9 piccole, si avviano pi\u00f9 velocemente e hanno performance migliori, specialmente su dispositivi a basse prestazioni.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#252-sveltekit-il-framework-applicativo-full-stack","title":"25.2. SvelteKit: Il Framework Applicativo Full-Stack","text":"<p>Se Svelte \u00e8 il motore per costruire componenti UI, SvelteKit \u00e8 l'automobile completa. \u00c8 un framework applicativo full-stack, costruito sopra Svelte, che fornisce tutto il necessario per creare applicazioni web complesse e robuste. \u00c8 per Svelte ci\u00f2 che Next.js \u00e8 per React.</p> <p>Le caratteristiche principali di SvelteKit che lo rendono perfetto per il nostro progetto sono:</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#routing-basato-su-file-system","title":"Routing basato su File System","text":"<p>La struttura delle URL della nostra applicazione \u00e8 definita direttamente dalla struttura delle directory in <code>src/routes</code>.</p> <ul> <li> <p><code>src/routes/+page.svelte</code> -&gt; La nostra homepage (<code>/</code>)</p> </li> <li> <p><code>src/routes/trips/+page.svelte</code> -&gt; La pagina della dashboard dei viaggi (<code>/trips</code>)</p> </li> <li> <p><code>src/routes/trips/[tripId]/+page.svelte</code> -&gt; La pagina di dettaglio per un viaggio specifico (<code>/trips/123-abc</code>). Il parametro <code>tripId</code> \u00e8 dinamicamente disponibile.</p> </li> </ul> <p>Questo approccio \u00e8 intuitivo e rende l'organizzazione del progetto immediatamente comprensibile.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#data-loading-universale","title":"Data Loading Universale","text":"<p>Questa \u00e8 la funzionalit\u00e0 pi\u00f9 potente di SvelteKit per la nostra architettura. Per ogni pagina, possiamo definire una funzione <code>load</code> che si occupa di caricare i dati necessari prima che la pagina venga renderizzata.</p> <ul> <li> <p><code>+page.server.ts</code>: Questo file esporta una funzione <code>load</code> che viene eseguita esclusivamente sul server. \u00c8 il luogo perfetto e sicuro per fare chiamate al nostro backend Go, usare chiavi API segrete o accedere direttamente a un database. I dati caricati qui vengono poi passati in modo sicuro al componente della pagina.</p> </li> <li> <p><code>+page.ts</code>: Esporta una funzione <code>load</code> che viene eseguita sul server durante la prima visita e poi sul client durante le navigazioni successive. Utile per chiamare API pubbliche.</p> </li> </ul> <p>Per \"Where Should I Be?\", useremo quasi esclusivamente i file <code>+page.server.ts</code> per comunicare in modo sicuro con i nostri microservizi backend.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#form-actions-e-progressive-enhancement","title":"Form Actions e Progressive Enhancement","text":"<p>SvelteKit ha un sistema integrato per la gestione dei form, chiamato Actions. Permette di definire funzioni lato server che gestiscono l'invio di un form. L'aspetto migliore \u00e8 che funziona anche se JavaScript \u00e8 disabilitato (progressive enhancement), ma quando JavaScript \u00e8 attivo, SvelteKit gestisce il tutto in modo asincrono senza un ricaricamento completo della pagina, offrendo un'esperienza utente moderna.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#253-costruire-la-pagina-di-dettaglio-di-un-viaggio","title":"25.3. Costruire la Pagina di Dettaglio di un Viaggio","text":"<p>Vediamo come tutti questi pezzi si uniscono per costruire la pagina <code>/trips/[tripId]</code>.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-1-caricare-i-dati-sul-server-pageserverts","title":"Passo 1: Caricare i Dati sul Server (<code>+page.server.ts</code>)","text":"<p>Creiamo un file per definire la nostra funzione <code>load</code> lato server. Questa funzione utilizzer\u00e0 il client API tipizzato che abbiamo generato con OpenAPI nel Capitolo 19.</p> <p>TypeScript</p> <pre><code>// src/routes/trips/[tripId]/+page.server.ts\n\n\n\nimport { error } from '@sveltejs/kit';\n\n\n\nimport type { PageServerLoad } from './$types';\n\n\n\nimport { api } from '$lib/server/api'; // Il nostro client API generato\n\n\n\n\n\nexport const load: PageServerLoad = async ({ params, fetch }) =&gt; {\n\n\n\n\u00a0\u00a0\u00a0\u00a0console.log(`Caricamento dati per il viaggio: ${params.tripId}`);\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0try {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Usiamo il client API generato per chiamare il nostro backend Go.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// La chiamata \u00e8 sicura, avviene server-to-server.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// `fetch` viene passato da SvelteKit per poter fare chiamate autenticate.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const tripDetail = await api.getTripById(params.tripId, {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch: fetch, // Passiamo il fetch di SvelteKit per inoltrare i cookie/header\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!tripDetail) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw error(404, 'Viaggio non trovato');\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trip: tripDetail, // Passiamo i dati al componente della pagina\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\n\n\n\u00a0\u00a0\u00a0\u00a0} catch (e) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Gestione degli errori\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error('Errore nel caricamento del viaggio:', e);\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw error(500, 'Impossibile caricare i dati del viaggio');\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n};\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#passo-2-renderizzare-il-componente-ui-pagesvelte","title":"Passo 2: Renderizzare il Componente UI (<code>+page.svelte</code>)","text":"<p>Ora creiamo il componente Svelte che ricever\u00e0 e visualizzer\u00e0 i dati.</p> <p>HTML</p> <pre><code>&lt;script lang=\"ts\"&gt;\n\n\n\n\u00a0\u00a0import type { PageData } from './$types';\n\n\n\n\n\n\u00a0\u00a0// SvelteKit passa automaticamente i dati dalla funzione 'load'\n\n\n\n\u00a0\u00a0// a questa prop 'data'. \u00c8 tutto tipizzato!\n\n\n\n\u00a0\u00a0export let data: PageData;\n\n\n\n\n\n\u00a0\u00a0// Assegnamo i dati a una variabile pi\u00f9 comoda\n\n\n\n\u00a0\u00a0const { trip } = data;\n\n\n\n&lt;/script&gt;\n\n\n\n\n\n&lt;div class=\"container mx-auto p-4\"&gt;\n\n\n\n\u00a0\u00a0&lt;h1 class=\"text-3xl font-bold mb-2\"&gt;{trip.name}&lt;/h1&gt;\n\n\n\n\u00a0\u00a0&lt;span class=\"badge badge-primary\"&gt;{trip.status}&lt;/span&gt;\n\n\n\n\n\n\u00a0\u00a0&lt;div class=\"my-4\"&gt;\n\n\n\n\u00a0\u00a0\u00a0\u00a0&lt;p&gt;Dal: {new Date(trip.startDate).toLocaleDateString()}&lt;/p&gt;\n\n\n\n\u00a0\u00a0\u00a0\u00a0&lt;p&gt;Al: {new Date(trip.endDate).toLocaleDateString()}&lt;/p&gt;\n\n\n\n\u00a0\u00a0&lt;/div&gt;\n\n\n\n\n\n\u00a0\u00a0&lt;h2 class=\"text-2xl font-semibold mt-6 mb-3\"&gt;Tappe del Viaggio&lt;/h2&gt;\n\n\n\n\u00a0\u00a0{#if trip.stops &amp;&amp; trip.stops.length &gt; 0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0&lt;ul class=\"list-disc pl-5\"&gt;\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{#each trip.stops as stop}\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;span class=\"font-medium\"&gt;{stop.placeName}&lt;/span&gt; (Giorno {stop.day})\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/li&gt;\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{/each}\n\n\n\n\u00a0\u00a0\u00a0\u00a0&lt;/ul&gt;\n\n\n\n\u00a0\u00a0{:else}\n\n\n\n\u00a0\u00a0\u00a0\u00a0&lt;p&gt;Nessuna tappa ancora aggiunta a questo viaggio.&lt;/p&gt;\n\n\n\n\u00a0\u00a0{/if}\n\n\n\n&lt;/div&gt;\n</code></pre> <p>Questo codice \u00e8 pulito, leggibile e potente. La logica di caricamento dei dati \u00e8 nettamente separata dalla logica di presentazione, e l'integrazione con il nostro backend \u00e8 sicura e tipizzata.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#254-gestione-dello-stato-globale-con-gli-stores","title":"25.4. Gestione dello Stato Globale con gli Stores","text":"<p>Per lo stato che deve essere condiviso tra diversi componenti (come le informazioni sull'utente autenticato), Svelte offre un meccanismo semplice e potente: gli Stores. Uno store \u00e8 semplicemente un oggetto con un metodo <code>subscribe</code> a cui i componenti possono \"abbonarsi\" per ricevere notifiche sui cambiamenti.</p> <p>Svelte fornisce delle implementazioni gi\u00e0 pronte:</p> <ul> <li> <p><code>writable</code>: Uno store il cui valore pu\u00f2 essere impostato e aggiornato dall'esterno.</p> </li> <li> <p><code>readable</code>: Uno store il cui valore pu\u00f2 essere impostato solo dall'interno (es. per dati che arrivano da un WebSocket).</p> </li> <li> <p><code>derived</code>: Uno store il cui valore \u00e8 derivato da uno o pi\u00f9 altri stores.</p> </li> </ul> <p>Per \"Where Should I Be?\", potremmo creare un <code>userStore</code> per tenere traccia dello stato di autenticazione dell'utente, accessibile da qualsiasi punto della nostra UI.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#255-riepilogo-dellintegrazione-con-il-backend","title":"25.5. Riepilogo dell'Integrazione con il Backend","text":"<p>Vediamo come il nostro stack completo collabora:</p> <ol> <li> <p>Il Contratto: Il file <code>api.yaml</code> (OpenAPI) \u00e8 la fonte di verit\u00e0 che definisce l'API tra SvelteKit e il backend Go.</p> </li> <li> <p>Il Codice Generato: <code>oapi-codegen</code> (per Go) e <code>openapi-typescript-codegen</code> (per SvelteKit) generano il codice boilerplate, garantendo la coerenza.</p> </li> <li> <p>L'Autenticazione: L'app SvelteKit gestisce il flusso di login con Cognito (Capitolo 4). Memorizza il JWT ricevuto e lo passa al client API.</p> </li> <li> <p>Il Caricamento dei Dati: Le funzioni <code>load</code> in <code>+page.server.ts</code> usano il client API tipizzato per chiamare in modo sicuro gli endpoint del nostro backend Go.</p> </li> <li> <p>CORS: Il nostro server Go deve essere configurato con una policy CORS (Cross-Origin Resource Sharing) per accettare le richieste provenienti dal dominio della nostra app SvelteKit.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#256-conclusioni-un-frontend-degno-di-un-backend-robusto","title":"25.6. Conclusioni: Un Frontend Degno di un Backend Robusto","text":"<p>La scelta di SvelteKit per il nostro progetto non \u00e8 casuale. La sua filosofia di semplicit\u00e0, performance e una superba esperienza di sviluppo si sposa perfettamente con l'etica di Go.</p> <ul> <li> <p>Elimina la complessit\u00e0 inutile, permettendoci di concentrarci sulla costruzione di interfacce utente efficaci.</p> </li> <li> <p>Il suo modello di data loading server-side fornisce un meccanismo naturale e sicuro per interagire con i nostri microservizi backend.</p> </li> <li> <p>La combinazione di un backend Go ben architettato, un frontend SvelteKit moderno e un contratto OpenAPI che li unisce, rappresenta un'architettura full-stack professionale, performante e piacevole da sviluppare.</p> </li> </ul> <p>Con la nostra interfaccia utente in costruzione, siamo ora pronti ad affrontare gli ultimi capitoli, dedicati al processo di sviluppo, al deployment continuo e al monitoraggio della nostra applicazione in produzione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-26-il-ciclo-di-sviluppo-iterativo-di-due-settimane","title":"Capitolo 26: Il Ciclo di Sviluppo Iterativo di Due Settimane","text":"<p>Abbiamo percorso un lungo cammino. Abbiamo un'architettura robusta basata sui principi del Domain-Driven Design e della Clean Architecture. Abbiamo scelto le nostre tecnologie, dal backend in Go al frontend in SvelteKit, passando per i servizi cloud di AWS. Abbiamo definito come testare il nostro sistema per garantirne la qualit\u00e0. Ora, ci troviamo di fronte a una domanda fondamentale: come tradiamo tutto questo design in software funzionante, consegnato agli utenti?</p> <p>Un grande design \u00e8 inutile se il processo per realizzarlo \u00e8 caotico o inefficiente. L'approccio \"Waterfall\", dove si progetta tutto per mesi per poi costruire per altri mesi, \u00e8 troppo rigido per il mondo moderno, dove i requisiti cambiano e l'apprendimento \u00e8 continuo. D'altra parte, un approccio senza alcuna struttura porta al caos, al debito tecnico e a scadenze mancate.</p> <p>La soluzione risiede nell'adottare un processo di sviluppo iterativo e incrementale. In questo capitolo, definiremo il nostro \"battito cardiaco\" operativo: un ciclo di sviluppo di due settimane, spesso chiamato Sprint. Questo ritmo ci fornir\u00e0 la struttura per pianificare, costruire e adattarci, permettendoci di navigare la complessit\u00e0 dello sviluppo e di fornire valore ai nostri utenti in modo prevedibile e sostenibile.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#261-perche-due-settimane-il-ritmo-dello-sviluppo-the-rhythm-of-development","title":"26.1. Perch\u00e9 Due Settimane? Il Ritmo dello Sviluppo (The Rhythm of Development)","text":"<p>La scelta della durata di un ciclo di sviluppo (o Sprint) \u00e8 strategica. Un ciclo di due settimane offre un equilibrio quasi perfetto per la maggior parte dei team e dei progetti, inclusa la nostra applicazione \"Where Should I Be?\".</p> <ul> <li> <p>\u00c8 abbastanza lungo per costruire qualcosa di significativo: In due settimane, un team di sviluppo pu\u00f2 completare una o pi\u00f9 funzionalit\u00e0 verticali (dall'interfaccia utente al database), producendo un incremento di valore tangibile che pu\u00f2 essere mostrato e discusso.</p> </li> <li> <p>\u00c8 abbastanza corto per un feedback rapido: Il vantaggio pi\u00f9 grande dell'agilit\u00e0 \u00e8 la capacit\u00e0 di adattarsi. Se, alla fine di due settimane, ci accorgiamo che una funzionalit\u00e0 non \u00e8 quella che gli utenti vogliono o che stiamo seguendo un percorso tecnico sbagliato, abbiamo perso al massimo due settimane di lavoro. Questo riduce drasticamente il rischio rispetto a cicli di sviluppo di mesi.</p> </li> <li> <p>Crea una cadenza prevedibile: Il ripetersi di un ciclo di due settimane (pianificazione, sviluppo, revisione, retrospettiva) crea un ritmo costante e prevedibile. Questa cadenza \u00e8 rassicurante per il team, che sa cosa aspettarsi, e utile per il business, che pu\u00f2 avere una visibilit\u00e0 pi\u00f9 chiara sui progressi e sulle previsioni di rilascio.</p> </li> </ul> <p>Un ciclo pi\u00f9 lungo (es. un mese) rischia di trasformarsi in un mini-waterfall, mentre un ciclo pi\u00f9 corto (es. una settimana) pu\u00f2 essere stressante e l'overhead delle \"cerimonie\" (riunioni di pianificazione, ecc.) pu\u00f2 diventare sproporzionato rispetto al tempo di sviluppo effettivo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#262-gli-attori-del-processo-ruoli-e-responsabilita","title":"26.2. Gli Attori del Processo: Ruoli e Responsabilit\u00e0","text":"<p>Perch\u00e9 il nostro processo funzioni, abbiamo bisogno di ruoli chiari. Ispirandoci al framework Scrum, definiamo tre ruoli principali:</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-product-owner-o-product-manager","title":"Il Product Owner (o Product Manager)","text":"<p>\u00c8 la voce del business e dell'utente. La sua responsabilit\u00e0 principale \u00e8 massimizzare il valore del prodotto risultante dal lavoro del team.</p> <ul> <li> <p>Gestisce il Product Backlog: Una lista ordinata di tutto ci\u00f2 che \u00e8 desiderato nel prodotto.</p> </li> <li> <p>Prioritizza: Decide l'ordine degli elementi nel backlog per focalizzare il team sulle cose pi\u00f9 importanti.</p> </li> <li> <p>Definisce il \"Cosa\" e il \"Perch\u00e9\": Comunica chiaramente la visione e gli obiettivi di ogni funzionalit\u00e0.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-team-di-sviluppo-the-development-team","title":"Il Team di Sviluppo (The Development Team)","text":"<p>\u00c8 il cuore pulsante del processo. Un gruppo cross-funzionale di professionisti che possiedono le competenze per trasformare gli elementi del backlog in un incremento di software funzionante.</p> <ul> <li> <p>Composizione: Nel nostro caso, include sviluppatori Go, sviluppatori SvelteKit, esperti di AWS e tester.</p> </li> <li> <p>Auto-organizzazione: Il team decide come trasformare il lavoro richiesto in software funzionante. Nessuno, nemmeno il Product Owner o lo Scrum Master, dice al team come eseguire il proprio lavoro tecnico.</p> </li> <li> <p>Responsabilit\u00e0: Creare un incremento di alta qualit\u00e0 che rispetti la \"Definition of Done\" (definizione di \"fatto\").</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#lo-scrum-master-o-team-lead-agile-coach","title":"Lo Scrum Master (o Team Lead / Agile Coach)","text":"<p>\u00c8 il facilitatore e il custode del processo. \u00c8 un servant-leader per il team.</p> <ul> <li> <p>Rimuove gli Ostacoli (Impediments): Qualsiasi cosa che rallenti o blocchi il team di sviluppo \u00e8 un problema che lo Scrum Master deve aiutare a risolvere.</p> </li> <li> <p>Protegge il Team: Difende il team da interferenze esterne e distrazioni durante lo sprint.</p> </li> <li> <p>Insegna e Guida: Si assicura che il team comprenda e segua i principi e le pratiche agili, facilitando le cerimonie e promuovendo il miglioramento continuo.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#263-gli-artefatti-del-lavoro-rendere-tutto-visibile","title":"26.3. Gli Artefatti del Lavoro: Rendere Tutto Visibile","text":"<p>Il processo si basa su alcuni \"artefatti\" chiave che rendono il lavoro e il progresso trasparenti a tutti.</p> <ul> <li> <p>Product Backlog: La lista completa e ordinata di tutte le funzionalit\u00e0, requisiti, miglioramenti e fix desiderati per il prodotto. \u00c8 un documento vivo, che viene costantemente perfezionato (un processo chiamato refinement o grooming).</p> </li> <li> <p>Sprint Backlog: Il sottoinsieme di elementi del Product Backlog che il Team di Sviluppo seleziona per uno Sprint. Include anche il piano per consegnare questi elementi. Una volta definito all'inizio dello Sprint, solo il Team di Sviluppo pu\u00f2 modificarlo.</p> </li> <li> <p>Incremento (Increment): La somma di tutti gli elementi del backlog completati durante uno Sprint, integrata con il lavoro di tutti gli Sprint precedenti. Al termine di uno Sprint, il nuovo Incremento deve essere \"potenzialmente rilasciabile\", il che significa che deve essere testato, integrato e funzionante.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#264-le-cerimonie-il-ciclo-di-vita-di-due-settimane","title":"26.4. Le Cerimonie: Il Ciclo di Vita di Due Settimane \ud83d\uddd3\ufe0f","text":"<p>Il nostro ciclo di due settimane \u00e8 scandito da una serie di riunioni (o \"cerimonie\"), ognuna con uno scopo preciso.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#giorno-1-sprint-planning-pianificazione-max-4-ore","title":"Giorno 1: Sprint Planning (Pianificazione - max 4 ore)","text":"<ul> <li> <p>Scopo: Definire il lavoro da svolgere nello Sprint.</p> </li> <li> <p>Come funziona:</p> </li> </ul> <p>1. Il Product Owner propone l'obiettivo dello Sprint e presenta gli elementi pi\u00f9 importanti del Product Backlog.</p> <p>2. Il Team di Sviluppo fa domande per capire a fondo ogni elemento (qui il nostro Linguaggio Ubiquo \u00e8 fondamentale!).</p> <p>3. Il team seleziona gli elementi che ritiene di poter completare nello Sprint, creando lo Sprint Backlog.</p> <p>4. Il team definisce uno Sprint Goal: una singola frase che descrive l'obiettivo principale dello Sprint, fornendo uno scopo comune.</p> <ul> <li>Esempio di Sprint Goal: \"Un utente pu\u00f2 registrarsi, accedere e visualizzare una dashboard vuota dei suoi viaggi.\"</li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#ogni-giorno-daily-stand-up-15-minuti","title":"Ogni Giorno: Daily Stand-up (15 minuti)","text":"<ul> <li> <p>Scopo: Sincronizzare il team e identificare ostacoli. Non \u00e8 una riunione di reporting.</p> </li> <li> <p>Come funziona: Ogni membro del team risponde brevemente a tre domande:</p> </li> </ul> <p>1. Cosa ho fatto ieri per aiutare il team a raggiungere lo Sprint Goal?</p> <p>2. Cosa far\u00f2 oggi per aiutare il team a raggiungere lo Sprint Goal?</p> <p>3. Vedo qualche ostacolo che impedisce a me o al team di raggiungere lo Sprint Goal?</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#ultimo-giorno-sprint-review-revisione-max-2-ore","title":"Ultimo Giorno: Sprint Review (Revisione - max 2 ore)","text":"<ul> <li> <p>Scopo: Ispezionare l'Incremento e ottenere feedback dagli stakeholder.</p> </li> <li> <p>Come funziona:</p> </li> </ul> <p>- \u00c8 una sessione informale, non una presentazione formale.</p> <p>- Il Team di Sviluppo fa una demo dal vivo del software funzionante che ha costruito.</p> <p>- Il Product Owner e gli altri stakeholder forniscono feedback, fanno domande e discutono su cosa fare dopo.</p> <p>- Il Product Backlog pu\u00f2 essere aggiornato sulla base di questo feedback.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#ultimo-giorno-sprint-retrospective-retrospettiva-max-15-ore","title":"Ultimo Giorno: Sprint Retrospective (Retrospettiva - max 1.5 ore)","text":"<ul> <li> <p>Scopo: Ispezionare e migliorare il processo di lavoro del team. \u00c8 la cerimonia pi\u00f9 importante per il miglioramento continuo.</p> </li> <li> <p>Come funziona:</p> </li> </ul> <p>- Partecipano solo il Team di Sviluppo e lo Scrum Master. \u00c8 uno spazio sicuro.</p> <p>- Il team discute apertamente su: Cosa \u00e8 andato bene? Cosa potrebbe essere migliorato? Quali azioni concrete intraprenderemo nel prossimo Sprint per migliorare?</p> <p>- Esempi di azioni: \"Miglioriamo la definizione delle nostre user story\", \"Automatizziamo quel test manuale che ci rallenta\", \"Dedichiamo del tempo per ridurre il debito tecnico nel modulo X\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#265-mettere-tutto-insieme-uno-sprint-esempio-per-where-should-i-be","title":"26.5. Mettere Tutto Insieme: Uno Sprint Esempio per \"Where Should I Be?\"","text":"<p>Immaginiamo di essere all'inizio del nostro progetto.</p> <ul> <li> <p>Sprint Goal: \"L'utente pu\u00f2 creare un nuovo viaggio e vederlo nella sua dashboard.\"</p> </li> <li> <p>Sprint Backlog (User Stories):</p> </li> </ul> <p>1. Come utente registrato, voglio vedere un pulsante \"Nuovo Viaggio\" sulla mia dashboard per poter iniziare la pianificazione.</p> <p>2. Come utente, quando clicco \"Nuovo Viaggio\", voglio vedere un form dove posso inserire il nome del viaggio, una data di inizio e una data di fine.</p> <p>3. Come utente, quando invio il form, il nuovo viaggio deve essere salvato e voglio essere reindirizzato alla mia dashboard.</p> <p>4. Come utente, voglio vedere il viaggio appena creato apparire come una \"card\" nella mia dashboard.</p> <ul> <li>Lavoro del Team durante lo Sprint:</li> </ul> <p>- Il team scompone queste storie in task tecnici:</p> <p>- Backend: Creare l'endpoint <code>POST /trips</code> nell'API Gateway.</p> <p>- Backend: Implementare il caso d'uso <code>CreateTrip</code> nell'Application Service del <code>Trip Planning Context</code>.</p> <p>- Backend: Implementare l'endpoint <code>GET /trips</code> per la dashboard.</p> <p>- Frontend: Creare la pagina della dashboard in SvelteKit.</p> <p>- Frontend: Creare il componente del form per il nuovo viaggio.</p> <p>- Frontend: Integrare le chiamate API usando il nostro client generato.</p> <p>- Testing: Scrivere test unitari e di integrazione per il nuovo codice.</p> <ul> <li> <p>Sprint Review: Il team mostra dal vivo l'intero flusso: l'utente clicca il pulsante, compila il form, preme invio e la card del nuovo viaggio appare magicamente sulla dashboard.</p> </li> <li> <p>Sprint Retrospective: Il team potrebbe scoprire che: \"La comunicazione tra il dev frontend e il dev backend sulla struttura esatta del form \u00e8 stata difficile. Per il prossimo Sprint, faremo una breve sessione di pair programming per definire insieme i tipi TypeScript e il contratto OpenAPI prima di iniziare a scrivere il codice.\"</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#266-conclusioni-agilita-e-disciplina-non-caos","title":"26.6. Conclusioni: Agilit\u00e0 \u00e8 Disciplina, non Caos","text":"<p>Un ciclo di sviluppo iterativo non \u00e8 un invito a \"fare le cose a caso\". Al contrario, \u00e8 un framework disciplinato che sostituisce la rigidit\u00e0 di un piano a lungo termine con la flessibilit\u00e0 di un ciclo di feedback breve e costante.</p> <p>Questo ritmo di due settimane ci fornisce:</p> <ul> <li> <p>Trasparenza: Tutti sanno su cosa sta lavorando il team e quali sono i progressi.</p> </li> <li> <p>Prevedibilit\u00e0: Dopo alcuni sprint, il team sviluppa una comprensione della propria velocit\u00e0, rendendo le stime future pi\u00f9 accurate.</p> </li> <li> <p>Adattabilit\u00e0: La capacit\u00e0 di cambiare rotta ogni due settimane \u00e8 il nostro pi\u00f9 grande vantaggio competitivo.</p> </li> <li> <p>Miglioramento Continuo: La retrospettiva garantisce che il team non solo costruisca il prodotto, ma costruisca anche un processo di lavoro migliore.</p> </li> </ul> <p>Questo processo agile \u00e8 il motore che alimenta la nostra macchina ingegneristica. Con questo motore acceso, siamo pronti a costruire l'infrastruttura di automazione (IaC e CI/CD) che supporter\u00e0 e accelerer\u00e0 questo ciclo di consegna continua.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-27-infrastructure-as-code-iac-con-aws-cdk","title":"Capitolo 27: Infrastructure as Code (IaC) con AWS CDK","text":"<p>Abbiamo progettato la nostra architettura, scritto il nostro codice e definito i nostri processi di sviluppo. Ora dobbiamo affrontare una domanda critica: dove verr\u00e0 eseguita questa applicazione? La nostra architettura si basa su un ricco ecosistema di servizi AWS: Lambda, SQS, DynamoDB, API Gateway, Cognito. Come creiamo, configuriamo e gestiamo queste risorse in modo affidabile e ripetibile?</p> <p>L'approccio tradizionale, e pi\u00f9 pericoloso, \u00e8 quello di affidarsi alla console di gestione di AWS. Un ingegnere si collega, clicca su una serie di pulsanti, compila form, imposta permessi e, se tutto va bene, l'infrastruttura \u00e8 pronta. Questo metodo, ironicamente soprannominato \"ClickOps\", \u00e8 una ricetta per il disastro in qualsiasi progetto serio. \u00c8 manuale, lento, prono a errori umani, non documentato e impossibile da replicare con coerenza.</p> <p>Per costruire sistemi di livello enterprise, dobbiamo trattare la nostra infrastruttura con lo stesso rigore con cui trattiamo il nostro codice applicativo. Dobbiamo adottare il paradigma dell'Infrastructure as Code (IaC). In questo capitolo, esploreremo come definire l'intera nostra infrastruttura AWS utilizzando un moderno linguaggio di programmazione e uno strumento potente come l'AWS Cloud Development Kit (CDK).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#271-il-problema-la-fragilita-del-clickops","title":"27.1. Il Problema: La Fragilit\u00e0 del \"ClickOps\"","text":"<p>Gestire l'infrastruttura manualmente tramite un'interfaccia grafica \u00e8 insostenibile per diverse ragioni:</p> <ul> <li> <p>Non \u00e8 Ripetibile: Se devi creare un nuovo ambiente per lo staging o per un test, come puoi essere sicuro che sia esattamente identico all'ambiente di produzione? La probabilit\u00e0 di dimenticare una configurazione o un permesso \u00e8 altissima.</p> </li> <li> <p>Non \u00e8 Versionabile: Se un'impostazione dell'infrastruttura viene modificata, come si tiene traccia di chi ha fatto la modifica, quando e perch\u00e9? Come si pu\u00f2 tornare alla versione precedente se la modifica causa un problema? Con il ClickOps, non si pu\u00f2. La cronologia \u00e8 persa.</p> </li> <li> <p>\u00c8 Lento e Non Scala: Creare manualmente decine di risorse interconnesse \u00e8 un processo lungo e noioso. Automatizzare il deployment diventa impossibile.</p> </li> <li> <p>\u00c8 Pieno di Rischi: Una modifica manuale errata in produzione, fatta magari sotto pressione, pu\u00f2 causare un'interruzione del servizio. Non c'\u00e8 un processo di revisione (code review) o di validazione.</p> </li> </ul> <p>L'Infrastructure as Code (IaC) risolve tutti questi problemi applicando le pratiche consolidate dello sviluppo software alla gestione dell'infrastruttura. L'intera configurazione del nostro ambiente cloud viene definita in file di codice, che possono essere versionati, revisionati, testati e automatizzati.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#272-il-panorama-delliac-su-aws-e-la-scelta-del-cdk","title":"27.2. Il Panorama dell'IaC su AWS e la Scelta del CDK","text":"<p>Esistono diversi strumenti per implementare l'IaC su AWS.</p> <ul> <li> <p>AWS CloudFormation: \u00c8 il servizio IaC nativo di AWS. Si definisce l'infrastruttura in file YAML o JSON. \u00c8 potente e affidabile, ma anche estremamente verboso. Definire un'architettura complessa pu\u00f2 richiedere migliaia di righe di configurazione, con molte ripetizioni.</p> </li> <li> <p>Terraform: \u00c8 lo strumento open-source pi\u00f9 popolare, sviluppato da HashiCorp. Usa un suo linguaggio dichiarativo (HCL), che \u00e8 pi\u00f9 conciso di CloudFormation. \u00c8 cloud-agnostico, ma per questo capitolo ci concentriamo su strumenti nativi di AWS.</p> </li> <li> <p>AWS CDK (Cloud Development Kit): \u00c8 l'approccio pi\u00f9 moderno e \"developer-friendly\" di AWS. Il CDK ci permette di definire la nostra infrastruttura cloud usando linguaggi di programmazione familiari come TypeScript (il pi\u00f9 supportato), Python, Go, Java o C#.</p> </li> </ul> <p>Per questo libro, abbiamo scelto l'AWS CDK con TypeScript. Perch\u00e9?</p> <ol> <li> <p>La Potenza di un Vero Linguaggio di Programmazione: Possiamo usare cicli, condizioni, funzioni, classi e astrazioni per definire la nostra infrastruttura in modo conciso e riutilizzabile (DRY - Don't Repeat Yourself).</p> </li> <li> <p>Astrazioni di Alto Livello (Constructs): Il CDK fornisce una libreria di \"costrutti\" che rappresentano le risorse AWS. Oltre ai costrutti di basso livello (L1) che mappano 1:1 con CloudFormation, esistono costrutti di alto livello (L2/L3) che incapsulano le best practice. Ad esempio, creare una VPC (Virtual Private Cloud) sicura e con sottoreti pubbliche e private richiede poche righe di codice, contro centinaia di righe in CloudFormation.</p> </li> <li> <p>Sicurezza dei Tipi e Autocompletamento: Usando TypeScript, il nostro IDE ci aiuter\u00e0 con il completamento automatico, il controllo dei tipi e la documentazione inline, riducendo drasticamente gli errori di configurazione prima ancora del deployment.</p> </li> <li> <p>Sintetizza in CloudFormation: Il CDK non sostituisce CloudFormation, ma lo migliora. Il nostro codice TypeScript viene \"sintetizzato\" in un template CloudFormation standard. Otteniamo cos\u00ec il meglio di due mondi: un'esperienza di sviluppo moderna e la potenza del motore di deployment transazionale e affidabile di CloudFormation.</p> </li> <li> <p>Allineamento con lo Stack: Poich\u00e9 il nostro frontend SvelteKit \u00e8 gi\u00e0 basato su TypeScript, l'uso di TypeScript anche per l'IaC crea una coerenza tecnologica e abbassa la barriera d'ingresso per gli sviluppatori del team.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#273-costruire-lo-stack-per-il-nostro-worker-asincrono","title":"27.3. Costruire lo Stack per il Nostro Worker Asincrono","text":"<p>Mettiamoci al lavoro. Useremo il CDK per definire l'infrastruttura del nostro worker asincrono, descritto nel Capitolo 22, composto da una coda SQS, una tabella DynamoDB e una funzione Lambda in Go.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#primi-passi-e-struttura-del-progetto","title":"Primi Passi e Struttura del Progetto","text":"<p>Dopo aver installato gli strumenti necessari (AWS CLI, Node.js, AWS CDK), inizializziamo il nostro progetto:</p> <p>Bash</p> <pre><code>mkdir infrastructure\n\n\n\ncd infrastructure\n\n\n\ncdk init app --language typescript\n</code></pre> <p>Questo crea una struttura di base. Il file pi\u00f9 importante per noi sar\u00e0 <code>lib/infrastructure-stack.ts</code>, dove definiremo le nostre risorse.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#implementazione-dello-stack-cdk","title":"Implementazione dello Stack CDK","text":"<p>Modifichiamo il file <code>lib/infrastructure-stack.ts</code> per definire i nostri componenti.</p> <p>TypeScript</p> <pre><code>// lib/infrastructure-stack.ts\n\n\n\nimport * as cdk from 'aws-cdk-lib';\n\n\n\nimport { Construct } from 'constructs';\n\n\n\nimport * as sqs from 'aws-cdk-lib/aws-sqs';\n\n\n\nimport * as dynamodb from 'aws-cdk-lib/aws-dynamodb';\n\n\n\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\n\n\nimport * as iam from 'aws-cdk-lib/aws-iam';\n\n\n\nimport { SqsEventSource } from 'aws-cdk-lib/aws-lambda-event-sources';\n\n\n\nimport * as path from 'path';\n\n\n\n\n\nexport class WhereShouldIBeStack extends cdk.Stack {\n\n\n\n\u00a0\u00a0constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n\n\n\n\u00a0\u00a0\u00a0\u00a0super(scope, id, props);\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 1. Tabella DynamoDB ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Definiamo la nostra tabella con Single-Table Design.\n\n\n\n\u00a0\u00a0\u00a0\u00a0const table = new dynamodb.Table(this, 'AppTable', {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tableName: 'where-should-i-be-table',\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0partitionKey: { name: 'PK', type: dynamodb.AttributeType.STRING },\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sortKey: { name: 'SK', type: dynamodb.AttributeType.STRING },\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, // Modello On-Demand, perfetto per serverless\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0removalPolicy: cdk.RemovalPolicy.DESTROY, // Per questo esempio, distruggi la tabella se lo stack viene eliminato. In produzione, usare RETAIN.\n\n\n\n\u00a0\u00a0\u00a0\u00a0});\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 2. Coda SQS con Dead-Letter Queue (DLQ) ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo prima la DLQ per i messaggi falliti.\n\n\n\n\u00a0\u00a0\u00a0\u00a0const deadLetterQueue = new sqs.Queue(this, 'PersistenceWorkerDLQ');\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo la coda principale, configurata per usare la DLQ.\n\n\n\n\u00a0\u00a0\u00a0\u00a0const queue = new sqs.Queue(this, 'PersistenceWorkerQueue', {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0visibilityTimeout: cdk.Duration.seconds(30),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0deadLetterQueue: {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxReceiveCount: 3, // Dopo 3 tentativi falliti, il messaggio va nella DLQ.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0queue: deadLetterQueue,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\n\n\n\u00a0\u00a0\u00a0\u00a0});\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 3. Ruolo IAM per la Funzione Lambda ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo un ruolo con i permessi minimi indispensabili (Principle of Least Privilege).\n\n\n\n\u00a0\u00a0\u00a0\u00a0const lambdaRole = new iam.Role(this, 'PersistenceWorkerRole', {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0managedPolicies: [\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Policy gestita da AWS per i log di base su CloudWatch.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\n\n\n\u00a0\u00a0\u00a0\u00a0});\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 4. Funzione Lambda in Go ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0const goWorkerLambda = new lambda.Function(this, 'PersistenceWorker', {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0runtime: lambda.Runtime.GO_1_X,\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Il codice Go deve essere compilato per Linux amd64.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// `path.join` costruisce il percorso relativo al nostro codice Go compilato.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0code: lambda.Code.fromAsset(path.join(__dirname, '..', '..', 'services', 'trip-persistence-worker', 'dist')),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handler: 'main', // Il nome del nostro eseguibile Go.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0role: lambdaRole, // Assegniamo il ruolo IAM.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeout: cdk.Duration.seconds(15),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0environment: {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TABLE_NAME: table.tableName, // Passiamo il nome della tabella come variabile d'ambiente.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\n\n\n\u00a0\u00a0\u00a0\u00a0});\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 5. Concessione dei Permessi e Collegamento dei Servizi ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Concediamo esplicitamente alla Lambda i permessi di cui ha bisogno.\n\n\n\n\u00a0\u00a0\u00a0\u00a0queue.grantConsumeMessages(goWorkerLambda); // Permesso di leggere dalla coda SQS.\n\n\n\n\u00a0\u00a0\u00a0\u00a0table.grantReadWriteData(goWorkerLambda); \u00a0 // Permesso di leggere/scrivere sulla tabella DynamoDB.\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Impostiamo la coda SQS come trigger per la nostra Lambda.\n\n\n\n\u00a0\u00a0\u00a0\u00a0goWorkerLambda.addEventSource(new SqsEventSource(queue, {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batchSize: 5, // Processa fino a 5 messaggi per volta.\n\n\n\n\u00a0\u00a0\u00a0\u00a0}));\n\n\n\n\u00a0\u00a0\u00a0\u00a0// === 6. Output (Opzionale ma utile) ===\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Esponiamo l'URL della coda come output dello stack per un facile riferimento.\n\n\n\n\u00a0\u00a0\u00a0\u00a0new cdk.CfnOutput(this, 'QueueURL', { value: queue.queueUrl });\n\n\n\n\u00a0\u00a0}\n\n\n\n}\n</code></pre> <p>Questo codice TypeScript definisce in modo chiaro, leggibile e riutilizzabile l'intera nostra infrastruttura serverless.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#274-il-ciclo-di-vita-del-deployment-con-cdk","title":"27.4. Il Ciclo di Vita del Deployment con CDK","text":"<p>Una volta definito lo stack, il nostro flusso di lavoro diventa semplice e potente.</p> <ol> <li><code>cdk synth</code>: Questo comando compila il nostro codice TypeScript e lo \"sintetizza\" in un template AWS CloudFormation. \u00c8 un ottimo modo per vedere cosa verr\u00e0 creato.</li> </ol> <p>Bash</p> <p>```bash</p> <p>cdk synth</p> <p>```</p> <ol> <li><code>cdk diff</code>: Questo comando confronta il template appena sintetizzato con lo stato attuale dell'infrastruttura deployata su AWS e ci mostra una <code>diff</code> simile a quella di <code>git</code>. Ci dice esattamente cosa sta per essere creato, modificato o cancellato. \u00c8 la nostra rete di sicurezza finale prima di un deployment.</li> </ol> <p>Bash</p> <p>```bash</p> <p>cdk diff</p> <p>```</p> <ol> <li><code>cdk deploy</code>: Questo comando prende il template CloudFormation e lo applica al nostro account AWS, eseguendo il provisioning o l'aggiornamento di tutte le risorse. Il CDK gestir\u00e0 il caricamento del codice Lambda e tutte le configurazioni.</li> </ol> <p>Bash</p> <p>```bash</p> <p>cdk deploy</p> <p>```</p> <ol> <li><code>cdk destroy</code>: Quando abbiamo finito (ad esempio, con un ambiente di test), questo comando distrugge in modo pulito tutte le risorse create dallo stack.</li> </ol> <p>Bash</p> <p>```bash</p> <p>cdk destroy</p> <p>```</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#275-conclusioni-linfrastruttura-e-software","title":"27.5. Conclusioni: L'Infrastruttura \u00e8 Software","text":"<p>L'Infrastructure as Code non \u00e8 pi\u00f9 un'opzione, ma un requisito fondamentale per la gestione di applicazioni cloud moderne. Ci permette di portare nel mondo dell'infrastruttura tutta la disciplina e l'automazione che gi\u00e0 applichiamo al codice applicativo.</p> <p>Scegliendo l'AWS CDK, abbiamo potenziato questo paradigma, usando un linguaggio di programmazione completo per:</p> <ul> <li> <p>Definire infrastrutture complesse in modo conciso e leggibile.</p> </li> <li> <p>Sfruttare astrazioni di alto livello che incorporano le best practice.</p> </li> <li> <p>Ottenere sicurezza dei tipi e supporto dall'IDE, riducendo gli errori.</p> </li> <li> <p>Integrare la gestione dell'infrastruttura direttamente nel nostro processo di sviluppo e di controllo di versione.</p> </li> </ul> <p>La nostra infrastruttura non \u00e8 pi\u00f9 un'entit\u00e0 fragile e opaca gestita manualmente, ma \u00e8 diventata una parte integrante e versionata della nostra codebase. Questa solida base di automazione \u00e8 il prerequisito indispensabile per costruire le pipeline di CI/CD che esploreremo nel prossimo capitolo, consentendoci di rilasciare valore ai nostri utenti in modo rapido, sicuro e continuo.</p> <p>Certamente. Proseguiamo con il capitolo che trasforma tutto il nostro lavoro di progettazione e sviluppo in un processo automatizzato, affidabile e veloce. Questo capitolo \u00e8 il cuore pulsante delle pratiche DevOps moderne e un requisito essenziale per qualsiasi team che voglia rilasciare software di qualit\u00e0 in modo continuo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-28-cicd-sicurezza-e-deployment-continuo","title":"Capitolo 28: CI/CD, Sicurezza e Deployment Continuo","text":"<p>Nei capitoli precedenti, abbiamo definito un processo di sviluppo iterativo (Capitolo 26) e abbiamo imparato a definire la nostra intera infrastruttura come codice (Capitolo 27). Abbiamo tutti i pezzi del puzzle: codice sorgente versionato, una suite di test automatizzati e un'infrastruttura ripetibile. Manca l'ultimo, fondamentale anello della catena: come colleghiamo tutto insieme per portare le modifiche dal computer di uno sviluppatore alla produzione in modo rapido, sicuro e automatico?</p> <p>La risposta risiede nell'adozione di una pipeline di CI/CD (Continuous Integration / Continuous Deployment). L'era dei deployment manuali, fatti a tarda notte con dita incrociate e una lunga checklist, \u00e8 finita. Un processo di deployment manuale \u00e8 lento, prono a errori e incredibilmente stressante. Per competere nel mercato odierno, dobbiamo automatizzare.</p> <p>In questo capitolo, progetteremo e implementeremo una pipeline di CI/CD professionale per la nostra applicazione \"Where Should I Be?\". Integreremo test, build, analisi di sicurezza (un approccio noto come DevSecOps) e strategie di deployment avanzate per creare una vera e propria \"linea di assemblaggio\" per il nostro software, capace di consegnare valore ai nostri utenti in modo continuo e con la massima fiducia.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#281-demistificare-cicd-oltre-gli-acronimi","title":"28.1. Demistificare CI/CD: Oltre gli Acronimi","text":"<p>I termini CI e CD vengono spesso usati in modo intercambiabile, ma rappresentano concetti distinti che si costruiscono l'uno sull'altro.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#continuous-integration-ci-integrazione-continua","title":"Continuous Integration (CI) - Integrazione Continua","text":"<ul> <li> <p>Cos'\u00e8: \u00c8 la pratica con cui gli sviluppatori integrano il loro lavoro nel ramo principale del repository di codice (es. <code>main</code> o <code>develop</code>) molto frequentemente, idealmente pi\u00f9 volte al giorno. Ogni integrazione scatena un'esecuzione automatica della build e dei test unitari.</p> </li> <li> <p>Obiettivo: Rilevare i problemi di integrazione il prima possibile. Se una modifica di uno sviluppatore rompe la build o fallisce un test, il team lo sa immediatamente, non dopo settimane di sviluppo in isolamento. Il mantra \u00e8: \"fallisci presto, fallisci a basso costo\".</p> </li> <li> <p>Analogia: \u00c8 come un'officina meccanica dove, ogni volta che un meccanico produce un nuovo pezzo, lo prova subito sul motore principale per assicurarsi che sia compatibile, invece di aspettare di aver costruito tutti i pezzi per poi scoprire che non si incastrano.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#continuous-delivery-cd-consegna-continua","title":"Continuous Delivery (CD) - Consegna Continua","text":"<ul> <li> <p>Cos'\u00e8: \u00c8 il passo successivo alla CI. Se la fase di build e test della CI ha successo, il software viene automaticamente pacchettizzato e preparato per il rilascio. L'artefatto (es. un'immagine Docker, un file .zip per Lambda) viene deployato in un ambiente di staging o pre-produzione.</p> </li> <li> <p>Obiettivo: Avere sempre un artefatto pronto per il rilascio in produzione. Il deployment effettivo in produzione rimane un'azione manuale, spesso un \"one-click button\" che pu\u00f2 essere premuto dal Product Owner o dal team lead quando il business lo decide.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#continuous-deployment-cd-deployment-continuo","title":"Continuous Deployment (CD) - Deployment Continuo","text":"<ul> <li> <p>Cos'\u00e8: \u00c8 l'automazione completa del processo. Se tutte le fasi precedenti (CI, test di integrazione, test E2E nell'ambiente di staging) hanno successo, la nuova versione del software viene deployata automaticamente in produzione senza alcun intervento umano.</p> </li> <li> <p>Obiettivo: Massimizzare la velocit\u00e0 di rilascio e ridurre al minimo il \"lead time\" (il tempo che intercorre tra un'idea e la sua consegna agli utenti). Questo richiede un'altissima fiducia nella propria pipeline di test e monitoraggio.</p> </li> </ul> <p>Per il nostro progetto, punteremo a implementare una pipeline di Continuous Delivery, con la possibilit\u00e0 di evolvere verso il Continuous Deployment man mano che la nostra fiducia nel sistema cresce.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#282-progettare-la-nostra-pipeline-cicd","title":"28.2. Progettare la Nostra Pipeline CI/CD \u2699\ufe0f","text":"<p>Useremo GitHub Actions come strumento di CI/CD, data la sua eccellente integrazione con il nostro repository di codice e il suo vasto ecosistema di azioni riutilizzabili.</p> <p>Progettiamo la pipeline per uno dei nostri microservizi Go, ad esempio il nostro worker serverless <code>trip-persistence-worker</code>.</p> <p>Trigger: La pipeline si attiver\u00e0 su ogni <code>push</code> al ramo <code>main</code> e su ogni apertura/aggiornamento di una <code>Pull Request</code> verso <code>main</code>.</p> <p>Fasi della Pipeline:</p> <ol> <li> <p>Checkout Code: Scarica l'ultima versione del codice dal repository.</p> </li> <li> <p>Setup dell'Ambiente: Installa la versione corretta di Go e le dipendenze necessarie.</p> </li> <li> <p>Linting &amp; Static Analysis: Esegue <code>golangci-lint</code> per verificare la qualit\u00e0 e lo stile del codice.</p> </li> <li> <p>Test Unitari: Esegue <code>go test -race ./...</code> per lanciare tutti i test unitari e il race detector. Un fallimento qui blocca immediatamente la pipeline.</p> </li> <li> <p>Scansione di Sicurezza (DevSecOps):</p> </li> </ol> <p>- SAST (Static Application Security Testing): Usa <code>gosec</code> per analizzare il codice alla ricerca di vulnerabilit\u00e0 comuni.</p> <p>- SCA (Software Composition Analysis): Usa <code>Trivy</code> per scansionare il file <code>go.mod</code> alla ricerca di vulnerabilit\u00e0 note nelle nostre dipendenze.</p> <ol> <li> <p>Build dell'Artefatto: Compila il nostro codice Go per l'ambiente di destinazione di Lambda (<code>GOOS=linux GOARCH=amd64</code>) e crea il pacchetto di deployment (un file .zip).</p> </li> <li> <p>Deployment (solo sul ramo <code>main</code>):</p> </li> </ol> <p>- Autenticazione su AWS: Si autentica su AWS in modo sicuro usando OIDC (OpenID Connect), senza bisogno di salvare chiavi segrete a lunga durata su GitHub.</p> <p>- Deploy con CDK: Esegue <code>cdk deploy</code> per applicare le modifiche all'infrastruttura e deployare il nuovo pacchetto Lambda.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#283-implementazione-con-github-actions","title":"28.3. Implementazione con GitHub Actions","text":"<p>Ecco come potrebbe apparire il file di workflow <code>ci.yml</code> per il nostro servizio.</p> <p>YAML</p> <pre><code># .github/workflows/ci.yml\n\n\n\nname: Go Backend CI/CD\n\n\n\n\n\non:\n\n\n\n\u00a0\u00a0push:\n\n\n\n\u00a0\u00a0\u00a0\u00a0branches: [ \"main\" ]\n\n\n\n\u00a0\u00a0pull_request:\n\n\n\n\u00a0\u00a0\u00a0\u00a0branches: [ \"main\" ]\n\n\n\n\n\n# Permessi necessari per l'autenticazione OIDC con AWS\n\n\n\npermissions:\n\n\n\n\u00a0\u00a0id-token: write\n\n\n\n\u00a0\u00a0contents: read\n\n\n\n\n\njobs:\n\n\n\n\u00a0\u00a0build-and-test:\n\n\n\n\u00a0\u00a0\u00a0\u00a0name: Build, Test and Security Scan\n\n\n\n\u00a0\u00a0\u00a0\u00a0runs-on: ubuntu-latest\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0steps:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Checkout code\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/checkout@v4\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Set up Go\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/setup-go@v5\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0go-version: '1.2x' # Usa la versione di Go del tuo progetto\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Run golangci-lint\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: golangci/golangci-lint-action@v6\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0version: v1.59\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Run Unit Tests\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: go test -v -race ./...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Run GoSec Security Scanner (SAST)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0go install github.com/securego/gosec/v2/cmd/gosec@latest\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gosec ./...\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Run Trivy Vulnerability Scanner (SCA)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: aquasecurity/trivy-action@master\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scan-type: 'fs'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scan-ref: '.'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit-code: '1' # Fa fallire la build se trova vulnerabilit\u00e0 critiche\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format: 'table'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Build Go Binary for Lambda\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if: github.ref == 'refs/heads/main' # Esegui solo sul ramo main\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cd services/trip-persistence-worker\u00a0\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GOOS=linux GOARCH=amd64 go build -o dist/main\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cd dist &amp;&amp; zip ../../../worker-deployment-package.zip main\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Upload Lambda Artifact\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if: github.ref == 'refs/heads/main'\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/upload-artifact@v4\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: worker-deployment-package\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: ./worker-deployment-package.zip\n\n\n\n\n\n\u00a0\u00a0deploy:\n\n\n\n\u00a0\u00a0\u00a0\u00a0name: Deploy to AWS\n\n\n\n\u00a0\u00a0\u00a0\u00a0needs: build-and-test # Questo job parte solo se 'build-and-test' ha successo\n\n\n\n\u00a0\u00a0\u00a0\u00a0if: github.ref == 'refs/heads/main' # Esegui solo sul ramo main\n\n\n\n\u00a0\u00a0\u00a0\u00a0runs-on: ubuntu-latest\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0steps:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Checkout code\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/checkout@v4\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Download Lambda Artifact\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/download-artifact@v4\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: worker-deployment-package\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Configure AWS Credentials via OIDC\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: aws-actions/configure-aws-credentials@v4\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole # Ruolo IAM configurato su AWS\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0aws-region: ${{ secrets.AWS_REGION }}\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Setup Node.js (for AWS CDK)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uses: actions/setup-node@v4\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with:\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node-version: '20'\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: Deploy with AWS CDK\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0working-directory: ./infrastructure # Naviga nella directory del CDK\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: |\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0npm install\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0npm install -g aws-cdk\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Il flag --require-approval never \u00e8 per l'automazione\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cdk deploy --all --require-approval never\u00a0\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#284-devsecops-la-sicurezza-come-responsabilita-condivisa","title":"28.4. DevSecOps: La Sicurezza come Responsabilit\u00e0 Condivisa","text":"<p>Il termine DevSecOps rappresenta un cambiamento culturale: la sicurezza non \u00e8 pi\u00f9 un controllo fatto da un team separato alla fine del processo, ma una responsabilit\u00e0 condivisa, integrata in ogni fase del ciclo di vita del software. La nostra pipeline CI/CD \u00e8 il luogo perfetto per automatizzare questi controlli.</p> <ul> <li> <p>SAST (Static Application Security Testing): Strumenti come <code>gosec</code> analizzano il nostro codice sorgente alla ricerca di pattern di codice insicuri, come credenziali hard-coded, query SQL non sicure o uso di pacchetti crittografici deboli.</p> </li> <li> <p>SCA (Software Composition Analysis): Strumenti come <code>Trivy</code> o il Dependabot di GitHub analizzano le nostre dipendenze (<code>go.mod</code>) e ci avvisano se stiamo usando una libreria con una vulnerabilit\u00e0 nota (CVE). Questo \u00e8 fondamentale, perch\u00e9 il nostro codice \u00e8 sicuro solo quanto \u00e8 sicura la dipendenza pi\u00f9 debole.</p> </li> <li> <p>Scansione dei Container: Se usassimo Docker, la pipeline includerebbe anche uno step per scansionare l'immagine Docker finale con <code>Trivy</code>, per trovare vulnerabilit\u00e0 nel sistema operativo di base o nei pacchetti installati.</p> </li> </ul> <p>Integrando questi controlli nella pipeline, otteniamo un feedback sulla sicurezza immediato, proprio come per i test unitari.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#285-strategie-di-deployment-per-ridurre-il-rischio","title":"28.5. Strategie di Deployment per Ridurre il Rischio","text":"<p>Fare \"deploy\" non significa semplicemente sovrascrivere la vecchia versione con la nuova. Esistono strategie sofisticate per rilasciare il software in produzione minimizzando il rischio di downtime o di impatto negativo per gli utenti.</p> <ul> <li> <p>Rolling Update: La strategia pi\u00f9 comune. Le nuove istanze dell'applicazione vengono avviate gradualmente, mentre le vecchie vengono spente, assicurando che ci sia sempre capacit\u00e0 disponibile per servire il traffico.</p> </li> <li> <p>Blue/Green Deployment: Si mantengono due ambienti di produzione identici: \"Blue\" (la versione attuale) e \"Green\" (la nuova versione). Tutto il traffico va a Blue. Si deploya la nuova versione su Green e la si testa. Quando si \u00e8 pronti, si sposta il router del traffico da Blue a Green. Il vantaggio \u00e8 un rollback istantaneo: se qualcosa va storto, basta rispostare il traffico su Blue.</p> </li> <li> <p>Canary Release: La strategia pi\u00f9 avanzata e a basso rischio. Si rilascia la nuova versione solo a un piccolo sottoinsieme di utenti (es. l'1%). Si monitorano attentamente le metriche di errore e di performance. Se tutto va bene, si aumenta gradualmente la percentuale di traffico verso la nuova versione (10%, 50%, 100%) fino a completare il rollout. AWS Lambda e API Gateway hanno un supporto nativo eccellente per le implementazioni canary.</p> </li> </ul> <p>Per la nostra applicazione, un approccio Canary per le nostre Lambda esposte via API Gateway sarebbe la scelta ideale per massimizzare la sicurezza dei rilasci.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#286-conclusioni-lautomazione-come-motore-di-velocita-e-qualita","title":"28.6. Conclusioni: L'Automazione come Motore di Velocit\u00e0 e Qualit\u00e0","text":"<p>Una pipeline di CI/CD ben costruita \u00e8 la spina dorsale di un team di sviluppo moderno e performante. \u00c8 pi\u00f9 di un semplice strumento di automazione; \u00e8 una manifestazione della nostra cultura ingegneristica.</p> <ul> <li> <p>Automatizza i compiti ripetitivi e rischiosi, liberando gli sviluppatori di potersi concentrare sulla creazione di valore.</p> </li> <li> <p>Crea un ciclo di feedback rapido, permettendoci di trovare e correggere bug e vulnerabilit\u00e0 in poche ore, non settimane.</p> </li> <li> <p>Aumenta la fiducia nei rilasci, trasformando il deployment da un evento temuto a un'attivit\u00e0 di routine.</p> </li> <li> <p>Incarna i principi di DevSecOps, rendendo la qualit\u00e0 e la sicurezza una responsabilit\u00e0 continua e condivisa.</p> </li> </ul> <p>Questa pipeline \u00e8 il motore che alimenta il nostro ciclo iterativo. Con essa, siamo pronti ad affrontare l'ultimo aspetto fondamentale delle operations: capire cosa sta succedendo nella nostra applicazione una volta che \u00e8 in produzione, attraverso il monitoring e l'observability.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-29-monitoring-e-observability-con-aws-x-ray-e-cloudwatch","title":"Capitolo 29: Monitoring e Observability con AWS X-Ray e CloudWatch","text":"<p>Abbiamo progettato, costruito, testato e, con il capitolo precedente, finalmente deployato la nostra applicazione \"Where Should I Be?\" nel cloud AWS. La nostra pipeline di CI/CD ha funzionato, il deployment \u00e8 andato a buon fine. Il lavoro \u00e8 finito, giusto?</p> <p>Assolutamente no. Il lavoro \u00e8 appena iniziato.</p> <p>Un'applicazione in produzione \u00e8 un sistema vivo, complesso e soggetto a forze imprevedibili: picchi di traffico, fallimenti di rete, bug nascosti, lentezza dei servizi da cui dipendiamo. Come facciamo a sapere se la nostra applicazione sta funzionando correttamente in questo momento? E quando un utente segnala \"non riesco a salvare il mio viaggio\", come possiamo diagnosticare il problema in un'architettura distribuita dove la richiesta attraversa API Gateway, Lambda, SQS e DynamoDB?</p> <p>Rispondere a queste domande \u00e8 il dominio del Monitoring e dell'Observability. In questo capitolo, impareremo a trasformare la nostra applicazione da una \"scatola nera\" a un sistema trasparente. Strumenteremo il nostro codice Go e useremo la potenza dei servizi AWS nativi come Amazon CloudWatch e AWS X-Ray per ottenere una visibilit\u00e0 profonda sulla salute e sul comportamento del nostro sistema in tempo reale.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#291-monitoring-vs-observability-una-distinzione-cruciale","title":"29.1. Monitoring vs. Observability: Una Distinzione Cruciale","text":"<p>Sebbene spesso usati come sinonimi, questi due concetti rappresentano due approcci complementari alla comprensione di un sistema.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#monitoring-monitoraggio","title":"Monitoring (Monitoraggio) \ud83d\udcc8","text":"<ul> <li> <p>Cos'\u00e8: Il monitoraggio \u00e8 la pratica di raccogliere, aggregare e analizzare dati su un sistema per osservare il suo comportamento nel tempo e verificare condizioni predefinite. Si tratta di porre al sistema domande che gi\u00e0 conosciamo.</p> </li> <li> <p>Analogia: Il cruscotto della tua automobile. Mostra un set predefinito di metriche: velocit\u00e0, livello del carburante, temperatura del motore. Ti avvisa se una di queste metriche supera una soglia critica (es. la spia dell'olio si accende). Il monitoraggio ti dice che qualcosa \u00e8 rotto.</p> </li> <li> <p>Esempi:</p> </li> </ul> <p>- \"Avvisami se la CPU della mia istanza supera l'80% per 5 minuti.\"</p> <p>- \"Avvisami se la latenza p99 della mia API supera i 500ms.\"</p> <p>- \"Avvisami se ci sono pi\u00f9 di 10 messaggi nella Dead-Letter Queue.\"</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#observability-osservabilita","title":"Observability (Osservabilit\u00e0) \ud83d\udd0d","text":"<ul> <li> <p>Cos'\u00e8: L'osservabilit\u00e0 \u00e8 la capacit\u00e0 di dedurre lo stato interno di un sistema complesso esaminando i suoi output esterni. Si tratta di avere dati sufficientemente ricchi da poter porre domande che non sapevamo di dover fare.</p> </li> <li> <p>Analogia: Se il monitoraggio \u00e8 il cruscotto, l'osservabilit\u00e0 \u00e8 la porta diagnostica a cui il meccanico collega il suo computer. Mentre il cruscotto ti ha detto che il motore \u00e8 surriscaldato, la diagnostica permette al meccanico di esplorare i dati di decine di sensori per capire perch\u00e9 \u00e8 surriscaldato.</p> </li> <li> <p>I Tre Pilastri dell'Observability:</p> </li> </ul> <p>1. Logs (Registri): Record immutabili e con timestamp di eventi discreti. Ci dicono cosa \u00e8 successo in un punto specifico del codice.</p> <p>2. Metrics (Metriche): Dati numerici aggregati nel tempo. Sono ideali per il monitoraggio e per individuare trend.</p> <p>3. Traces (Tracciamenti): Rappresentano l'intero percorso di una singola richiesta attraverso tutti i servizi del nostro sistema distribuito. Sono lo strumento principe per il debug di problemi di latenza e di errori in architetture a microservizi.</p> <p>Per la nostra applicazione, useremo Amazon CloudWatch per il Monitoring (Logs e Metrics) e AWS X-Ray per l'Observability (Traces).</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#292-logging-strutturato-in-go-le-fondamenta-dellanalisi","title":"29.2. Logging Strutturato in Go: Le Fondamenta dell'Analisi","text":"<p>Dei <code>log.Printf(\"errore\")</code> sparsi nel codice non sono sufficienti. Per essere analizzabili, i log devono essere strutturati, preferibilmente in formato JSON.</p> <p>Definizione: Il Logging Strutturato \u00e8 la pratica di scrivere i log non come stringhe di testo informali, ma come oggetti dati (es. JSON) con coppie chiave-valore ben definite. Questo li rende facilmente interrogabili, filtrabili e analizzabili da strumenti automatici.</p> <p>Fortunatamente, a partire dalla versione 1.21, Go ha un eccellente pacchetto nella libreria standard per questo scopo: <code>log/slog</code>.</p> <p>Esempio di implementazione con <code>slog</code>:</p> <p>Go</p> <pre><code>// Logger di base per una funzione Lambda\n\n\n\nvar logger *slog.Logger\n\n\n\n\n\nfunc init() {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Creiamo un logger che produce JSON sull'output standard.\n\n\n\n\u00a0\u00a0\u00a0\u00a0// CloudWatch Logs catturer\u00e0 automaticamente questo output.\n\n\n\n\u00a0\u00a0\u00a0\u00a0logger = slog.New(slog.NewJSONHandler(os.Stdout, nil))\n\n\n\n}\n\n\n\n\n\nfunc HandleRequest(ctx context.Context, ...) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0tripID := \"...\"\n\n\n\n\u00a0\u00a0\u00a0\u00a0userID := \"...\"\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Logghiamo informazioni utili con contesto strutturato.\n\n\n\n\u00a0\u00a0\u00a0\u00a0logger.Info(\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Processing new trip creation\",\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slog.String(\"tripId\", tripID),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slog.String(\"userId\", userID),\n\n\n\n\u00a0\u00a0\u00a0\u00a0)\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Logghiamo errori con attributi aggiuntivi.\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0logger.Error(\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Failed to save trip to database\",\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slog.String(\"error\", err.Error()),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slog.String(\"tripId\", tripID),\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return err\n\n\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ...\n\n\n\n}\n</code></pre> <p>Scrivendo i log in questo modo, possiamo poi usare CloudWatch Logs Insights per eseguire query complesse, come: \"mostrami tutti i log di errore per <code>userId=123</code> negli ultimi 30 minuti\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#293-monitoring-attivo-con-cloudwatch-metrics-e-alarms","title":"29.3. Monitoring Attivo con CloudWatch Metrics e Alarms","text":"<p>CloudWatch raccoglie automaticamente una vasta gamma di metriche da tutti i servizi AWS che usiamo. Per la nostra architettura, le pi\u00f9 importanti sono:</p> <ul> <li> <p>AWS Lambda: <code>Invocations</code>, <code>Errors</code>, <code>Duration</code>, <code>ConcurrentExecutions</code>.</p> </li> <li> <p>Amazon SQS: <code>ApproximateNumberOfMessagesVisible</code>, <code>ApproximateAgeOfOldestMessage</code>.</p> </li> <li> <p>Amazon DynamoDB: <code>ConsumedReadCapacityUnits</code>, <code>ConsumedWriteCapacityUnits</code>, <code>ThrottledRequests</code>.</p> </li> <li> <p>API Gateway: <code>Count</code>, <code>Latency</code>, <code>4xxError</code>, <code>5xxError</code>.</p> </li> </ul> <p>Il nostro compito \u00e8 definire degli allarmi su queste metriche per essere notificati proattivamente quando qualcosa va storto. Useremo il nostro stack AWS CDK (Capitolo 27) per definire questi allarmi come codice.</p> <p>Esempio: Creare un allarme per la Dead-Letter Queue (DLQ)</p> <p>Questo \u00e8 uno degli allarmi pi\u00f9 importanti. Se un messaggio finisce nella DLQ del nostro worker di persistenza, significa che un'operazione di scrittura sta fallendo ripetutamente e richiede un intervento umano.</p> <p>TypeScript</p> <pre><code>// Aggiunta a lib/infrastructure-stack.ts\n\n\n\n\n\nimport * as cloudwatch from 'aws-cdk-lib/aws-cloudwatch';\n\n\n\nimport * as cw_actions from 'aws-cdk-lib/aws-cloudwatch-actions';\n\n\n\nimport * as sns from 'aws-cdk-lib/aws-sns';\n\n\n\n\n\n// ... dentro la classe WhereShouldIBeStack, dopo aver definito la DLQ ...\n\n\n\n\n\n// 1. Creiamo un topic SNS a cui inviare la notifica di allarme.\n\n\n\nconst alarmTopic = new sns.Topic(this, 'AlarmTopic');\n\n\n\n// In un progetto reale, qui si aggiungerebbero sottoscrizioni (es. email, PagerDuty).\n\n\n\n\n\n// 2. Creiamo l'allarme sulla metrica della dimensione della DLQ.\n\n\n\nconst dlqAlarm = new cloudwatch.Alarm(this, 'PersistenceWorkerDLQAlarm', {\n\n\n\n\u00a0\u00a0alarmName: 'PersistenceWorker-DLQ-HasMessages',\n\n\n\n\u00a0\u00a0metric: deadLetterQueue.metricApproximateNumberOfMessagesVisible({\n\n\n\n\u00a0\u00a0\u00a0\u00a0period: cdk.Duration.minutes(1),\n\n\n\n\u00a0\u00a0\u00a0\u00a0statistic: 'Sum',\n\n\n\n\u00a0\u00a0}),\n\n\n\n\u00a0\u00a0threshold: 0,\n\n\n\n\u00a0\u00a0evaluationPeriods: 1, // Scatta se la metrica \u00e8 &gt; 0 per 1 periodo di 1 minuto.\n\n\n\n\u00a0\u00a0comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n\n\n\n\u00a0\u00a0treatMissingData: cloudwatch.TreatMissingData.NOT_BREACHING,\n\n\n\n});\n\n\n\n\n\n// 3. Colleghiamo l'allarme all'azione di notifica sul topic SNS.\n\n\n\ndlqAlarm.addAlarmAction(new cw_actions.SnsAction(alarmTopic));\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#294-tracciamento-distribuito-con-aws-x-ray","title":"29.4. Tracciamento Distribuito con AWS X-Ray","text":"<p>Mentre il monitoring ci dice che c'\u00e8 un errore (es. un <code>5xx</code> su API Gateway), il tracciamento distribuito ci dice dove e perch\u00e9. AWS X-Ray \u00e8 il servizio di AWS progettato per questo.</p> <p>Come funziona?</p> <ol> <li> <p>Quando una richiesta entra nel nostro sistema, X-Ray le assegna un Trace ID univoco.</p> </li> <li> <p>Questo ID viene propagato in un header (<code>X-Amzn-Trace-Id</code>) attraverso tutte le chiamate successive: da API Gateway a Lambda, da Lambda a SQS, da SQS a un'altra Lambda, da Lambda a DynamoDB.</p> </li> <li> <p>Ogni servizio registra un segmento di lavoro, annotando quando ha iniziato e finito la sua parte.</p> </li> <li> <p>X-Ray raccoglie tutti questi segmenti e li unisce in un'unica traccia (trace), fornendoci una visione completa e cronologica dell'intero percorso della richiesta.</p> </li> </ol>"},{"location":"books/Go%20Domain%20Driven%20Design/#abilitare-x-ray","title":"Abilitare X-Ray","text":"<p>La bellezza di X-Ray \u00e8 che per i servizi gestiti di AWS, l'abilitazione \u00e8 quasi banale, specialmente con il CDK.</p> <p>TypeScript</p> <pre><code>// In lib/infrastructure-stack.ts\n\n\n\n\n\n// Per API Gateway e Lambda, basta una singola riga di configurazione.\n\n\n\nconst api = new apigateway.LambdaRestApi(this, 'ApiEndpoint', {\n\n\n\n\u00a0\u00a0handler: apiLambda,\n\n\n\n\u00a0\u00a0proxy: false,\n\n\n\n\u00a0\u00a0deployOptions: {\n\n\n\n\u00a0\u00a0\u00a0\u00a0tracingEnabled: true, // Abilita X-Ray per l'API Gateway\n\n\n\n\u00a0\u00a0},\n\n\n\n});\n\n\n\n\n\nconst goWorkerLambda = new lambda.Function(this, 'PersistenceWorker', {\n\n\n\n\u00a0\u00a0// ... altre configurazioni ...\n\n\n\n\u00a0\u00a0tracing: lambda.Tracing.ACTIVE, // Abilita X-Ray per la Lambda\n\n\n\n});\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#strumentazione-manuale-del-codice-go","title":"Strumentazione Manuale del Codice Go","text":"<p>Per le chiamate che il nostro codice fa esplicitamente (es. a un'API esterna come OpenAI), dobbiamo instrumentare il codice noi stessi usando l'SDK di X-Ray per Go.</p> <p>Riferimento Chiave: <code>github.com/aws/aws-xray-sdk-go</code></p> <p>Go</p> <pre><code>// Esempio di come instrumentare un client HTTP\n\n\n\nimport \"github.com/aws/aws-xray-sdk-go/xray\"\n\n\n\n\n\n// Quando creiamo il nostro http.Client, lo \"wrappiamo\" con X-Ray\n\n\n\nhttpClient := xray.Client(&amp;http.Client{Timeout: 5 * time.Second})\n\n\n\n\n\n// Ora, quando usiamo questo client, X-Ray creer\u00e0 automaticamente un sottosegmento per la chiamata.\n\n\n\nreq, _ := http.NewRequestWithContext(ctx, \"GET\", \"https://api.openai.com/...\", nil)\n\n\n\nresp, err := httpClient.Do(req)\n\n\n\n\n\n// Possiamo anche creare sottosegmenti manuali per misurare parti specifiche del nostro codice.\n\n\n\nerr = xray.Capture(ctx, \"saveToDatabase\", func(ctx1 context.Context) error {\n\n\n\n\u00a0\u00a0\u00a0\u00a0// ... logica del repository che parla con DynamoDB ...\n\n\n\n\u00a0\u00a0\u00a0\u00a0// Se c'\u00e8 un errore, X-Ray lo registrer\u00e0 nel trace.\n\n\n\n\u00a0\u00a0\u00a0\u00a0return repo.saveInternal(ctx1, data)\n\n\n\n})\n</code></pre>"},{"location":"books/Go%20Domain%20Driven%20Design/#il-risultato-la-mappa-del-servizio","title":"Il Risultato: La Mappa del Servizio","text":"<p>Una volta che i dati di tracciamento sono stati raccolti, X-Ray ci fornisce due viste potentissime:</p> <ul> <li> <p>La Mappa del Servizio (Service Map): Un diagramma generato automaticamente che mostra tutti i nostri servizi (API Gateway, Lambda, SQS, DynamoDB) e le connessioni tra di loro. I nodi cambiano colore per indicare la loro salute (verde per OK, giallo per errori, rosso per fault), permettendoci di vedere a colpo d'occhio dove si trova un problema.</p> </li> <li> <p>La Vista della Traccia (Trace View): Un diagramma a cascata (waterfall) che mostra la cronologia di una singola richiesta. Vediamo esattamente quanto tempo ha impiegato ogni servizio, dove si sono verificati gli errori e quali log e metadati sono associati a ogni passo. \u00c8 lo strumento di debug definitivo per un'architettura a microservizi.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#295-conclusioni-da-reattivi-a-proattivi","title":"29.5. Conclusioni: Da Reattivi a Proattivi","text":"<p>Senza una solida strategia di monitoring e observability, gestire un'applicazione in produzione \u00e8 come guidare un'auto di notte, a fari spenti e con i finestrini oscurati. Si \u00e8 destinati a schiantarsi.</p> <p>In questo capitolo, abbiamo imparato a \"illuminare\" il nostro sistema:</p> <ul> <li> <p>Il Monitoring con CloudWatch ci funge da cruscotto, avvisandoci proattivamente quando le metriche chiave deviano dalla norma.</p> </li> <li> <p>L'Observability, ottenuta tramite logging strutturato e il tracciamento distribuito con AWS X-Ray, ci fornisce gli strumenti diagnostici per capire il \"perch\u00e9\" dietro ogni problema.</p> </li> </ul> <p>Adottando questi strumenti e pratiche, trasformiamo il nostro rapporto con la produzione. Non siamo pi\u00f9 in uno stato reattivo, in attesa che gli utenti segnalino i problemi, ma diventiamo proattivi, capaci di comprendere, diagnosticare e risolvere i problemi prima che abbiano un impatto significativo. Questa \u00e8 la vera essenza delle moderne Operations.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#capitolo-30-conclusioni-e-prossimi-passi","title":"Capitolo 30: Conclusioni e Prossimi Passi","text":"<p>Siamo giunti alla fine del nostro lungo e intenso viaggio. Insieme, abbiamo attraversato un panorama vasto e complesso, partendo dai concetti filosofici del software enterprise moderno fino ad arrivare ai dettagli implementativi di un'applicazione full-stack, scalabile e resiliente. Se siete arrivati fin qui, avete dimostrato una dedizione e una curiosit\u00e0 che sono il marchio dei veri professionisti del software.</p> <p>Questo libro non \u00e8 stato concepito come una semplice raccolta di tutorial, ma come un percorso guidato attraverso un approccio olistico alla costruzione di software. Abbiamo visto come ogni scelta, dalla definizione di un <code>Value Object</code> nel nostro dominio Go fino alla configurazione di una pipeline di CI/CD, sia interconnessa e contribuisca a un obiettivo pi\u00f9 grande: creare sistemi che non solo funzionano, ma che sono anche comprensibili, manutenibili e capaci di evolvere nel tempo.</p> <p>In questo capitolo finale, faremo un passo indietro per ammirare il quadro completo. Riepilogheremo ci\u00f2 che abbiamo costruito e, soprattutto, perch\u00e9 lo abbiamo costruito in questo modo. Distilleremo i principi fondamentali che spero porterete con voi in ogni progetto futuro e tracceremo una mappa per i vostri prossimi passi nel continuo viaggio dell'apprendimento.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#301-riepilogo-del-nostro-viaggio-cosa-abbiamo-costruito-e-perche","title":"30.1. Riepilogo del Nostro Viaggio: Cosa Abbiamo Costruito e Perch\u00e9","text":"<p>Ripercorriamo le tappe principali della nostra avventura, consolidando la narrazione che ha legato insieme ogni capitolo.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-i-le-fondamenta-e-il-contesto","title":"Parte I: Le Fondamenta e il Contesto","text":"<p>Abbiamo iniziato stabilendo il \"perch\u00e9\". Abbiamo compreso che il software moderno deve affrontare sfide di complessit\u00e0, scala e agilit\u00e0 che richiedono un approccio pi\u00f9 sofisticato del semplice CRUD. Abbiamo quindi dato un volto a queste sfide, introducendo la nostra applicazione di esempio, \"Where Should I Be?\", e delineando un'architettura di alto livello basata su microservizi, Go, AWS e SvelteKit. Abbiamo affrontato fin da subito temi cruciali come la sicurezza con AWS Cognito e le scelte strategiche tra modelli server e serverless.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-ii-la-progettazione-tattica-con-ddd","title":"Parte II: La Progettazione Tattica con DDD","text":"<p>Questa \u00e8 stata la nostra immersione nel cuore del software. Armati del Domain-Driven Design, abbiamo imparato a modellare il dominio di business. Abbiamo scoperto l'importanza del Linguaggio Ubiquo come ponte tra business e tecnologia. Abbiamo poi imparato a usare i mattoncini del DDD:</p> <ul> <li> <p>Aggregati per definire confini di consistenza transazionale.</p> </li> <li> <p>Value Objects per catturare concetti descrittivi in modo robusto e immutabile.</p> </li> <li> <p>Entit\u00e0 per modellare oggetti con un'identit\u00e0 e un ciclo di vita.</p> </li> <li> <p>Domain Services per incapsulare la logica di business che non appartiene a un singolo oggetto.</p> </li> </ul> <p>Abbiamo trasformato la logica di business da un groviglio di codice procedurale a un modello ricco, espressivo e auto-documentante.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-iii-iv-architettura-e-progettazione-strategica","title":"Parte III &amp; IV: Architettura e Progettazione Strategica","text":"<p>Con un solido modello di dominio, abbiamo fatto \"zoom-out\". Abbiamo inserito il nostro dominio all'interno di una Clean Architecture, proteggendolo con il Repository Pattern e assemblando il tutto con la Dependency Injection. Abbiamo esplorato pattern avanzati come CQRS per ottimizzare le nostre letture e scritture.</p> <p>Subito dopo, abbiamo abbracciato la progettazione strategica, imparando a gestire la complessit\u00e0 su larga scala. Con i Bounded Context, abbiamo imparato a scomporre un grande problema in sistemi pi\u00f9 piccoli e autonomi. Con l'Event Storming, abbiamo scoperto una tecnica collaborativa per mappare il dominio, e con il Context Mapping, abbiamo imparato a definire le relazioni tra i nostri contesti in modo intenzionale.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#parte-v-vi-vii-integrazione-persistenza-e-operations","title":"Parte V, VI &amp; VII: Integrazione, Persistenza e Operations","text":"<p>Nelle parti finali, abbiamo reso reale la nostra architettura. Abbiamo definito contratti API robusti con OpenAPI, gestito la concorrenza e l'integrazione resiliente con servizi esterni. Abbiamo scelto DynamoDB come database cloud-native, disaccoppiando le scritture con SQS e Lambda per massimizzare la resilienza e la scalabilit\u00e0. Abbiamo costruito un'interfaccia utente moderna con SvelteKit, definito un processo di sviluppo agile, automatizzato la nostra infrastruttura con l'AWS CDK e il nostro ciclo di vita con pipeline di CI/CD sicure. Infine, abbiamo imparato ad \"ascoltare\" la nostra applicazione in produzione con CloudWatch e X-Ray.</p> <p>Abbiamo completato il cerchio, dall'idea al codice, dall'architettura alle operations.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#302-i-principi-fondamentali-da-portare-con-voi","title":"30.2. I Principi Fondamentali da Portare con Voi","text":"<p>Al di l\u00e0 delle singole tecnologie, che sono destinate a cambiare, questo libro ha cercato di trasmettere un insieme di principi senza tempo. Se doveste ricordare solo cinque cose, spero siano queste:</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#1-il-dominio-prima-di-tutto-domain-first","title":"1. Il Dominio Prima di Tutto (Domain-First)","text":"<p>La tecnologia \u00e8 un mezzo, non il fine. Il software di successo risolve problemi di business reali. Iniziate sempre con una profonda comprensione del dominio. Immergetevi nel suo linguaggio, nelle sue regole e nelle sue complessit\u00e0. Il Linguaggio Ubiquo non \u00e8 un gergo, \u00e8 il vostro strumento pi\u00f9 potente per colmare il divario tra l'intenzione e l'implementazione.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#2-progettare-per-il-disaccoppiamento-design-for-decoupling","title":"2. Progettare per il Disaccoppiamento (Design for Decoupling)","text":"<p>Bounded Context, Clean Architecture, Repository Pattern, comunicazione asincrona tramite eventi. Tutti questi pattern servono un unico, grande obiettivo: ridurre l'accoppiamento. Un software disaccoppiato \u00e8 pi\u00f9 facile da testare, da mantenere, da scalare e da far evolvere. Ogni volta che prendete una decisione di design, chiedetevi: \"Questa scelta sta aumentando o diminuendo l'accoppiamento nel mio sistema?\".</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#3-lautomazione-e-liberta-automation-is-freedom","title":"3. L'Automazione \u00e8 Libert\u00e0 (Automation is Freedom)","text":"<p>Infrastructure as Code (IaC) e Continuous Integration/Continuous Deployment (CI/CD) non sono \"extra\" o \"nice-to-have\". Sono pratiche fondamentali che trasformano lo sviluppo da un'attivit\u00e0 artigianale e rischiosa a un processo ingegneristico, prevedibile e ad alta velocit\u00e0. L'automazione riduce gli errori umani, elimina i compiti noiosi e libera gli sviluppatori di potersi concentrare sulla risoluzione di problemi creativi, che \u00e8 dove creiamo il vero valore.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#4-la-semplicita-come-prerequisito-per-la-complessita","title":"4. La Semplicit\u00e0 come Prerequisito per la Complessit\u00e0","text":"<p>Sia Go che Svelte sono stati scelti per la loro semplicit\u00e0 filosofica. Abbiamo visto come, usando strumenti semplici e concetti chiari a ogni livello (un Value Object, una funzione Lambda, un componente Svelte), possiamo gestire la complessit\u00e0 che emerge dall'interazione di queste parti. I sistemi complessi che funzionano sono quasi sempre evoluzioni di sistemi semplici che funzionavano. Non cercate la complessit\u00e0; gestitela con astrazioni semplici e chiare.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#5-trattare-linfrastruttura-e-le-operations-come-codice","title":"5. Trattare l'Infrastruttura (e le Operations) come Codice","text":"<p>L'era in cui gli sviluppatori \"passavano il codice\" a un altro team per il deployment \u00e8 finita. In un modello DevOps e cloud-native, la responsabilit\u00e0 si estende a tutto il ciclo di vita. Trattare l'infrastruttura (IaC), il testing, il deployment (CI/CD) e l'observability come discipline ingegneristiche a tutti gli effetti \u00e8 il segno di un team moderno e performante.</p>"},{"location":"books/Go%20Domain%20Driven%20Design/#303-oltre-il-libro-i-vostri-prossimi-passi","title":"30.3. Oltre il Libro: I Vostri Prossimi Passi \ud83d\ude80","text":"<p>Questo libro \u00e8 una base solida, ma il mondo dell'ingegneria del software \u00e8 in continua evoluzione. Ecco alcune aree in cui potete approfondire le vostre conoscenze per continuare a crescere.</p> <p>Approfondimenti Tecnici:</p> <ul> <li> <p>Event Sourcing in Pratica: Abbiamo introdotto il concetto, ma implementare un Event Store robusto, gestire lo snapshotting per le performance e il versioning degli eventi sono argomenti che meritano un libro a parte.</p> </li> <li> <p>Data Mesh: Man mano che un'organizzazione cresce, come si gestisce la \"propriet\u00e0\" dei dati tra decine o centinaia di Bounded Context? Il Data Mesh \u00e8 un paradigma socio-tecnico emergente per affrontare questo problema su scala aziendale.</p> </li> <li> <p>Advanced Cloud Networking &amp; Security: Approfondite le VPC di AWS, le security groups, le NACL, e pattern di sicurezza come il \"zero trust\".</p> </li> <li> <p>WebAssembly (Wasm): Una tecnologia emergente che potrebbe rivoluzionare il modo in cui eseguiamo codice portabile e sicuro, sia sul frontend che sul backend (es. come runtime per funzioni serverless).</p> </li> </ul> <p>Risorse Consigliate per lo Studio Continuo:</p> <ul> <li> <p>Libri Classici: Rileggete periodicamente \"Domain-Driven Design\" di Eric Evans e \"Implementing Domain-Driven Design\" di Vaughn Vernon. Aggiungete alla vostra libreria \"Clean Architecture\" di Robert C. Martin e \"Building Microservices\" di Sam Newman.</p> </li> <li> <p>Blog e Autori: Seguite figure chiave come Martin Fowler, Gregor Hohpe, e le pubblicazioni tecniche di aziende all'avanguardia come Netflix, Uber e Amazon.</p> </li> <li> <p>Community: Partecipate a conferenze (come DDD Europe, GOTO, QCon) e a meetup locali. La discussione e il confronto con altri professionisti sono fonti di apprendimento inestimabili.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#304-lapplicazione-where-should-i-be-possibili-evoluzioni","title":"30.4. L'Applicazione \"Where Should I Be?\": Possibili Evoluzioni","text":"<p>Il modo migliore per imparare \u00e8 fare. Il nostro progetto di esempio \u00e8 un'ottima base di partenza per sperimentare. Ecco alcune idee su come potreste estenderlo:</p> <ul> <li> <p>Implementare un <code>SocialContext</code>: Permettete agli utenti di rendere pubblici i loro viaggi, di seguirsi a vicenda e di lasciare commenti. Questo vi costringer\u00e0 a progettare nuove integrazioni tra contesti.</p> </li> <li> <p>Implementare un <code>BookingContext</code>: Integrate API reali (es. di hotel o compagnie aeree) per aggiungere funzionalit\u00e0 di prenotazione. Sar\u00e0 un'ottima occasione per implementare un Anti-Corruption Layer robusto.</p> </li> <li> <p>Rifattorizzare in Event Sourcing: Provate a modificare il <code>TripPlanningContext</code> per renderlo completamente event-sourced. Implementate una funzione \"Annulla Ultima Modifica\" per vedere la potenza di questo pattern.</p> </li> <li> <p>Migliorare il Frontend: Aggiungete mappe interattive (usando librerie come Mapbox o Leaflet.js), funzionalit\u00e0 offline con i Service Worker, o animazioni pi\u00f9 ricche.</p> </li> </ul>"},{"location":"books/Go%20Domain%20Driven%20Design/#305-conclusione-finale-costruire-con-intenzione","title":"30.5. Conclusione Finale: Costruire con Intenzione","text":"<p>Siamo giunti al termine. Spero che questo libro vi abbia lasciato non solo con una serie di competenze tecniche, ma con un nuovo modo di pensare al software.</p> <p>Costruire software di qualit\u00e0, specialmente su larga scala, non \u00e8 mai un caso. Non \u00e8 il risultato dell'uso dell'ultimo framework di moda o di una scrittura di codice febbrile. \u00c8 il risultato di un design intenzionale. \u00c8 il prodotto di decisioni deliberate, di compromessi ponderati e di una continua ricerca di chiarezza e semplicit\u00e0.</p> <p>I pattern e le pratiche che abbiamo discusso\u2014dal DDD alla Clean Architecture, dall'IaC all'Observability\u2014non sono dogmi da seguire ciecamente. Sono una bussola e una mappa. Sono un linguaggio condiviso per ragionare sulla complessit\u00e0, per comunicare le nostre decisioni e per costruire sistemi che non solo risolvano i problemi di oggi, ma che siano anche pronti ad affrontare le sfide di domani.</p> <p>Il vostro viaggio come architetti, designer e ingegneri del software \u00e8 appena iniziato. Spero che questo libro vi sia stato una guida utile. Ora, andate e costruite qualcosa di straordinario.</p> <p>**</p> <p>**</p>"},{"location":"books/the-almanack-of-naval-ravikant/","title":"The almanack of naval ravikant","text":"<p>the-almanack-of-naval-ravikant</p>"},{"location":"books/critical%20thinking/designing-your-life/","title":"Designing your life","text":"<p>One of the most powerful ways to design your life is to design your lives. ~ Dave Evans </p> <p>Deciding which worries are worth your effort is one of the most important decisions ever. \u201d </p> <ul> <li>Health</li> <li>Work</li> <li>Play</li> <li>Love  Reflect on each area of your life and rank them from zero to one hundred, with zero being the least important. Then, try to find an actionable problem in each segment you can tackle.\u201d </li> </ul> <p>\u201cGravity problems are predicaments that are not actionable or solvable\u201d </p> <p>\u201cto find direction in life, we must establish coherence between our workview and lifeview. That is, who we are, what we believe, and what we do must align. \u201d </p> <p>\u201cLogging whatever you are doing in the Good Time Journal is essential for understanding which activities drain you and which bring you joy.\u201d </p> <p>\u201cWhen we put all our eggs in one basket by focusing on a single way out of a situation, we invariably put a lot of pressure on ourselves, making it difficult to make logical decisions.\u201d  Don\u2019t make the mistake of focusing solely on the first idea that comes to your mind or what you believe to be a perfect idea.\u201d </p> <p>\u201cMake the mind map.  Write down your topic in the center of a blank sheet of paper and circle it. Draw four lines, in different directions, from that circle.  Write four things related to that central idea at the end of each line. Then draw four lines from each of the new points and write down four words associated with it. This step is complete when you have five levels of word associations. Make secondary connections and create concepts. Look at the associations you\u2019ve compiled. Choose the most interesting ones. Combine them and create a few concepts.\u201d </p> <p>\u201cYou need an Odyssey Plan if you want to make a life design. You must devise three life paths in the next five years to do this.\u201d </p> <p>\u201cWe can always choose to be happy.\u201d</p>"},{"location":"books/critical%20thinking/drive/","title":"Drive","text":"<p>In a complex society, co-operation became essential for everyone\u2019s security and sanity. </p> <p>Motivation 1.0 ensured we survived in the wild and evolved to live in viable, self-sustaining communities</p> <p>Motivation 2.0 is easily comprehensible, convenient to track, and uncomplicated to impose. --&gt; no second-order thinking  --&gt; selfish The-Elephant-in-the-Brain</p> <p>Motivation 3.0 Harry F. Harlow termed \u2018intrinsic motivation\u2019 \u2014 the need to perform creative work simply for the intellectual fulfillment one gets for doing it. This is needed for complex, non obvious work environments driven by heuristics and creativity, not simple standard routines.</p> <p>Negative behaviors such as selfishness, cheating, addiction, and myopic thinking increase when the focus is only on the reward/salary. But if it set too low compared to internal and external similar jobs, there will be zero motivation at all.</p> <p>rewards can turn an interesting task into unwanted work and in the process, diminish the intrinsic motivation required to do it; and eliminate performance, creativity and upstanding behavior. This is the Sawyer Effect.\u201d </p> <p>\u201cIf-then\u201d rewards \u2014 if you do this, then you get that \u2014 force us to forfeit some of our autonomy. Also, rewards, by their very nature, narrow our focus and concentrate our minds, which are useful when the task at hand is algorithmic or routine in nature, where there is a clearly-defined path to the solution; but become an absolute disaster when the task at hand is heuristic or creative in nature. \u201d </p>"},{"location":"books/critical%20thinking/drive/#autonomy-mastery-and-purpose","title":"Autonomy, mastery and purpose","text":"<p>Individuals who are motivated intrinsically tend to achieve more in the long run than those who seek rewards</p> <p>Type I behavior is a renewable resource.  --&gt; designing-your-life: good time journal</p> <p>\u201cresults-only-work-environment. In a ROWE, there are no schedules. No one needs to show up at work at all. There\u2019s only work to do and the results turned in at agreed timelines,\u201d </p> <p>Mastery = engagement + flow \u201cMastery is the desire to get better at something that matters. It results from engagement and flows\u201d </p> <p>State of flow \u201cIn an autotelic experience, the activity is its own reward and time flies by without self-consciousness. The proverbial state of \u2018flow\u2019 is achieved.\u201d </p> <p>\u201cThe relationship between what one has to do and what one could do becomes perfect. The challenge is not too easy, neither is it too difficult. Body and mind are stretched in a way that the effort itself is the most delicious reward.\u201d </p> <p>according to Mihaly Csikszentmihalyi, \u201cpurpose provides activation energy for living.\"</p>"},{"location":"books/critical%20thinking/inventing-temperature/","title":"Inventing temperature","text":""},{"location":"books/critical%20thinking/inventing-temperature/#inventing-temperature-measurement-and-scientific-progress","title":"Inventing temperature : measurement and scientific progress","text":"<p>https://academic.oup.com/book/5530</p>"},{"location":"books/critical%20thinking/the-art-of-strategy/","title":"The art of strategy","text":"<ol> <li>Look forward and reason backward    critical-thinking/second-order thinking    Decision trees</li> <li></li> </ol>"},{"location":"books/critical%20thinking/the-elephant-in-the-brain/","title":"The elephant in the brain","text":""},{"location":"books/critical%20thinking/the-elephant-in-the-brain/#kevin-simler-robin-hanson","title":"Kevin Simler, Robin Hanson","text":"<p>https://www.goodreads.com/book/show/28820444-the-elephant-in-the-brain</p>"},{"location":"books/critical%20thinking/the-elephant-in-the-brain/#key-points","title":"Key points","text":"<ol> <li>Humans are designed to be selfish:     Selfishness has evolved through the years to protect us from the environment.    Our subconscious hides us the true motivations of our actions in order to not feel terrible all the time and so change our actions.     self-deception Our brain pushes us toward the things we want.</li> <li>We deceive ourselves to protect from the world:     We want to look good in other judgements, so we automatically hide our bad features.    Deception is a result of a competitive evolution.    eg: ignoring an injury to play more</li> <li>Check the how-to-read-body-language: </li> <li>Advertising deceives you</li> <li>Religion and culture influence you</li> <li>Identify your true motives to make positive changes</li> </ol> <p>https://www.reddit.com/r/slatestarcodex/comments/aqko2h/the_elephant_in_the_brain_discussion_questions/ - Private, anonymous and costless behaviours are poor signals.</p>"},{"location":"books/critical%20thinking/the-elephant-in-the-brain/#see-elephant-in-the-brain-vs-good-inside","title":"See elephant-in-the-brain-vs-good-inside","text":""},{"location":"books/critical%20thinking/thinking-in-systems/","title":"Thinking in systems","text":""},{"location":"books/critical%20thinking/thinking-in-systems/#key-concepts-and-principles","title":"Key Concepts and Principles","text":"<ol> <li>Definition of a System:<ul> <li>A system is a set of interrelated elements organized to achieve a goal. Systems can be found everywhere, from biological organisms to social structures and ecosystems.</li> <li>Quote: \u201cA system is more than the sum of its parts. It may exhibit adaptive, dynamic, goal-seeking, self-preserving, and sometimes evolutionary behavior.\u201d</li> </ul> </li> <li>Stocks and Flows:    <ul> <li>Stocks are the elements of the system that you can see, feel, count, or measure at any given time (e.g., water in a reservoir).</li> <li>Flows are the rates of change in stocks (e.g., water flowing into or out of the reservoir).</li> </ul> </li> <li>Feedback Loops:    <ul> <li>Balancing Loops: These loops seek stability and equilibrium. For example, a thermostat regulating room temperature.</li> <li>Reinforcing Loops: These loops amplify changes and can lead to exponential growth or collapse. For example, the spread of a virus.</li> <li>Quote: \u201cThe ability to self-organize is the strongest form of system resilience. A system that can evolve can survive almost any change, by changing itself.\u201d</li> </ul> </li> <li>System Boundaries:    <ul> <li>Boundaries define what is inside and outside the system. They are crucial for understanding the system\u2019s behavior and interactions.</li> <li>Quote: \u201cRemember that boundaries are of our own making, and that they can and should be reconsidered for each new discussion, problem, or purpose.\u201d</li> </ul> </li> <li>Leverage Points:    <ul> <li>These are places within a system where a small change can lead to significant impacts. Identifying and utilizing leverage points is key to effective system intervention.</li> <li>Quote: \u201cLeverage points are points of power. They are places within a complex system where a small shift in one thing can produce big changes in everything.\u201d</li> </ul> </li> <li>Non-linear Relationships:    <ul> <li>In systems, the relationship between cause and effect is often non-linear. This means that small efforts can sometimes lead to large successes, and vice versa. Understanding these non-linear relationships is crucial for effective system management.</li> <li>Quote: \u201cIn complex systems, cause and effect are not closely related in time and space.\u201d</li> </ul> </li> <li>Delays:    <ul> <li>Delays are the time lags between an action and its visible effect. They can cause oscillations and instability in systems if not properly managed. Recognizing and accounting for delays is essential for accurate system analysis.</li> <li>Quote: \u201cDelays in feedback loops are critical determinants of system behavior.\u201d</li> </ul> </li> <li> <p>Information Flows:    </p> <ul> <li>The flow of information between subsystems is vital for the system\u2019s overall function. Information flows help coordinate actions and responses within the system, ensuring that all parts work together harmoniously.</li> <li>Quote: \u201cInformation is the lifeblood of a system. It is the flow of information that holds systems together and determines how they operate.\u201d</li> </ul> </li> <li> <p>Dynamic Equilibrium:    </p> <ul> <li>Systems often strive for a state of balance where inflows and outflows are equal, maintaining stability. This dynamic equilibrium is crucial for the system\u2019s resilience and sustainability.</li> <li>Quote: \u201cA system in dynamic equilibrium is in a state of balance, even though it may be constantly changing.\u201d</li> </ul> </li> <li> <p>System Archetypes:    </p> <ul> <li>Common patterns of behavior in systems, known as archetypes, help in diagnosing problems and finding solutions. Examples include \u201cLimits to Growth\u201d and \u201cTragedy of the Commons.\u201d</li> <li>Quote: \u201cSystem archetypes are recurring patterns of behavior that can help us understand and predict system behavior.\u201d</li> </ul> </li> <li> <p>Self-Organization:    </p> <ul> <li>Systems have the ability to self-organize, meaning they can develop new structures and behaviors without external direction. This property is key to their adaptability and resilience.</li> <li>Quote: \u201cSelf-organization is the capacity of a system to change its structure and behavior in response to external conditions.\u201d</li> </ul> </li> </ol>"},{"location":"books/critical%20thinking/thinking-in-systems/#broken-window-theory-and-systems-thinking","title":"Broken Window Theory and Systems Thinking","text":"<p>Broken Window Theory\u00a0posits that visible signs of disorder and neglect, such as broken windows, graffiti, and litter, can lead to an increase in crime and antisocial behavior.\u00a0This theory suggests that maintaining and monitoring urban environments in a well-ordered condition may prevent further vandalism and escalation into more serious crime1.</p> <p>Criticism to Broken windows theory - Wikipedia</p>"},{"location":"books/management/the-managers-path/","title":"The managers path","text":""},{"location":"books/management/the-managers-path/#1-management-101","title":"1. Management 101","text":"<p>Concept: Basic principles of management. </p> <p>Example: Imagine a new manager, Alex, who has just been promoted from a senior engineering role. Alex starts by setting up regular one-on-one meetings with each team member. During these meetings, Alex provides feedback, discusses career goals, and addresses any concerns.  Theory: The foundation of effective management lies in clear communication, regular feedback, and support for career growth. By establishing a routine of one-on-one meetings, Alex ensures that team members feel heard and valued, which can lead to higher job satisfaction and productivity. This approach is rooted in the theory of transformational leadership, which emphasizes the importance of inspiring and motivating employees through direct and meaningful interactions.</p> <p>Share the responsibility of 1-1s meetings.  Come with a prepared agenda. - Avoid just status update,  - focus on topics above your team (company vision, market changes, new opportunities in other teams...),  - new stretch topics to work on to get more visibility,  - trainings,  - issues inside the team,  - overall strategy (are you working on the hot topics?) - agree on some goal to reach a promotion or a raise next year</p> <p>Find the best manager and the best mentor in your company and kindly ask directly for some guidance or suggestion periodically.</p> <p>The more you get senior the more you get in an uncertainty environment. If everything is already in order and well structured when you work on it, you're doing it wrong and you're probably far from increase your seniority.</p> <p>Even if your manager is stressful only you are responsible for your own work life balance. -&gt; Always plan and schedule your activities, deny or postpone the rest as much as you can.</p> <p>As always only complaining is not useful to anyone! If there is an issue think about a possible solution first or search/ask proactively if someone else has already worked on a similar problem before complaining.</p> <p>Make strong relationship with managers able to understand and play the company politics game. Managers coming from an engineering path are usually bad at this.</p>"},{"location":"books/management/the-managers-path/#2-mentoring","title":"2. Mentoring","text":"<p>Concept: The importance of mentoring in career development. </p> <p>Example: Sarah, a senior engineer, takes on the role of a mentor for a junior colleague, John. She helps John navigate technical challenges, provides guidance on best practices, and offers career advice.  Theory: Mentoring is crucial for professional growth and knowledge transfer. It creates a supportive environment where less experienced employees can learn from their more seasoned counterparts. This aligns with the social learning theory, which posits that people learn from one another through observation, imitation, and modelling. By mentoring John, Sarah not only helps him develop his skills but also reinforces her own knowledge and leadership abilities.</p> <p>Prepare an onboarding: select a project or some ABC task being part of a project you know well. Never act competitive. Never act intimidating.  Listen. Explain difficult concepts in different ways and with diagrams. Define clear goals or acceptance tests and let the mentored to find its own path. Be ready for the coming questions. Check the understanding. Ask for code or process explanation, ask to present their work.</p>"},{"location":"books/management/the-managers-path/#3-tech-lead","title":"3. Tech Lead","text":"<p>Concept: Balancing technical expertise with leadership. </p> <p>Example: As a tech lead, Michael is responsible for guiding his team through a complex project. He makes key technical decisions, reviews code, and ensures that the team adheres to best practices. At the same time, he supports his team members by providing clear direction and resolving any issues that arise.  Theory: The role of a tech lead requires a combination of technical skills and leadership abilities. This dual focus ensures that projects are executed efficiently and that team members are supported in their work. The situational leadership theory is relevant here, as it suggests that effective leaders adapt their style to the needs of their team and the specific situation. Michael\u2019s ability to switch between technical and leadership tasks exemplifies this adaptive approach.</p>"},{"location":"books/management/the-managers-path/#4-managing-people","title":"4. Managing People","text":"<p>Concept: Handling interpersonal relationships and team dynamics. </p> <p>Example: Emma, a manager, notices tension between two team members, David and Lisa. She arranges a meeting with them to discuss the issue and facilitates a constructive conversation to address their concerns. By mediating the conflict, Emma helps restore a positive work environment. Theory: Effective people management involves empathy, conflict resolution, and fostering a collaborative culture. The emotional-intelligence theory highlights the importance of understanding and managing one\u2019s own emotions, as well as those of others. Emma\u2019s ability to empathize with David and Lisa and guide them towards a resolution demonstrates high emotional intelligence, which is essential for maintaining a harmonious team dynamic.</p>"},{"location":"books/management/the-managers-path/#5-managing-a-team","title":"5. Managing a Team","text":"<p>Concept: Leading a team to achieve common goals. </p> <p>Example: As a team manager, Robert sets clear objectives for a new project and delegates tasks based on each team member\u2019s strengths. He regularly checks in with the team to monitor progress and provide support where needed. Theory: Successful team management requires goal setting, delegation, and motivation. The goal-setting theory suggests that specific and challenging goals lead to higher performance. By setting clear objectives and aligning tasks with individual strengths, Robert ensures that the team is focused and motivated to achieve their goals. Additionally, the theory of motivation, such as Maslow\u2019s hierarchy of needs, emphasizes the importance of addressing both intrinsic and extrinsic motivators to keep the team engaged.</p>"},{"location":"books/management/the-managers-path/#6-managing-multiple-teams","title":"6. Managing Multiple Teams","text":"<p>Concept: Overseeing several teams and ensuring alignment. </p> <p>Example: Laura, a senior manager, is responsible for multiple teams working on interconnected projects. She holds regular cross-team meetings to ensure that everyone is aligned and that any dependencies are managed effectively. Theory: Managing multiple teams involves strategic planning, communication, and resource allocation. The systems theory approach is relevant here, as it views an organization as a complex set of interrelated parts. Laura\u2019s ability to coordinate efforts across teams ensures that the organization functions smoothly as a whole. Effective communication and strategic alignment are key to managing the interdependencies and achieving overall organizational goals.</p>"},{"location":"books/management/the-managers-path/#7-managing-managers","title":"7. Managing Managers","text":"<p>Concept: Leading other managers and developing their leadership skills. </p> <p>Example: As a director, James provides guidance and support to new managers in his organization. He conducts leadership training sessions and offers one-on-one coaching to help them develop their skills. Theory: Effective leadership at higher levels requires mentoring and developing other leaders. The servant leadership theory emphasizes the importance of leaders serving their teams and helping them grow. By focusing on the development of new managers, James ensures that the organization has a strong leadership pipeline. This approach not only enhances the capabilities of individual managers but also contributes to the overall success of the organization.</p>"},{"location":"books/management/the-managers-path/#8-the-big-leagues","title":"8. The Big Leagues","text":"<p>Concept: Transitioning to executive roles. </p> <p>Example: After years of leading technical teams, Rachel is promoted to the role of CTO. She shifts her focus from day-to-day technical decisions to strategic planning and organizational influence. Theory: Executive leadership involves strategic vision, organizational influence, and high-level decision-making. The transformational leadership theory is particularly relevant at this level, as it emphasizes the role of leaders in inspiring and motivating the entire organization. Rachel\u2019s ability to articulate a clear vision and influence the direction of the company is crucial for driving long-term success. This transition also requires a deep understanding of the organization\u2019s goals and the ability to align resources and efforts to achieve them.</p>"},{"location":"books/management/the-managers-path/#9-bootstrapping-culture","title":"9. Bootstrapping Culture","text":"<p>Concept: Building and maintaining a positive organizational culture. </p> <p>Example: As a founder, Mark implements initiatives that promote diversity and inclusion within his startup. He creates policies that support work-life balance and fosters an environment where all employees feel valued and respected. Theory: A strong organizational culture enhances employee satisfaction, retention, and overall performance. The organizational culture theory suggests that the values, beliefs, and behaviors shared by members of an organization shape its overall environment. By actively promoting a positive culture, Mark ensures that his startup attracts and retains top talent. This approach not only improves employee morale but also drives innovation and productivity.</p>"},{"location":"books/money/psychology-of-money/","title":"Psychology of money","text":"<p>https://www.goodreads.com/book/show/41881472-the-psychology-of-money Morgan Housel</p> <ul> <li>https://www.reddit.com/r/Fire/comments/rzx5ki/the_psychology_of_money_by_morgan_houselone_idea/</li> <li>https://www.reddit.com/r/books/comments/10f7sr1/key_take_aways_from_the_book_the_psychology_of</li> </ul> <p>in the real world people don't make financial decisions on a spreadsheet. They make them at the dinner table, or in a meeting room, where personal history, your own unique view of the world, ego, pride, marketing, and odd incentives are scrambled together.</p>"},{"location":"books/money/psychology-of-money/#1-no-one-is-crazy","title":"1. No one is crazy:","text":"<p>Doing well with money has a little to do with how smart you are and a lot to do with how you behave. And behavior is hard to teach, even to really smart people. </p> <p>\u201cPeople born in different generations tend to have varying views of money and this affects everything, including how they invest. \u201d </p> <p>\u201cWe can do almost nothing about luck and risk and how they affect our finances.\u201d </p>"},{"location":"books/money/psychology-of-money/#2-stop-chasing-money","title":"2. Stop chasing money","text":"<p>\u201cOn the one hand capitalism helps you accumulate wealth that can be transferred to your kids after you're dead. That's the good part. The other side of the coin is that it fosters envy. The type of envy that turns you into a perpetual money chaser.\u201d </p> <p>You may think you're working hard for yourself or your family, but you could be decepting yourself denying you're doing it for the envy of a neighbor or of a colleague. The Elephant in the Brain</p> <p>Controlling your time is the highest dividend money pays.</p>"},{"location":"books/money/psychology-of-money/#3-play-a-long-term-game","title":"3. Play a long term game","text":"<p>You need more than skill to sustain wealth. Skills can bring you the first moneys, but success will make you relentless.</p>"},{"location":"books/money/psychology-of-money/#4-happiness","title":"4. Happiness","text":"<p>what made them happy was having meaningful relationships, spending quality time with family, and being part of something bigger than themselves. When you realize that several scientific researches support these points, you will want to take it seriously  Books/drive</p>"},{"location":"books/money/psychology-of-money/#5-dont-aim-to-be-rich-aim-to-be-wealthy","title":"5. Don't aim to be rich, aim to be wealthy","text":"<p>\u201cWealth is the money you save and invest. It's the assets you own. And that's the thing people don't see. What most people see is the display of riches and anyone can appear to be rich. Matter of fact, many people who look rich are actually broke.\u201d </p> <p>\u201cit doesn't make sense to impress people at your own expense. Focus on building wealth, not showcasing riches you can't afford.\u201d </p>"},{"location":"books/money/psychology-of-money/#conclusions","title":"Conclusions","text":"<p>Investors must have no sunk cost. Join an investment club. What's the use of the money if you can't enjoy it?</p>"},{"location":"books/money/the-simple-path-to-wealth/","title":"The simple path to wealth","text":"<ul> <li>The Simple Path to Wealth: Your road map to financial independence and a rich, free life by J.L. Collins https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth</li> <li>https://booksthatslay.com/the-simple-path-to-wealth-summary/</li> </ul>"},{"location":"books/money/the-simple-path-to-wealth/#wealth-creation-for","title":"Wealth creation for","text":"<p>the everyday man No one ever became rich on their salary alone. Avoid debt by all means.  \u201cdebt never goes away if you keep incurring more in hopes that one day, you\u2019ll pay it back. Debt is the biggest hindrance to creating and sustaining wealth\u201d </p>"},{"location":"books/money/the-simple-path-to-wealth/#how-to-manage-money","title":"How to manage money","text":"<p>Credit card debt is not a sustainable debt; it increases with each delayed payment.  Debt blocks you to build a sustainable wealth.</p> <p>\u201cif you already have debt, then you can reconcile everything. Pay it off ahead of schedule. Whatever money you receive, use it to service the debt instead of waiting for it to accumulate.\u201d  Tailor your lifestyle to one that doesn't give room to credit. </p> <p>Investing is the way to make money work for you, even when you're out of work.</p>"},{"location":"books/money/the-simple-path-to-wealth/#the-stock-market","title":"The stock market","text":"<p>Here\u2019s the simple formula: Spend less than you earn\u2014invest the surplus\u2014avoid debt. ~ J.L. Collins </p> <p>\u201cAn index fund is a type of mutual fund with a portfolio constructed to match or track a financial market index\u2019s component. It is high risk and will test your tolerance and patience, but it holds high rewards for you. </p> <p>Did you know? Interest rates on bank cash deposits will never beat inflation; putting your money in moderate and high\u2013risk investments is the only way to beat inflation over the long term.\u201d </p>"},{"location":"books/money/the-simple-path-to-wealth/#index-funds-and-bonds","title":"Index funds and bonds","text":"<p>\u201cWhile buying stocks is like buying a part of a company, buying bonds is technically lending money to a company or institution and having them pay you back with interest. They offer a safer route to wealth\u2013building. It aids in sheltering you from the effect of deflation \u2014 when the prices of goods drop, the value of money increases. \u201d </p> <p>You only have to worry if the company can pay you when the year ends.</p> <p>\u201cIf the interest rates drop, bonds increase in value, but if the interest rates rise, then the price you can sell them falls.  All of this gets regulated by the Secondary Bond Market \u2014 this is where bonds are traded and monitored.  There are three kinds of treasury securities (bonds) based on the length of time it takes to mature:  \u2022 Short term bonds which span from 1\u20135 years and are Bills  \u2022 Midterm bonds that span from 6\u201312 years and are known as Notes \u2022 Long term bonds are known as Bonds that span from 12 years at the least and more on average.\u201d </p> <p>Collins points out investing in VTSAX \u2014 total stock market index fund \u2014 if you look to cast your net and pull in significant returns. By effect, you\u2019d own every single company being publicly traded \u2014 that\u2019s about 3,700 companies.</p>"},{"location":"books/money/the-simple-path-to-wealth/#retirement-plan","title":"Retirement plan","text":"<p>\u201cyou probably should invest in Vanguard Total Stock Market Index. It is a surefire way to assure a safe, comfortable and wealthy retirement.\u201d </p> <p>Any individual should have a retirement plan that will be a reward after working for so long. </p> <p>Some firms take the initiative to set up a hefty retirement plan for their staff. If yours doesn\u2019t you should set one up for yourself. </p> <p>\u201cbonds are only good for one thing,  smoothing the ride to retirement.  Also, make sure you have an HSA \u2014 health savings account for those medical bills you\u2019d be unable to cover immediately and for your long\u2013term healthcare.\u201d </p>"},{"location":"books/money/the-simple-path-to-wealth/#financial-freedom","title":"Financial freedom","text":"<p>\u201cYou can withdraw just within 4% of your savings/investments in stocks, and you\u2019d be in the safe zone 8.5/10 times. \u201d  --&gt; do you have to sell 4% of the funds each year? What if you have plenty in a compound PAC?</p> <p>\u201cWhat is the most sensible and lucrative ratio for the two? Collins places it at  75 stores in Vanguard Total Stock Market Index Fund (VTSAX),  25 in Vanguard Total Bond Market Index Fund Admiral Shares (VBTLX).  This ratio ensures that you are 75% committed to amassing wealth and 25% to preserving it.\u201d </p> <p>\u201cwhy not balance it to be 50/50? The answer to that is simple. It takes more effort to invest in gathering wealth than it does to preserve it. \"</p> <p>https://www.investopedia.com/articles/investing/111215/vanguard-total-stock-index-vs-vanguard-500-index-fund.asp</p> <p>\"The Simple Path to Wealth\" by J.L. Collins offers several practical suggestions on budgeting, cutting unnecessary expenses, and prioritizing spending to align with personal values and long-term financial goals:</p>"},{"location":"books/money/the-simple-path-to-wealth/#budgeting","title":"Budgeting","text":"<ol> <li>Track Your Spending: Collins emphasizes the importance of knowing where your money goes. By tracking your expenses, you can identify areas where you might be overspending.</li> <li>Create a Simple Budget: Focus on essential categories such as housing, food, transportation, and savings. Allocate a portion of your income to each category and stick to it\u00b9.</li> </ol>"},{"location":"books/money/the-simple-path-to-wealth/#cutting-unnecessary-expenses","title":"Cutting Unnecessary Expenses","text":"<ol> <li>Live Below Your Means: Collins advocates for a frugal lifestyle. This doesn't mean depriving yourself but rather making conscious choices about spending. Avoid lifestyle inflation, where your expenses increase as your income rises\u00b9.</li> <li>Avoid High-Interest Debt: Credit card debt and other high-interest loans can quickly erode your wealth. Pay off these debts as soon as possible and avoid incurring new ones\u00b9.</li> <li>Evaluate Subscriptions and Memberships: Regularly review your subscriptions and memberships to ensure they are still valuable to you. Cancel those that no longer serve your needs\u00b9.</li> </ol>"},{"location":"books/money/the-simple-path-to-wealth/#prioritizing-spending","title":"Prioritizing Spending","text":"<ol> <li>Align Spending with Values: Spend money on things that truly matter to you and bring joy or value to your life. This might mean cutting back on dining out to save for travel or investing in hobbies that enrich your life\u00b9.</li> <li>Invest in Your Future: Prioritize saving and investing over immediate gratification. Collins suggests automating your savings and investments to ensure you consistently put money aside for your future\u00b9.</li> <li>Emergency Fund: Build and maintain an emergency fund to cover unexpected expenses. This fund should be easily accessible and cover 3-6 months of living expenses\u00b9.</li> </ol>"},{"location":"books/money/the-simple-path-to-wealth/#long-term-financial-goals","title":"Long-Term Financial Goals","text":"<ol> <li>Set Clear Financial Goals: Define what financial independence looks like for you. This could be retiring early, traveling, or starting a business. Having clear goals helps you stay motivated and focused\u00b9.</li> <li>Invest in Low-Cost Index Funds: Collins strongly recommends investing in low-cost index funds, such as the Vanguard Total Stock Market Index Fund (VTSAX), to grow your wealth over time\u00b9.</li> <li>Regularly Review and Adjust: Periodically review your financial plan and make adjustments as needed. Life circumstances change, and your financial plan should be flexible enough to adapt\u00b9.</li> </ol> <p>By following these suggestions, you can create a budget that supports your financial goals, cut unnecessary expenses, and prioritize spending in a way that aligns with your personal values and long-term objectives.</p> <p>\u00b9: Goodreads</p> <p>(1) The Simple Path To Wealth Summary and Key Lessons. https://booksthatslay.com/the-simple-path-to-wealth-summary/. (2) The Simple Path to Wealth: Your road map to financial i\u2026. https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth. (3) The Simple Path to Wealth: 5 key investing lessons by JL Collins. https://www.livemint.com/money/personal-finance/the-simple-path-to-wealth-5-key-investing-lessons-by-jl-collins-11702914469358.html. (4) The Simple Path to Wealth with JL Collins. https://www.youtube.com/watch?v=4dLZlGUclHg. (5) The Simple Path to Wealth | JL Collins | Talks at Google. https://www.youtube.com/watch?v=T71ibcZAX3I. (6) The Simple Path To Wealth By JL Collins (Summary). https://www.youtube.com/watch?v=k9BuLHbf7IA. (7) Mastering Wealth Key Lessons from 'The Simple Path to Wealth' by JL Collins. https://www.youtube.com/watch?v=Xyp4VFVp-HE. (8) What is The Simple Path to Wealth? | JL Collins | EP 284. https://www.choosefi.com/jl-collins-ep-284/. (9) The Simple Path to Wealth - Google Books. https://books.google.com/books/about/The_Simple_Path_to_Wealth.html?id=Kf6YzgEACAAJ. (10) The Simple Path to Wealth: Your road map to financial independence and .... https://www.amazon.it/Simple-Path-Wealth-financial-independence/dp/1737724103. (11) undefined. https://amzn.to/2vLnbrt. (12) undefined. https://itunes.apple.com/us/movie/playing-with-fire/id1485494923.</p>"},{"location":"books/money/your-money-or-your-life/","title":"Your money or your life","text":""},{"location":"books/money/your-money-or-your-life/#face-your-financial-reality","title":"Face your financial reality","text":"<p>Humans are creatures of habit books/atomic-habits,  stuck in patterns not aligned with reality. To overcome prejudice you must create your own roadmap.</p>"},{"location":"books/money/your-money-or-your-life/#net-worth","title":"Net worth","text":"<p>Income: - salary - gifts - stocks Assets: - liquid     - cash     - savings - Fixed     - house     - car Liabilities: - mortgages - car loan - credit card debts</p>"},{"location":"books/money/your-money-or-your-life/#prejudice-vs-money","title":"Prejudice VS money","text":"<ul> <li>Practical realm: daily transactions</li> <li>Psychological realm: your prejudice and beliefs about money coming from your family and your culture</li> <li>Cultural realm: shared beliefs about money (eg: USA VS Italy opposite debt/savings habits)</li> <li>Personal responsibility realm: you must understand that money is just a token exchanged for life energy, finite and tangible. Money has no intrinsic reality.</li> </ul>"},{"location":"books/money/your-money-or-your-life/#balance-sheet","title":"BALANCE SHEET","text":"<ul> <li>how much time do you invest in your job?   Calculate real hourly wage for all job related expenses and activities.   Add job-related hours to your spreadsheet and subtract them from your salary.</li> </ul>"},{"location":"books/money/your-money-or-your-life/#budgeting-equals-diet-culture","title":"Budgeting equals diet culture","text":""},{"location":"books/parenting/danish-way-of-parenting/","title":"Danish way of parenting","text":""},{"location":"books/parenting/danish-way-of-parenting/#parent","title":"PARENT","text":"<ul> <li>Play: preventing from playing may cause deficit attention disorders. Reduce screen time. Don't focus only on learning activities.        -&gt; Get art supplies. Go out consistently weekly in public playgrounds. Let them play alone.</li> <li>Authenticity: the goal is not perfection and not to avoid bad feelings. Face tragedies together, don't hide from them.       -&gt; Do not always compliment and praise. Do not judge. Tell stories about everything real in life.</li> <li>Reframe: avoid binary thinking (false dichotomy -&gt; critical-thinking). Do not deny their suffering, help them seeing it from different point of views. Be a realist optimist.</li> <li>Empathy: listen more and talk less. Judgement will make them to suffer in silence. Value community over individuals.       -&gt; Assist them identifying emotions. Read books together. Show your vulnerabilities.</li> <li>No Ultimatums: be authoritative not authoritarian, set high goals and standards but support them achieving them without punishments or judgements.       -&gt; physical punishments is linked to mental issues and substances abuse.<ul> <li>Physical punishment of children: lessons from 20 years of research</li> <li></li> <li>recognize your child is not trying to harm you, they don't even have the brain fully developed (amygdala, pre-frontal cortex...). </li> <li>go in another place for a few minutes and breathe DEEPLY!</li> </ul> </li> <li>Togetherness: meet with family every time you can (hygge style).</li> </ul> <p>Videos: - # Teaching Empathy: The Danish Way of Parenting, co-author Jessica Alexander - Danish Way of Parenting. How to Raise Smart and Happy Children - By Jessica Joelle Alexander Other Books - Positive Discipline\u201d by Jane Nelsen: A comprehensive guide on non-punitive discipline techniques. - \u201cThe Whole-Brain Child\u201d by Daniel J. Siegel and Tina Payne Bryson: Explores strategies to nurture a child\u2019s developing mind.</p>"},{"location":"books/parenting/good-inside/","title":"Good inside","text":""},{"location":"books/parenting/good-inside/#becky-kennedy","title":"Becky Kennedy","text":"<p>https://www.goodreads.com/book/show/59627738-good-inside</p>"},{"location":"books/parenting/good-inside/#youre-raising-humans","title":"You're raising humans","text":"<p>\u201cYou push them away every time you prioritize their behaviour over your relationships. You send them off to their room, thus leaving them alone when they need you most. \u201d </p> <p>Your child's behaviour will matter less in the long run than your response to it. </p>"},{"location":"books/parenting/good-inside/#youre-not-your-parent","title":"You're not your parent","text":"<p>https://youtu.be/jyMZ_LOVcvo?si=xcxaoos04YsJvPzx</p> <p>Feeling unseen and unheard makes people feel lonely, even in a seemingly loving relationship. </p>"},{"location":"books/parenting/good-inside/#win-the-war-by-avoiding-the-battle","title":"Win the war by avoiding the battle","text":"<p>if your strategy in a fight is to convince, you're setting yourself up for failure.</p> <p>\u201cYou may outwit or convince your child of your rightness, but then you will also demonstrate that their emotions aren't valid, their truth is unimportant, and their words are lies.\u201d </p>"},{"location":"books/parenting/good-inside/#you-are-your-childs-parent-not-friend","title":"\u201cYou are your child's parent, not friend\u201d","text":"<p>Your child needs permission to be who they are, not to do what they want. </p> <p>Boundaries are not what we tell kids not to do; boundaries are what we tell kids we will do. ~ Dr. Becky Kennedy</p>"},{"location":"books/parenting/good-inside/#a-good-inside-person-starts-with-self-care","title":"\u201cA good inside person starts with self-care\u201d","text":"<p>Your relationships with your children will mirror your relationship with yourself. </p> <ul> <li>breathe</li> <li>acknowledge: name your emotions</li> <li>respect the reasons for feeling that way</li> <li>start slow: 2 min meditation, 1 pg book, 5 min physical exercise..</li> </ul>"},{"location":"books/parenting/good-inside/#building-bridges","title":"Building bridges","text":"<p>\u201cinstead of punishing your child for inappropriate language or aggressiveness, think about whether they need your attention\u201d </p> <p>\u201cSee their behavior as a window to their inner state. Avoid reacting to big words or actions. Instead, strive to see the immense feelings within them. </p> <p>\u2022 Reduce their shame. This feeling can be devastating even when a child grows up because they hide and reject a part of themselves, feeling it's terrible, inappropriate, or unnatural. \u2022 Tell the truth. Never make a child doubt their observations by saying: \u201cNo, you just imagined it!\u201d or \u201cIt's not a big deal.\u201d Later, it may push them to doubt their reasons and judgments. \u2022 Answer their questions. Sometimes, \u201cWhere do babies come from?\u201d can strike you like a flash. However, pay attention to their inquiries even if they make you uncomfortable. \u2022 Introduce the \u201cPlay No Phone\u201d strategy. The PNP technique is a consistent short break that is essential in our age. Tell your child you will leave your phone and dedicate ten minutes of undivided attention to their preferred activity. Ask them what they want to do and follow through with their choice. PNP also means no distractions, siblings, screens, or tasks.  \u2022 Sit on the bench with them. Challenging moments have the most tremendous potential for connection. When your child misbehaves, set boundaries, but don't leave them alone by sending them to an imaginary punishment bench in their room. Sit with them. Help them share their life and emotions by showing that you are there for them. This way, they will feel heard, not dismissed. \u2022 Enhance playfulness. Create a family talent show, dance parties\u201d  </p>"},{"location":"books/parenting/good-inside/#know-your-plans","title":"Know your plans","text":"<p>\u201cKnowing and controlling your reactions is challenging. However, knowing your options before the situation happens makes you more likely to respond effectively\u201d </p> <p>\u201cWhat can you do when your child is not listening?  - Connect before you ask:  Show them that you care and understand that stopping what they are doing may be hard for them. It will  - Give them a choice: Say: \u201cWill you clean up after a shower or now?\u201d  - Use humor so they feel curious, not enforced. - Try the Close Your Eyes strategy: This t rick enhances trust and playfulness. Say: \u201cWhat if I closed my eyes and you already put on your sneakers and coat to go outside? If it happened, I would sing Rapunzel songs or jump in a circle like a bunny!\u201d </p>"},{"location":"books/parenting/good-inside/#how-can-you-manage-tantrums","title":"How can you manage tantrums?","text":"<ol> <li>Avoid self-loathing when it happens.</li> <li>Remember that two things are true. </li> <li>Name their wish. </li> <li>Wait it out. </li> </ol> <p>What do you do when they are rude or defiant?  1. See the feelings behind those words.  2. Set a boundary by letting them know they cannot behave this way 3. Recognize their feelings verbally. </p> <p>Finally, what are the steps to building healthy eating habits?   - Remember, you are responsible for what, when, and where your child eats, but eating or not and how much is entirely their choice.  - Serve a dessert with the main course. Let it be small so the child doesn't fill up with it. Requiring to eat something before dessert makes children feel they must work to deserve it, leading to an unhealthy attitude towards sweets.\u201d </p>"},{"location":"books/parenting/good-inside/#conclusions","title":"Conclusions","text":"<p>\u201cThe parent's job is to decode the message through their child\u2019s emotions and behavior, even if they speak through fists and screams.  However, don't confuse their behavior with their nature\u201d </p>"},{"location":"economics/microeconomics/","title":"Microeconomics","text":"<p>Sources: - Coursera - Illinois - Microeconomics Principles Specialization</p>"},{"location":"economics/microeconomics/#ten-key-microeconomics-principles-in-everyday-life","title":"Ten Key Microeconomics Principles in Everyday Life","text":""},{"location":"economics/microeconomics/#individual-decision-making-principles","title":"Individual Decision-Making Principles","text":""},{"location":"economics/microeconomics/#1-people-face-tradeoffs","title":"1. People Face Tradeoffs","text":"<p>Every decision involves giving up something to get something else. This principle affects our daily choices in profound ways.</p> <p>** Example:** Working from home vs. office work represents a clear tradeoff. While remote work saves commuting time and costs, it might reduce networking opportunities and spontaneous collaboration. Many professionals now actively weigh these tradeoffs when considering job offers or negotiating work arrangements.</p>"},{"location":"economics/microeconomics/#2-the-cost-of-something-is-what-you-give-up-to-get-it-opportunity-cost","title":"2. The Cost of Something Is What You Give Up to Get It (Opportunity Cost)","text":"<p>The true cost of any choice includes the foregone alternatives, not just the monetary price.</p> <p>** Example:** Spending time on social media has an opportunity cost. Those three hours scrolling through Instagram could have been used for learning a new skill on an online platform, exercising, or building a side business. The opportunity cost isn't just the free app download, but the value of alternative activities sacrificed.</p>"},{"location":"economics/microeconomics/#3-rational-people-think-at-the-margin","title":"3. Rational People Think at the Margin","text":"<p>Decisions are made by comparing marginal benefits and marginal costs of additional actions.</p> <p>** Example:** Streaming service subscriptions demonstrate marginal thinking. When deciding whether to keep Netflix, Disney+, and Amazon Prime, people evaluate the additional entertainment value each service provides against its additional monthly cost, often choosing to keep only those services that provide sufficient marginal benefit.</p>"},{"location":"economics/microeconomics/#4-people-respond-to-incentives","title":"4. People Respond to Incentives","text":"<p>Changes in costs or benefits motivate people to adjust their behavior.</p> <p>** Example:** Electric vehicle tax credits and rebates have significantly influenced consumer behavior. When governments offer substantial incentives (like tax breaks or rebates), more people choose electric vehicles over traditional cars, demonstrating how incentives shape purchasing decisions.</p>"},{"location":"economics/microeconomics/#interaction-principles","title":"Interaction Principles","text":""},{"location":"economics/microeconomics/#5-trade-can-make-everyone-better-off","title":"5. Trade Can Make Everyone Better Off","text":"<p>Voluntary exchange creates value for all parties involved.</p> <p>** Example:** The sharing economy (Airbnb, Uber) exemplifies mutually beneficial trade. Homeowners earn extra income from unused space, while travelers get unique accommodations at competitive prices. Both parties gain from the transaction.</p>"},{"location":"economics/microeconomics/#6-markets-are-usually-a-good-way-to-organize-economic-activity","title":"6. Markets Are Usually a Good Way to Organize Economic Activity","text":"<p>Markets efficiently coordinate buyers and sellers through prices.</p> <p>** Example:** App marketplaces like the App Store or Google Play demonstrate efficient market organization. Developers can reach millions of users, while consumers can easily find and compare apps, with prices and ratings helping coordinate supply and demand.</p>"},{"location":"economics/microeconomics/#7-governments-can-sometimes-improve-market-outcomes","title":"7. Governments Can Sometimes Improve Market Outcomes","text":"<p>When markets fail (externalities, public goods), government intervention may help.</p> <p>** Example:** Carbon pricing and emissions trading schemes show how government intervention can address market failures like pollution. These programs create incentives for companies to reduce emissions while allowing flexibility in how they achieve reductions.</p>"},{"location":"economics/microeconomics/#economy-wide-principles","title":"Economy-Wide Principles","text":""},{"location":"economics/microeconomics/#8-a-countrys-standard-of-living-depends-on-its-production","title":"8. A Country's Standard of Living Depends on Its Production","text":"<p>Productivity determines living standards over the long run.</p> <p>** Example:** The rise of remote work technology and digital productivity tools has enabled increased output per worker, contributing to higher living standards in knowledge-based economies.</p>"},{"location":"economics/microeconomics/#9-prices-rise-when-the-government-prints-too-much-money-inflation","title":"9. Prices Rise When the Government Prints Too Much Money (Inflation)","text":"<p>Money supply growth beyond economic growth leads to inflation.</p> <p>Example: The recent global inflation experience following pandemic-era stimulus demonstrates how increased money supply, combined with supply chain disruptions, can lead to higher prices across the economy.</p>"},{"location":"economics/microeconomics/#10-society-faces-a-short-run-tradeoff-between-inflation-and-unemployment","title":"10. Society Faces a Short-Run Tradeoff Between Inflation and Unemployment","text":"<p>Policies aimed at reducing inflation often increase unemployment temporarily, and vice versa.</p> <p>** Example:** Central banks' recent interest rate hikes to combat inflation have led to slower job growth and hiring freezes in many sectors, illustrating this tradeoff in action.</p>"},{"location":"economics/microeconomics/#additional-market-dynamics","title":"Additional Market Dynamics","text":""},{"location":"economics/microeconomics/#supply-and-demand-relationships","title":"Supply and Demand Relationships","text":"<ul> <li>Price sensitivity varies by product type</li> <li>Technology shifts supply curves</li> <li>Market equilibrium is dynamic</li> </ul> <p>Example: The semiconductor shortage during the pandemic demonstrated how supply chain disruptions affect prices and market equilibrium. As chip supply decreased while demand remained high, prices rose significantly, affecting industries from automobiles to consumer electronics.</p>"},{"location":"economics/microeconomics/#consumer-behavior","title":"Consumer Behavior","text":"<ul> <li>Income effects vary by good type</li> <li>Demand elasticity differs across products</li> <li>Market information influences decisions</li> </ul> <p>** Example:** The rise of subscription-based services shows how companies adapt pricing strategies to consumer behavior. Companies offer tiered pricing (basic, premium, enterprise) to capture different consumer segments based on their willingness to pay and usage patterns.</p>"},{"location":"economics/finance/personal-finance/","title":"Personal finance","text":"<ul> <li>https://www.reddit.com/r/personalfinance/</li> <li>https://www.italiapersonalfinance.it/</li> <li>https://bigpayme.com/blog/the-four-pillars-of-personal-finance-and-how-it-affects-you/</li> </ul>"},{"location":"economics/finance/simulazioni/","title":"Simulazioni","text":"<p>\\(FV = 1.000 \\times \\left(\\frac{(1 + 0.004167)^{240} - 1}{0.004167}\\right) \\approx 411.000\\)</p> <p>Calcolo del valore netto: \\(\\text{Valore netto} = \\text{Pensione lorda} \\times (1 - \\text{Tassazione})\\) </p>"},{"location":"entrepreneurship/Domande%20per%20acquisto%20casa/","title":"Domande per acquisto casa","text":"<p>Essendo l'ultimo piano, ci sono problemi di infiltrazioni, umidit\u00e0 o altro?</p> <p>Gli impianti elettrici e tubature sono da rifare? Vedere quadro elettrico</p> <p>E' richiesta una somma prima del rogito? Altre spese (debiti condominiali, percentuale dell'agenzia)? Vedere bollette</p>"},{"location":"entrepreneurship/make-a-startup/","title":"Principi base per creare una nuova startup","text":""},{"location":"entrepreneurship/make-a-startup/#fonti","title":"Fonti:","text":"<ul> <li>MAKE bootstrapper </li> <li>Ship it! </li> <li>The product book </li> <li>? Da cosa nasce cosa - Munari </li> <li>14 Best Startup Books to Read in 2022 </li> <li>Mobile App or Website: Which is Better For Your Startup? </li> <li></li> </ul> <p>GENERAL \u201cA year from now, you will wish you had started today.\u201d</p> <p>\u2014 Karen Lamb</p> <p>Tiny Thought The biggest generator of long-term results is learning to do things when you don't feel like doing them.</p> <p>If you let excuses or emotion drive behavior, you're cheating your future self.</p> <p>Put aside the excuses and start doing what you need to do.</p>"},{"location":"entrepreneurship/make-a-startup/#make","title":"MAKE","text":"<p>The worst is to be with people that just confirm what you already think. The best is to test your ideas as quickly as possible.</p>"},{"location":"entrepreneurship/make-a-startup/#risolviti-i-problemi-da-solo","title":"Risolviti i problemi da solo","text":"<p>e chiedi agli altri se \u00e8 anche un loro problema. Fai sondaggi aperti su internet, lascia che altri aggiungano domande o risposte al problema</p> <p>Tratta problemi che conosci Lascia perdere le cose per sentito dire, a meno che non sei dentro una community che parla a fondo del problema Una volta sviluppata la soluzione rimani a contatto con il problema o delega a qualcuno pi\u00f9 esperto di te (altro gender, altra classe sociale, altra razza).</p> <p>Get ideas from your life experience. Get outside. Become original. Do crazy stuff that you're scared off.</p> <p>Your enemy is perfection. getting stuff out the door is the number one priority.</p> <p>Sustainable way to build a startup:</p> <ol> <li>Build something yourself  </li> <li>See if it works  </li> <li>No, build something else  </li> <li>See if it works  </li> <li>No, build another thing  </li> <li>See if it works  </li> <li>It works!  </li> <li>Let's see if I can monetize it  </li> <li>I can hire some people now with the money I'm making with it  </li> <li>Now I have a team of a few people  </li> <li>If we want, we can rent an office, or just save money and stay remote  </li> <li>The business model seems to be proven because every time I spend $1 more, I get $1.50 in revenue,  </li> <li>thus it's scalable.  </li> <li>This means, if I get more money, I can spend more and get more profit theoretically</li> </ol>"},{"location":"entrepreneurship/make-a-startup/#ship","title":"SHIP","text":""},{"location":"entrepreneurship/make-a-startup/#product-market-fit-pyramid","title":"Product-market fit pyramid","text":"<p> The target customer is at the bottom because it is the most important element. If you mistake the customer that you\u2019re going after, the entire pyramid can collapse and you might have to start all over again. You only want to target customers with underserved needs - otherwise, they will have no use for your product.</p>"},{"location":"entrepreneurship/make-a-startup/#design","title":"DESIGN","text":"<p>BUSINESS MODELS</p> <p>Customer groups represent separate segments if: \u2022 Their needs require and justify a distinct offer \u2022 They are reached through di\u2126erent Distribution Channels \u2022 They require di\u2126erent types of relationships \u2022 They have substantially di\u2126erent profitabilities \u2022 They are willing to pay for di\u2126erent aspects of the o\u2126e</p>"},{"location":"entrepreneurship/make-a-startup/#earn","title":"EARN","text":""},{"location":"entrepreneurship/make-a-startup/#principi-psicologici","title":"Principi psicologici","text":"<p>First-principles thinking is one of the best ways to reverse-engineer complicated problems and unleash creative possibilities. Sometimes called \u201creasoning from first principles,\u201d the idea is to break down complicated problems into basic elements and then reassemble them from the ground up. </p> <p>Socratic questioning generally follows this process:</p> <ul> <li>Clarifying your thinking and explaining the origins of your ideas (Why do I think this? What exactly do I think?)  </li> <li>Challenging assumptions (How do I know this is true? What if I thought the opposite?)  </li> <li>Looking for evidence (How can I back this up? What are the sources?)  </li> <li>Considering alternative perspectives (What might others think? How do I know I am correct?)  </li> <li>Examining consequences and implications (What if I am wrong? What are the consequences if I am?)  </li> <li>Questioning the original questions (Why did I think that? Was I correct? What conclusions can I draw from the reasoning process?)</li> </ul> <p>https://fs.blog/first-principles/</p> <p>Search for falsification of your theory, not for confirmation.  https://fs.blog/karl-popper-on-science-pseudoscience/ 1. It is easy to obtain confirmations, or verifications, for nearly every theory \u2013if we look for confirmations.</p> <p>2. Confirmations should count only if they are the result of risky predictions; that is to say, if, unenlightened by the theory in question, we should have expected an event which was incompatible with the theory\u2013an event which would have refuted the theory.</p> <p>3. Every \u2018good\u2019 scientific theory is a prohibition: it forbids certain things to happen. The more a theory forbids, the better it is.</p> <p>4. A theory which is not refutable by any conceivable event is nonscientific. Irrefutability is not a virtue of a theory (as people often think) but a vice.</p> <p>5. Every genuine test of a theory is an attempt to falsify it, or to refute it. Testability is falsifiability; but there are degrees of testability: some theories are more testable, more exposed to refutation, than others; they take, as it were, greater risks.</p> <p>6. Confirming evidence should not count except when it is the result of a genuine test of the theory; and this means that it can be presented as a serious but unsuccessful attempt to falsify the theory. (I now speak in such cases of \u2018corroborating evidence\u2019.)</p> <p>7. Some genuinely testable theories, when found to be false, are still upheld by their admirers\u2013for example by introducing ad hoc some auxiliary assumption, or by re-interpreting the theory ad hoc in such a way that it escapes refutation. </p> <ul> <li>The Map is Not the Territory </li> <li>Circle of Competence </li> <li>Inversion </li> <li>Occam\u2019s Razor</li> </ul>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/","title":"The almanack of naval ravikant","text":"<p>Related sources: - The almanack of Naval Ravikant - Algorithms to Live By: The Computer Science of Human Decisions - Joe Rogan Podcast - Naval Ravikant - How to get rich </p>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/#building-wealth","title":"Building Wealth","text":"<p>Hard work matters but it has to be directed in the right direction: know what to do, how to do it and with who.</p> <p>Wealth is assets that earn while you sleep.</p> <p>Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media).</p> <p>Code is the most powerful permissionless leverage.</p> <p>Set and enforce an aspirational personal hourly rate.</p> <p>Figure out which things you can provide for society that it does not yet know how to get.</p> <p>Escape competition by authenticity.</p> <p>You can only achieve mastery in one or two things. something you're obsessed about and that you can iterate over everyday.</p> <p>Find the 1% of your discipline that won't be wasted, where you can invest trough all your life, go all-in and leave out the rest.</p> <p>If you don't own equities in a business, you're chances of making good money is very slim.</p> <p>Don't look at jobs where input and output are highly connected. That won't create wealth.</p> <p>Search for, or create, positive sum wealth games. - YT FEE - wealth isn't zero sum game - investopedia game theory </p> <p>Do it for the sake of it, not for money. Id you love money and you make it, that's never enough.</p> <p>Networking at all costs is bullshit. Do your craft, practice your craft and the Right people will come to you.</p> <p>Keep doing it. don't keep track. don't count. have a lot of patience.</p>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/#building-judgement","title":"Building judgement","text":"<p>https://navalsarchive.substack.com/p/cynicism-is-easy-mimicry-is-easy</p> <p>wisdom is knowing the long-term consequences of your actions. Wisdom applied to external problems is judgment</p> <p>the moment of suffering\u2014when you\u2019re in pain\u2014is a moment of truth. It is a moment where you\u2019re forced to embrace reality the way it actually is</p> <p>To be honest speak wothout identity. Do not self-identify in anything. </p> <p>Almost all biases are time-saving heuristics. For important decisions, discard memory and identity, and focus on the problem.</p> <p>Avoid being dishonest. Once you get used to it you'll start believing your own lies. Your idea of reality will be more and more distant from the truth.</p> <p>Praise specifically, criticize generically.</p> <p>the more you know the less you diversify. </p> <p>Being successful means being more able to avoid mistakes than being always correct.  learn the basics very well and practice them everyday looking for a feedback. </p> <p>Requisites: - microeconomics    - principal-agent problem    - compound interest  - game theory - critical-thinking - complex systems  - Statistics  </p> <p>if you can't decide, if you're making a list of pro vs cons, the answer is no.</p> <p>when you can choose between two similar paths, choose the one more painful in the short term. Look for compound interests gain in the long term.</p> <pre><code>flowchart\n    n1[\"\ud83d\ude01 Happiness\"]\n    n1 -- Continuous learning&lt;br&gt;Exercising&lt;br&gt;Diet --- n4[\"\ud83e\uddd8\u200d\u2642\ufe0f Health \"]\n    n4 -- Authenticity &lt;br&gt;Permissionless leverage&lt;br&gt;Mastery --- n2[\"\ud83d\udcb0 Wealth\"]\n    n2 -.- n3@{ shape: \"diam\", label: \"do you&lt;br&gt;love money?\" }\n    n3 -. no .-n5@{ shape: \"diam\", label: \"do you&lt;br&gt;measure everything?\" }\n    n5 -. no .-n1\n    style n1 stroke-width:2px\n    style n2 stroke-width:1px,stroke\n</code></pre>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/#happiness","title":"Happiness","text":"<p>Happiness is not about positive or negative thoughts. It is about the absence of desire.</p> <p>Reality is neutral. Reality has no judgements.</p> <p>Memory and identity are burdens of the past preventing us from living freely the present.</p> <p>Enlightenment is the space between your thoughts.</p> <p>You locally reverse entropy. That's why you're here.</p> <p>Desire is a contract that makes you unhappy until you get what you want. -&gt; and then it will move on the next thing.</p> <p>You have to lives. The second one begins when you understand you only have one. Confucius.</p> <p>Peaceful successful people have such self-control and self-awareness to not need anything from anyone.</p> <p>In front of a new challenge or delusion you always have three choices: 1. You accept it 2. You try to change it 3. or you can leave it Accept and move fast forward. Life is short.</p> <p>Listen and absorb. Don't emulate.</p> <p>We evolved in scarcity but live in abundance. This is why is so important to always say no.</p> <p>Workout everyday. Whatever it works for you.</p> <p>In every moment you should be taking a new good habit or removing a bad one.</p> <p>All benefits come from compound interests: relationships, money, health and habits.</p> <p>Inspiration is perishable, act immediately.</p>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/#meditation","title":"Meditation","text":"<p>Too much sugar lead to a heavy body. Too many distractions lead to a heavy mind.</p> <p>The more you judge, the more you separate yourself from reality.</p> <p>Remove 95% of the noise from your brain, is useless in general or is useless in that moment.</p> <p>Turn off society and listen to yourself.</p> <p>If you're not spending time doing what you want, learning or earning, you're throwing your life.</p> <p>The mind should be a servant and a tool, not the master.</p>"},{"location":"entrepreneurship/the-almanack-of-naval-ravikant/#personal-comments","title":"Personal comments","text":"<p>Anger is a precursor to violence.     what about grit and stress discharge? Anger can have important effect too.</p>"},{"location":"music/Music/","title":"My Soundcloud","text":"<p>soundcloud.com/alessandro-affinito</p>"},{"location":"music/Music/#spotify","title":"Spotify","text":""},{"location":"music/Music/#my-spotify-playlists","title":"My Spotify playlists","text":"<ul> <li>Disco Matrimonio</li> <li>Instrumental post-rock trip</li> <li>Best of Stoner</li> </ul>"},{"location":"music/Music/#preferred-spotify-playlists","title":"Preferred Spotify playlists","text":"<ul> <li>Drum &amp; Bass</li> <li>Groove Metal</li> </ul>"},{"location":"music/Music/#for-studying","title":"For Studying","text":"<ul> <li>Lo-fi coding</li> </ul>"},{"location":"philosophy/quotes-and-life-guidelines/","title":"Quotes and life guidelines","text":""},{"location":"philosophy/quotes-and-life-guidelines/#productivity","title":"Productivity","text":"<p>Getting To The Top 1% Of Amazon Engineers - Productivity Tips From A Life Engineered</p> <ul> <li>The key to productivity is doing more of what matters and less of what doesn't.   Being busy and being productive are not the same thing. Running around in circles is busy. Going toward your destination is productive. It's easy to be busy. It's hard to be productive.  Farnam Street</li> </ul> <p>Stop trying to be spectacular. Start being consistent. Your reputation isn't built on your best day. It's built on your worst FS</p> <p>Start small and learn fast.  Your first move doesn't need to be perfect; it just needs to teach you something. Focus more on the next small step that moves you closer to the goal. Motion creates momentum, and momentum reveals opportunities that standing still never could.</p> <p>Play stupid games, win stupid prizes. Wealth creation is an evolutionarily recent positive-sum game. Status is an old zero-sum gam. N.Ravikant</p>"},{"location":"philosophy/quotes-and-life-guidelines/#every-day-work","title":"Every day work","text":"<ul> <li>double check your morning focus TODO list: most impactful task first  </li> <li>meetings only in the afternoon  </li> <li>Block the first three hours of the day for the most important task, no interruptions  </li> <li>Cellphone upside down, no sound, check notifications only after lunch</li> </ul>"},{"location":"philosophy/quotes-and-life-guidelines/#happiness","title":"Happiness","text":"<ul> <li>Stop overthinking:  </li> <li>if you tried and you failed.. nice try!  </li> <li>if you\u2019re trying to sleep.. everything else is useless, just deep breathing and sleep.  </li> <li>if someone else did something bad to you, you can\u2019t control it. Let it go.  </li> <li> <p>Don\u2019t skip gym. Your brain also needs that.</p> </li> <li> <p>\u201cYou are better equipped to deal with stress when you are moving. When you feel tense or frustrated or worried, it is difficult to think your way into feeling better. The more you think about the situation, the larger it becomes in your mind. Trying to think your way out of it often leads to a spiral of overthinking and rumination. https://jamesclear.com/3-2-1/december-19-2024</p> </li> </ul> <p>Enlightenment (peace) is the space between thoughts. Eckart Tolle</p>"},{"location":"philosophy/quotes-and-life-guidelines/#routine","title":"Routine","text":"<p>eg: work from home</p> <p>22:00 alarm to stop everything and go to sleep     only reading from paper or an eBook something you like</p> <p>6:30 alarm with low volume and no vibration.      Repeat each 10 mins to no to wake up tired</p> <p>7:30 breakfast and clean something </p> <p>\u2192 no phone, no emails, no socials</p> <p>8:00 - 9:30 focused work </p> <p>9:30 - 10:00 daily meeting</p> <p>10:30 - 12:00 focused work</p> <p>12:30 - 13:00 work out </p> <p>13:00 - 14:00 lunch</p> <p>14:00 - 18:00 meetings, emails, documentation, tests\u2026</p>"},{"location":"philosophy/quotes-and-life-guidelines/#conversations","title":"Conversations","text":"<ul> <li>Dare to disagree </li> <li>\"Any fool can criticize, complain, and condemn \u2014 and most fools do. But it takes character and self-control to be understanding and forgiving.\" - Dale Carnegie  </li> </ul>"},{"location":"philosophy/rational-buddhism/","title":"Rational buddhism","text":"<p>Rational Buddhism is a modern interpretation of traditional Buddhist teachings, emphasizing logical reasoning and practical application in daily life. It seeks to strip away mystical and supernatural elements, focusing instead on the core principles that can be universally applied.</p>"},{"location":"philosophy/rational-buddhism/#main-principles-of-rational-buddhism","title":"Main Principles of Rational Buddhism","text":"<ol> <li> <p>The Four Noble Truths:</p> <ul> <li>Dukkha: Life involves suffering and dissatisfaction.</li> <li>Samudaya: The cause of suffering is desire and attachment.</li> <li>Nirodha: Suffering can be overcome by eliminating desire.</li> <li>Magga: The path to the cessation of suffering is the Eightfold Path.</li> <li> <p>The Eightfold Path:</p> </li> <li> <p>Right Understanding: Comprehending the nature of reality and the path of transformation.</p> </li> <li>Right Intent: Commitment to ethical and mental self-improvement.</li> <li>Right Speech: Speaking truthfully and kindly.</li> <li>Right Action: Acting in ways that do not cause harm.</li> <li>Right Livelihood: Earning a living in a way that is ethical and does not harm others.</li> <li>Right Effort: Cultivating positive states of mind.</li> <li>Right Mindfulness: Developing awareness of the body, feelings, mind, and phenomena.</li> <li>Right Concentration: Developing deep states of mental focus.</li> <li>Impermanence (Anicca): Understanding that all things are transient and change over time.</li> </ul> </li> <li> <p>Non-Self (Anatta): Recognizing that there is no unchanging, permanent self.</p> </li> <li> <p>Dependent Origination (Prat\u012btyasamutp\u0101da): Everything arises in dependence upon multiple causes and conditions.</p> </li> </ol>"},{"location":"philosophy/rational-buddhism/#applying-rational-buddhism-in-contemporary-life","title":"Applying Rational Buddhism in Contemporary Life","text":"<ol> <li> <p>Mindfulness and Meditation:</p> <ul> <li>Practice mindfulness to stay present and aware in daily activities.</li> <li>Meditate regularly to develop concentration and insight.</li> <li> <p>Ethical Living:</p> </li> <li> <p>Follow the principles of the Eightfold Path in your personal and professional life.</p> </li> <li>Make ethical choices that align with compassion and non-harm.</li> <li> <p>Managing Desires:</p> </li> <li> <p>Recognize and understand your desires and attachments.</p> </li> <li>Practice moderation and contentment to reduce unnecessary desires.</li> <li> <p>Balancing Peace and Wealth:</p> </li> <li> <p>Mindful Wealth Pursuit: Approach wealth creation with mindfulness and ethical considerations. Ensure that your pursuit of wealth does not harm others or lead to unethical behavior.</p> </li> <li>Contentment: Cultivate a sense of contentment with what you have, reducing the constant craving for more.</li> <li>Purposeful Living: Align your financial goals with your values and purpose. Use your resources to support meaningful and compassionate endeavors.</li> <li> <p>Continuous Learning and Adaptation:</p> </li> <li> <p>Stay open to learning and adapting Buddhist principles to fit your unique life circumstances.</p> </li> <li>Engage with communities or groups that practice Rational Buddhism to share experiences and insights.</li> </ul> </li> </ol> <p>By integrating these principles into your life, you can achieve a state of peace and contentment while still pursuing personal and professional goals. Rational Buddhism offers a practical framework for living ethically and mindfully in the modern world.</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#how-to-study","title":"How to Study:","text":"<p>The Feynman Learning Technique</p> <p>Step 1: Pretend to teach it to a child</p> <p>Take out a blank sheet of paper. At the top, write the subject you want to master. Now write out everything you know about the subject as if you were teaching it to a child or a rubber duck sitting on your desk.</p> <p>Writing helps you think because it gives you nowhere to hide.</p> <p>Step 2: Identify gaps in your explanation</p> <p>Identifying gaps in your knowledge\u2014where you forget something important, aren\u2019t able to explain it, or simply have trouble thinking of how variables interact\u2014is a critical part of the learning process.</p> <p>Step 3. Organize and simplify</p> <p>Now you have a set of hand-crafted notes containing a simple explanation. Organize them into a narrative that you can tell from beginning to end. Read it out loud. If the explanation sounds confusing at any point, go back to Step 2. Keep iterating.</p> <p>Step 4: Transmit (optional) Reddit, Twitter, personal blog, friend\u2026</p> <p>\u2014 1. Start with a clear vision and set achievable goals. What do you want to achieve in the next year? Once you know your big goal, break it down into smaller, more manageable goals. This will make it easier to stay on track and motivated.</p> <p>2. Make a schedule. Block out time in your calendar each day to work on your goals. This will help you stay organized and avoid procrastination.</p> <p>3. Find an accountability partner or a supportive community. Having someone to check in with and support you on your journey can make a big difference. Join a community of people who are also working towards their goals, or find a mentor who can guide you along the way.</p> <p>4. Zoom out. Consistency is about the long-term. Don't get discouraged if you have a bad day or week. Just keep going and focus on making progress over time.</p> <p>5. Remember, Rome wasn't built in a day. It takes time and effort to create lasting change. Don't expect to achieve your goals overnight. Just keep taking those small, consistent steps, and you'll eventually reach your destination.</p> <p>Here are some additional tips:</p> <p>- Make it easy to start. The less friction there is to getting started, the more likely you are to stick with it. Set up your environment so that you can start working on your goals as soon as possible.</p> <p>- Focus on one thing at a time. It's better to do one thing well than to do ten things poorly. Choose one goal to focus on for the next 30-90 days, and give it your all.</p> <p>- Track your progress. Keeping track of your progress can help you stay motivated and on track. Use a habit tracker or a journal to log your daily progress.</p> <p>- Celebrate your wins. No matter how small your wins may seem, take the time to celebrate them. This will help you stay positive and motivated. </p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#distributed-systems","title":"DISTRIBUTED SYSTEMS","text":"<ul> <li>Global state collection </li> <li>Distributed deadlock detection </li> <li>Mutual Exclusion </li> <li>distributed SNAPSHOT- consistent cut </li> <li>Ordered multicast </li> <li>GRAPH algorithms</li> </ul> <p>Understanding Distributed Systems</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#microservices","title":"MICROSERVICES","text":"<p>https://martinfowler.com/bliki/MicroservicePremium.html The microservices approach is all about handling a complex system, but in order to do so the approach introduces its own set of complexities. When you use microservices you have to work on automated deployment, monitoring, dealing with failure, eventual consistency, and other factors that a distributed system introduces.</p> <p>So my primary guideline would be don't even consider microservices unless you have a system that's too complex to manage as a monolith. The majority of software systems should be built as a single monolithic application. Do pay attention to good modularity within that monolith, but don't try to separate it into separate services.</p> <p>https://paulhammant.com/2011/11/29/cookie-cutter-scaling/</p> <p>Domain Driven Design</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_1","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#devops","title":"DEVOPS","text":"<p>https://docs.google.com/document/d/132QAiAPUa0QFtbg9uE7AufM0FcrqH6azR5ztHy3GEKo/edit?usp=sharing</p> <p>The devops handbook the phoenix project Learning path modern devops Devops: software architect\u2019s perspective</p> <ol> <li>Principles of flow:   </li> <li>Make work visible. Kanban boards.  </li> <li>Limit work in process.        better action would be to find out what is causing the delay and help fix that problem  </li> <li>Reduce batch size.  Lean Thinking: Banish Waste and Create Wealth in Your Corporation </li> <li>strive to reduce the number of handoffs  </li> <li>continually identify our system\u2019s constraints and improve its work capacity.  <ol> <li>create environments on demand  </li> <li>automate our deployments </li> <li>automate our tests </li> <li>loosely-coupled architecture so that changes can be made safely and with more autonomy </li> </ol> </li> <li>ELIMINATE HARDSHIPS AND WASTE IN THE VALUE STREAM</li> </ol> <p>Phoenix project Cap 7 Theory of constraints: qualsiasi miglioramento tra i bottleneck \u00e8 inutile, dopo non accelera il flusso produttivo, generando starving, prima aumenta la coda per la bottleneck. Il throughput della bottleneck determina la schedulazione del lavoro.</p> <p>Three ways of devops:</p> <ol> <li>Accelera flusso tra development e operations  </li> <li>Amplifica e velocizza cicli di feedback  </li> <li>Cultura sperimentale e del fallimento</li> </ol>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_2","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#integration","title":"INTEGRATION","text":"<p>Enterprise Integration Patterns Distributed Systems</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#blockchain-and-cryptocurrencies","title":"BLOCKCHAIN AND CRYPTOCURRENCIES","text":"<p>Mastering bitcoin 2 Mastering blockchain</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_3","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#design-patterns","title":"DESIGN PATTERNS","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_4","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#object-oriented","title":"OBJECT ORIENTED","text":"<p>http://www.cs.rmit.edu.au/online/blackboard/chapter/05/documents/contribute/chapter/02/design-fundamentals.html</p> <p>Cohesion .</p> <p>Coupling The measure of dependence of a class on others is known as coupling. The general aim of object programming is to have objects as independent as practically possible. Bad: classes depending on global vars Good: coupling through interfaces</p> <p>Encapsulation Encapsulation is one of the most basic foundations of good object-oriented design. It is the process of developing an object that is fully self-contained - all the information needed to represent the object is a property of that object. Not only is the information encapsulated in the object, but it is also hidden from outside view - any external objects that wish to communicate with the object must use the object's programming interface. Information hiding relates to controlling the accessibility of an object's properties. A well-defined object will have its items available to other objects only on a \"need to know basis\". Generally speaking, any item that is intended for public use is declared as such, and any internal items are protected from outside access.</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#data-structures","title":"DATA STRUCTURES","text":"<p>\u2192 Big-O Cheat Sheet </p> <p>HASHMAP / map / hash table     HASH-SET(K) implements the Set interface, backed by a hash table (actually a HashMap instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.  </p> <p>HASH-MAP(K,V) compute a hash of a value to generate a KEY to populate a dictionary where we will access throuh it in a constant time the hash functions are not perfect so it is always possible to have collisions in the value domain to reduce this probability we can increase the dimension</p> <p>more efficient than search trees or any other table lookup structure. For this reason, they are widely used in many kinds of computer software, particularly for associative arrays, database indexing, caches, and sets. </p> <pre><code>the function should provide a uniform distribution of hash values. A non-uniform distribution increases the number of collisions and the cost of resolving them  \n              avg worse  \nsearch        O1   On  \ninsert/delete O1   On\n</code></pre> <p>Array VS ARRAY List VS Linked List https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist-in-java?rq=1 The principal benefit of a linked list over a conventional array is that the list elements can be easily inserted or removed without reallocation or reorganization of the entire structure because the data items need not be stored contiguously in memory or on disk, while restructuring an array at run-time is a much more expensive operation.  Linked lists allow insertion and removal of nodes at any point in the list, and allow doing so with a constant number of operations by keeping the link previous to the link being added or removed in memory during list traversal. </p> <p>ArrayList with ArrayDeque are preferable in much more use-cases than LinkedList. If you're not sure \u2014 just start with ArrayList.</p> <p>LinkedList and ArrayList are two different implementations of the List interface. LinkedList implements it with a doubly-linked list. ArrayList implements it with a dynamically re-sizing array.</p> <p>As with standard linked list and array operations, the various methods will have different algorithmic runtimes.</p> <p>For LinkedList\\&lt;E&gt;     get(int index) is O(n) (with n/4 steps on average)     add(E element) is O(1)     add(int index, E element) is O(n) (with n/4 steps on average), but O(1) when index = 0 \u2190 Main benefit of LinkedList\\&lt;E&gt;     remove(int index) is O(n) (with n/4 steps on average)     Iterator.remove() is O(1). \\&lt;--- main benefit of LinkedList\\&lt;E&gt;     ListIterator.add(E element) is O(1) This is one of the main benefits of LinkedList\\&lt;E&gt;</p> <p>Note: Many of the operations need n/4 steps on average, constant number of steps in the best case (e.g. index = 0), and n/2 steps in worst case (middle of list)</p> <p>For ArrayList\\&lt;E&gt; get(int index) is O(1) \\&lt;--- main benefit of ArrayList\\&lt;E&gt;     add(E element) is O(1) amortized, but O(n) worst-case since the array must be resized and copied     add(int index, E element) is O(n) (with n/2 steps on average)     remove(int index) is O(n) (with n/2 steps on average)     Iterator.remove() is O(n) (with n/2 steps on average)     ListIterator.add(E element) is O(n) (with n/2 steps on average)</p> <p>E-R model       an abstract data model, that defines a data or information structure which can be implemented in a database, typically a relational database. A relationship captures how entities are related to one another. Relationships can be thought of as verbs</p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#queue-fifo","title":"QUEUE  - FIFO","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#stack-lifo","title":"STACK  - LIFO","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_5","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#sorting","title":"SORTING","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#quicksort","title":"QUICKSORT","text":"<pre><code> on average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2)   \n divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays.\n\nThe steps are:  \nPick an element, called a pivot, from the array.  \nPartitioning: reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation.  \nRecursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.\n\nthe leftmost element of the partition would often be chosen as the pivot element. Unfortunately, this causes worst-case behavior on already sorted arrays, which is a rather common use-case. The problem was easily solved by choosing either a random index for the pivot\n</code></pre>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#networking","title":"NETWORKING","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#ssh","title":"SSH","text":"<p>private key authentication works  cryptographically secured connection between two parties, authenticating each side to the other, and passing commands and output back and forth.</p> <pre><code>Symmetrical encryption is a type of encryption where one key can be used to encrypt messages to the opposite party, and also to decrypt the messages received from the other participant. This means that anyone who holds the key can encrypt and decrypt messages to anyone else holding the key. (AES)\n\nAsymmetrical encryption is different from symmetrical encryption in that to send data in a single direction, two associated keys are needed. One of these keys is known as the private key, while the other is called the public key.\n\nThe public key can be freely shared with any party. It is associated with its paired key, but the private key cannot be derived from the public key. The mathematical relationship between the public key and the private key allows the public key to encrypt messages that can only be decrypted by the private key. This is a one-way ability, meaning that the public key has no ability to decrypt the messages it writes, nor can it decrypt anything the private key may send it.\n\nThe private key should be kept entirely secret and should never be shared with another party. This is a key requirement for the public key paradigm to work. The private key is the only component capable of decrypting messages that were encrypted using the associated public key. By virtue of this fact, any entity capable decrypting these messages has demonstrated that they are in control of the private key.\n</code></pre>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_6","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_7","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#java","title":"JAVA","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#web-services","title":"WEB SERVICES","text":"<p>http://cabibbo.inf.uniroma3.it/asw-2014-2015/pdf/asw860-servizi-middleware.pdf Un servizio nello stile REST  operazioni riferite a una collection URI   GET \u2013 restituisce tutti gli elementi della collezione   PUT \u2013 sostituisce la collezione con un\u2019altra collezione   POST \u2013 crea un nuovo elemento della collezione e gli assegna una nuova URI   DELETE \u2013 cancella l\u2019intera collezione   operazioni riferite a un\u2019element URI   GET \u2013 restituisce uno specifico elemento della collezione   PUT \u2013 crea un nuovo elemento della collezione, oppure lo aggiorna   POST \u2013 considera l\u2019elemento della collezione come un\u2019altra collezione, e ne aggiunge un elemento   DELETE \u2013 cancella l\u2019elemento della collezione </p>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#_8","title":"Theoretical concepts to keep in mind","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#cloud","title":"CLOUD","text":"<p>https://12factor.net</p> <ol> <li>Codebase: unique if it\u2019s not a distributed system  </li> <li>Dependencies: isolated locally, explicitly declared in a manifest. Don\u2019t use global wide dep.  </li> <li>Config: should be per environment. Out of the code, better in Env Var, read at runtime  </li> <li>Backing services acceded as internal resources  </li> <li>Build separated by runs </li> <li>Processes: stateless and shared-nothing architecture (none of the nodes share disk or memory \u2192 no single point of contention \u2192 allows self healing).    Storing is allowed only in backing services.  </li> <li>Port Binding: the app expose the service through a port and does not rely on runtime webserver injection  </li> <li>Concurrency: processes should follow the Unix daemon model, they should be of different types to have different workloads associated  </li> <li>Disposability: fast startup and graceful shutdown in any moment. After a SIGTERM a job should return to the original poll. (reentrancy)  </li> <li>Dev-Prod parity: continuous deployment. Env. should be as similar as possible. Backing services should be the same.  </li> <li>LOGS: should be written in the standard output. The environment should then collect them in one or more files.  </li> <li>Admin: Twelve-factor strongly favors languages which provide a REPL shell out of the box, and which make it easy to run one-off scripts. In a local deploy, developers invoke one-off admin processes by a direct shell command inside the app\u2019s checkout directory.</li> </ol>"},{"location":"science/Theoretical-concepts-to-keep-in-mind/#multi-threading-and-concurrency","title":"MULTI THREADING AND CONCURRENCY","text":""},{"location":"science/Theoretical-concepts-to-keep-in-mind/#-master-go-programming-with-these-concurrency-patterns-in-40-minutes","title":"- Master Go Programming With These Concurrency Patterns (in 40 minutes)","text":""},{"location":"science/critical-thinking/","title":"Critical thinking","text":"<p>Template extended from Mr RIP Doc</p> <p>Critical Thinking - YouTube</p>"},{"location":"science/critical-thinking/#what","title":"What","text":"<ul> <li>Wikipedia: \u00a0 \u00a0 - \u201cCritical thinking is the analysis of facts to form a judgment\u201d \u00a0</li> </ul> <p>- The subject is complex, and several different definitions exist, which generally include the rational, sceptical, unbiased analysis, or evaluation of factual evidence. \u00a0</p> <p>- Critical thinking is self-directed, self-disciplined, self-monitored, and self-corrective thinking. \u00a0 \u00a0 - It presupposes assent to rigorous standards of excellence and mindful command of their use. \u00a0</p> <p>- It entails effective communication and problem-solving abilities as well as a commitment to overcome native egocentrism and sociocentrism. \u00a0</p> <ul> <li>The Foundation of Critical Thinking (short definition by Linda Elder, September, 2007) \u00a0</li> </ul> <p>- Critical thinking is self-guided, self-disciplined thinking which attempts to reason at the highest level of quality in a fair-minded way. \u00a0</p> <p>- People who think critically consistently attempt to live rationally, reasonably, empathically. \u00a0</p> <p>- They are keenly aware of the inherently flawed nature of human thinking when left unchecked. \u00a0</p> <p>- They strive to diminish the power of their egocentric and sociocentric tendencies. \u00a0 \u00a0</p> <p>- They use the intellectual tools that critical thinking offers \u2013 concepts and principles that enable them to analyze, assess, and improve thinking. \u00a0</p> <p>- They work diligently to develop the intellectual virtues of intellectual integrity, intellectual humility, intellectual civility, intellectual empathy, intellectual sense of justice and confidence in reason. \u00a0</p> <p>- They realize that no matter how skilled they are as thinkers, they can always improve their reasoning abilities and they will at times fall prey to mistakes in reasoning, human irrationality, prejudices, biases, distortions, uncritically accepted social rules and taboos, self-interest, and vested interest. \u00a0</p> <p>- They strive to improve the world in whatever ways they can and contribute to a more rational, civilized society. At the same time, they recognize the complexities often inherent in doing so. \u00a0</p> <p>- They avoid thinking simplistically about complicated issues and strive to appropriately consider the rights and needs of relevant others. \u00a0</p> <p>- They recognize the complexities in developing as thinkers, and commit themselves to life-long practice toward self-improvement. \u00a0</p> <p>- They embody the Socratic principle: \u201cThe unexamined life is not worth living\u201d, because they realize that many unexamined lives together result in an uncritical, unjust, dangerous world.</p>"},{"location":"science/critical-thinking/#why","title":"Why","text":"<p>Why it is important for the individual \u00a0 \u00a0 - Improve your thinking quality \u00a0 \u00a0 - Improve your arguing skills \u00a0 \u00a0 - Structure your knowledge \u00a0 \u00a0 - Protects you from fake news and propaganda \u00a0 \u00a0 - Better quality of life \u00a0</p> <p>Why it is important for society \u00a0 \u00a0 - Civilized public discussion. \u00a0 \u00a0 - Better Politics. \u00a0 \u00a0 - Totalitarianism (or other -isms) Prevention. \u00a0 \u00a0 - Peace?</p> <p>Why is it so hard to teach </p> <p>- Obviously it\u2019s not black/white, not a \u201cmatter of kind\u201d but \u201ca matter of degree\u201d. \u00a0</p> <p>- If I had to pick one battle, a single battle, I\u2019d spend my life exposing high school students to Critical Thinking</p>"},{"location":"science/critical-thinking/#how","title":"How","text":"<ul> <li>Migliorare le capacit\u00e0 argomentative: non parlo di persuasione e seduzione ma di logica \u00a0</li> </ul> <p>- Logical fallacies (wikipedia, Poster/Cheatsheet, https://fallacydetected.com/list , logically fallacious, Mark Manson, Immanuel Casto (more), Visual Capitalist) \u00a0</p> <p>- Straw Man \u00a0</p> <p>- Correlation vs Causation, Magical thinking \u00a0</p> <p>- Ad hominem \u00a0</p> <p>- Slippery Slope \u00a0</p> <p>- False Dichotomy \u00a0</p> <p>- Appeals (authority, probability, pity, tradition, wealth, ) \u00a0</p> <p>- Faulty Generalization \u00a0</p> <p>- The \u201cFallacy\u201d Fallacy \u00a0</p> <p>- The Fallacy of Gray </p> <p>- How to disagree (paul graham) \u00a0</p> <p>- Steelman (Peterson vs Harris, Farnam Street) \u00a0</p> <p>- Rationality (read the sequences, 12 virtues, checklist) \u00a0</p> <p>- \u201cIt is better to debate a question without settling it than to settle a question without debating it.\u201d \u2014 Joseph Joubert \u00a0</p> <ul> <li>Costruire la propria Knowledge Base \u00a0</li> </ul> <p>- Skepticism / Data Driven / Evidences (Critical Thinking Cheatsheet) / Uncertainty (Socrates) \u00a0</p> <p>- Why? \u00a0</p> <p>- Literacy (\u201cLiteracy of any sort gives you the power to recognize and unambiguously label things that the illiterate can easily ignore as noise, fads and bullshit\u201d) \u00a0</p> <p>- Wisdom </p> <p>- Input selection (The Garden and the Stream, The Holiday Paradox, The TV Paradox) \u00a0</p> <p>- Intentionality, Quantity, Kind (audio, video, written), Quality, Diversity, Always Evolving \u00a0</p> <p>- Curate what you\u2019re exposed to. Avoid junk, learn how to navigate digital information, but also avoid Echo chambers. \u00a0</p> <p>- Tools: RSS (feedly), Subscriptions, read/watch later, bookmarks, long form, depth, commitment to consume some input every day.. \u00a0</p> <p>### Mental Models (Farnam Street) \u00a0</p> <p>- The Map is not the Territory </p> <p>- Circle of Competence </p> <p>- First Principle Thinking (Wait But Why: the cook and the chef) \u00a0</p> <p>- Second Order Thinking (Nat Eliason\u2019s Level 3 Thinking) \u00a0</p> <p>- Against \u201cShort Termism\u201d \u00a0</p> <p>- Ask yourself \u201dAnd then what?\u201d \u00a0</p> <p>- Worst Case scenario \u00a0</p> <p>- Thought Experiments </p> <p>- https://fs.blog/thought-experiment/ </p> <p>- Inversion </p> <p>- Occam Razor </p> <p>- Black Swan / Antifragility \u00a0</p> <p>- Bayesian integration / Probabilistic Thinking / Learning / Knowledge Retention \u00a0</p> <p>- Arbital Bayes Rule </p> <p>- More to That\u2019s Information Lifecycle </p> <p>- Probabilistic Thinking </p> <p>- Thinking in Bets (Talk at Google, Rational Reminder) \u00a0</p> <p>- Learning how to Learn (coursera, Scott Young) \u00a0</p> <p>- Listening (Active Listening, Resonance) \u00a0</p> <p>- Asking Questions (Farnam Street) \u00a0</p> <p>- Bloom Taxonomy (wikipedia, image, teachthought) \u00a0</p> <p>- Cognitive Biases \u00a0</p> <p>- this is water - transcript </p> <p>- Immanuel Casto </p> <p>- Wikipedia, RationalWiki, \u00a0</p> <p>- Visual Capitalist infographic (very good) \u00a0</p> <p>- Charlie Munger\u2019s Psychology of Human Misjudgement (video) \u00a0</p> <p>- Kevin Simler\u2019s Crony Belief (also: The Elephant in the Brain - video) \u00a0</p> <p>- Dan Ariely TED Talks </p> <p>- Daniel Kahneman\u2019s Thinking Fast and Slow </p> <p>- The Cognitive Bias Codex (awesome) \u00a0</p> <p>- Cognitive Biases examples \u00a0</p> <p>- Loss Aversion </p> <p>- Availability </p> <p>- Blind Spot and Cognitive Dissonance </p> <p>- Confirmation (cherry picking) \u00a0</p> <p>- Survivorship (xkcd) \u00a0</p> <p>- Anchoring </p> <p>- Arrival Fallacy (more) \u00a0</p> <p>- Dunning-Kruger and Impostor Syndrome \u00a0</p> <p>- Exploration: Curiosity \u00a0</p> <p>- Umberto Eco\u2019s Antilibrary \u00a0</p> <p>- Vsauce\u2019s TED Talk </p> <p>- Feynman\u2019s Why </p> <p>- Mercadini: Come Imparo Le Cose e Il Paradosso Della Scuola </p> <p>- Exploitation: Practice &amp; Depth \u00a0</p> <p>- Deliberate Practice (Cal Newport\u2019s 99u Talk, So Good They Can\u2019t Ignore You, Deep Work - more, Farnam Street: deliberate practice) \u00a0</p> <p>- Iterations (Jason Fried) \u00a0</p> <p>- Find the right mix of Exploration vs Exploitation. \u00a0</p> <p>- Research: how to search for information in an abundant world. Googling is a skill! \u00a0</p> <p>- Knowledge Retention and Organization: \u00a0</p> <p>- PKM (Commonplace Book, Ryan Holiday\u2019s \u201cNotecard System\u201d, Luhman\u2019s Zettelkasten, Derek Sivers\u2019 \u201cThoughts On\u201d) \u00a0</p> <p>- How to Read \u00a0</p> <p>- How to take notes (Progressive summarization) \u00a0</p> <p>- Building a Second Brain \u00a0</p> <p>- Having Opinions (The work required to have an opinion) \u00a0</p> <ul> <li>Output \u00a0</li> </ul> <p>- Create! (More to That\u2019s Release Ratio, Altucher\u2019s Idea Machine, Altucher\u2019s Idea Sex) \u00a0</p> <p>- Write! (paul graham, jordan peterson (more, more), Perell (more), more to that) \u00a0</p> <p>- Note: not talking about persuasion, manipulation, copywriting.. Even though knowing those \u201cweapons\u201d can make you a better writer, thinker, debater. \u00a0</p> <p>- Learn by Teaching (Feynman Technique) \u00a0</p> <p>- Decision Making\u2026 \u00a0</p> <p>- Planning\u2026 TimeBlocking \u00a0</p> <p>- Productivity\u2026 GTD, PARA \u00a0</p> <p>- Measuring\u2026 Time Tracking \u00a0</p> <p>- Attention Economy / Digital Minimalism\u2026</p> <pre><code>graph TD\n    CT[Critical Thinking] --- |\"Enhances\"|SI[Self-Improvement]\n    SI --- |\"Facilitates\"|CT\n\n    CT --- |\"Develops\"|A[Analytical Skills]\n    CT --- |\"Improves\"|L[Logical Reasoning]\n    CT --- |\"Cultivates\"|E[Evaluation]\n    CT --- |\"Promotes\"|R[Reflection]\n\n    SI --- |\"Directs\"|GM[Goal Setting]\n    SI --- |\"Encourages\"|LL[Lifelong Learning]\n    SI --- |\"Fosters\"|SM[Self-Motivation]\n    SI --- |\"Increases\"|A2[Adaptability]\n\n    A --- |\"Essential for\"|PS[Problem Solving]\n    L --- |\"Guides\"|DM[Decision Making]\n    E --- |\"Requires\"|OT[Open-mindedness]\n    R --- |\"Develops\"|MC[Metacognition]\n\n    GM --- |\"Leads to\"|AT[Action Taking]\n    LL --- |\"Results in\"|CG[Continuous Growth]\n    SM --- |\"Builds\"|DP[Discipline]\n    A2 --- |\"Strengthens\"|RC[Resilience]\n\n    PS --- |\"Informs\"|DM\n    OT --- |\"Supports\"|RC\n    MC --- |\"Drives\"|CG\n    AT --- |\"Reinforces\"|DP\n</code></pre>"},{"location":"science/elephant-in-the-brain-vs-good-inside/","title":"Elephant in the brain vs good inside","text":"<p>the-elephant-in-the-brain VS good-inside</p>"},{"location":"science/elephant-in-the-brain-vs-good-inside/#claudeai","title":"Claude.ai","text":"<p>The view that humans are fundamentally \"good inside\" is often associated with humanistic psychology and more optimistic perspectives on human nature. Dr. Becky Kennedy, in her work \"Good Inside,\" generally promotes the idea that children (and by extension, people) have an innate capacity for goodness. This perspective emphasizes that negative behaviors often stem from unmet needs or underdeveloped skills rather than inherent selfishness or malice.</p> <p>On the other hand, \"The Elephant in the Brain\" by Kevin Simler and Robin Hanson presents a more cynical view of human nature. Their work draws on evolutionary psychology and behavioral economics to argue that much of human behavior is driven by unconscious, self-serving motives. They suggest that we often deceive ourselves about our true motivations, which are frequently more selfish than we'd like to admit.</p> <p>From a scientific standpoint, there's evidence supporting aspects of both perspectives:</p> <ol> <li>Prosocial behavior: Studies have shown that even very young children exhibit altruistic behaviors, suggesting an innate capacity for goodness. For example, research by Warneken and Tomasello (2006) demonstrated that 18-month-old infants would spontaneously help adults with tasks, even without prompting or reward.</li> <li>Evolutionary advantages of cooperation: Research in evolutionary biology and game theory has shown that cooperative behaviors can be evolutionarily advantageous, supporting the idea that humans may have evolved to be \"good\" in certain contexts (Nowak, 2006).</li> <li>Self-serving biases: Numerous psychological studies have demonstrated various cognitive biases that lead people to view themselves more favorably than is objectively warranted, aligning with the \"Elephant in the Brain\" perspective (Sedikides &amp; Gregg, 2008).</li> <li>Neurobiological basis of empathy: Neuroscience research has identified brain structures and processes involved in empathy, suggesting a biological basis for prosocial behavior (Singer &amp; Lamm, 2009).</li> <li>Cultural influences: Anthropological studies have shown significant variations in prosocial behavior across cultures, indicating that both nature and nurture play roles in shaping human behavior (Henrich et al., 2005).</li> </ol> <p>In conclusion, the scientific evidence suggests a nuanced view: humans seem to have capacities for both selfishness and altruism, with various factors including genetics, upbringing, culture, and immediate context influencing which tendencies manifest. The truth likely lies somewhere between the optimistic \"good inside\" view and the more cynical perspective of unconscious self-interest.</p>"},{"location":"science/elephant-in-the-brain-vs-good-inside/#copilot-answer-validation","title":"Copilot answer validation:","text":"<p>This is a fascinating debate, and both perspectives have compelling arguments supported by scientific evidence. Let\u2019s break down the key points from each view and see how they stack up.</p>"},{"location":"science/elephant-in-the-brain-vs-good-inside/#good-inside-by-becky-kennedy","title":"Good Inside by Becky Kennedy","text":"<p>Dr. Becky Kennedy\u2019s perspective is rooted in humanistic psychology, which emphasizes the inherent goodness and potential in people. Here are some key points:</p> <ol> <li>Innate Goodness: Kennedy argues that children, and by extension all people, have an innate capacity for goodness. Negative behaviors are often seen as a result of unmet needs or underdeveloped skills rather than inherent selfishness1.</li> <li>Prosocial Behavior in Children: Studies have shown that even very young children exhibit altruistic behaviors. For example, research by Warneken and Tomasello (2006) demonstrated that 18-month-old infants would spontaneously help adults with tasks, even without prompting or reward2.</li> <li>Neurobiological Basis of Empathy: Neuroscience research has identified brain structures and processes involved in empathy, suggesting a biological basis for prosocial behavior3.</li> </ol>"},{"location":"science/elephant-in-the-brain-vs-good-inside/#the-elephant-in-the-brain-by-kevin-simler-and-robin-hanson","title":"The Elephant in the Brain by Kevin Simler and Robin Hanson","text":"<p>Simler and Hanson\u2019s view is more cynical, drawing on evolutionary psychology and behavioral economics to argue that much of human behavior is driven by unconscious, self-serving motives. Key points include:</p> <ol> <li>Self-Serving Biases: Numerous psychological studies have demonstrated various cognitive biases that lead people to view themselves more favorably than is objectively warranted4.</li> <li>Evolutionary Psychology: This perspective suggests that many behaviors that appear altruistic are actually driven by self-interest, as they have evolved to enhance survival and reproductive success5.</li> <li>Cultural Influences: Anthropological studies show significant variations in prosocial behavior across cultures, indicating that both nature and nurture play roles in shaping human behavior6.</li> </ol>"},{"location":"science/elephant-in-the-brain-vs-good-inside/#scientific-evidence-and-conclusion","title":"Scientific Evidence and Conclusion","text":"<p>From a scientific standpoint, evidence supports aspects of both perspectives:</p> <ul> <li>Prosocial Behavior and Cooperation: Research in evolutionary biology and game theory has shown that cooperative behaviors can be evolutionarily advantageous, supporting the idea that humans may have evolved to be \u201cgood\u201d in certain contexts7.</li> <li>Self-Serving Biases: Psychological studies align with the \u201cElephant in the Brain\u201d perspective, showing that people often have unconscious self-serving motives4.</li> </ul> <p>In conclusion, the scientific evidence suggests a nuanced view: humans have capacities for both selfishness and altruism, with various factors including genetics, upbringing, culture, and immediate context influencing which tendencies manifest. The truth likely lies somewhere between the optimistic \u201cgood inside\u201d view and the more cynical perspective of unconscious self-interest.</p> <p>Which perspective resonates more with you, or do you find yourself somewhere in between?</p> <p>1: 2: Warneken, F., &amp; Tomasello, M. (2006). Altruistic helping in human infants and young chimpanzees_Science_, 311(5765), 1301-1303. 3: Singer, T., &amp; Lamm, C. (2009). The social neuroscience of empathy_Annals of the New York Academy of Sciences_, 1156(1), 81-96. 4: Sedikides, C., &amp; Gregg, A. P. (2008). Self-enhancement: Theory and research_Psychological Bulletin_, 134(1), 1-31. 5: Simler, K., &amp; Hanson, R. (2018). The Elephant in the Brain: Hidden Motives in Everyday Life. Oxford University Press. 6: Henrich, J., Heine, S. J., &amp; Norenzayan, A. (2010). The weirdest people in the world? Behavioral and Brain Sciences, 33(2-3), 61-83. 7: Nowak, M. A. (2006). Five rules for the evolution of cooperation. Science, 314(5805), 1560-1563.</p>"},{"location":"science/epistemology/","title":"Videos:","text":""},{"location":"science/epistemology/#overview-of-epistemology-part-2-a-little-bit-of-philosophy","title":"Overview of Epistemology part 2 - A Little Bit of Philosophy","text":"<p>barryfvaughan textbook</p> <ul> <li>Knowledge is described as \"true justified belief.\"</li> <li>Beliefs are categorized into different types such as intuition (unjustifiable) and opinion (justifiable). The lecture explains that beliefs are not binary but exist on a continuum of justification, ranging from intuition to knowledge.</li> <li>Two primary internalist approaches to belief justification are discussed:    Foundationalism, which relies on self-justifying foundational beliefs,    and Coherentism, which emphasizes the coherence among a network of beliefs without relying on self-evident foundational beliefs.<ul> <li>a movie or a book novel can be very coherent but completely made up</li> </ul> </li> <li>Externalism argues that justification should connect internal beliefs with the external world. It highlights the importance of accurate perception and belief formation processes, linking internal beliefs to external reality.</li> </ul> <p>Can we have knowledge? - Dogmatism asserts that knowledge is possible,  - Skepticism doubts the possibility of knowledge.  - Epistemic Relativism, which claims that truth is relative, which is  problematic because it contradicts the objective nature of truth.     - extreme: subjectivism, everyone is a whole universe     - moderate: conventionalism, relative to a close context (family, culture)</p>"},{"location":"science/epistemology/#websites","title":"Websites:","text":"<ul> <li>TOP Reddit r/epistemology</li> </ul>"},{"location":"science/epistemology/#books","title":"Books:","text":""},{"location":"science/epistemology/#-robert-audi-epistemologia-unintroduzione-alla-teoria-della-conoscenza","title":"- Robert Audi - Epistemologia. Un'introduzione alla teoria della conoscenza","text":""},{"location":"science/how-to-read-body-language/","title":"How to read body language","text":"<p>Reading body language to assess honesty is a complex skill that requires practice and careful observation. This guide provides an overview of key indicators and techniques, but it's important to remember that no single behavior definitively indicates honesty or deception.</p> <ul> <li>Joe Navarro https://www.youtube.com/watch?v=VAB9cUlGrRo</li> <li>Conor Neil https://www.youtube.com/watch?v=w82a1FT5o88</li> <li>Noah Zandan https://www.youtube.com/watch?v=H0-WkpmTPrM</li> </ul>"},{"location":"science/how-to-read-body-language/#potential-indicators-of-dishonesty","title":"Potential Indicators of Dishonesty","text":""},{"location":"science/how-to-read-body-language/#a-facial-expressions","title":"A. Facial Expressions","text":"<ol> <li>Lack of eye contact or excessive blinking</li> <li>Averting gaze or looking down frequently</li> <li> <p>Rapid blinking rate (normal is 6-8 blinks per minute)</p> </li> <li> <p>Microexpressions</p> </li> <li>Brief flashes of true emotion lasting 1/15 to 1/25 of a second</li> <li> <p>Look for expressions of fear, disgust, or contempt</p> </li> <li> <p>Inconsistent facial expressions</p> </li> <li>Smile that doesn't reach the eyes (Duchenne smile)</li> <li>Expressions that don't match the spoken words</li> </ol>"},{"location":"science/how-to-read-body-language/#b-body-language","title":"B. Body Language","text":"<ol> <li>Closed body posture</li> <li>Crossed arms or legs</li> <li> <p>Turning body away from the speaker</p> </li> <li> <p>Self-soothing behaviors</p> </li> <li>Touching face, nose, or mouth frequently</li> <li>Playing with hair or jewelry</li> <li> <p>Rubbing neck or ears</p> </li> <li> <p>Fidgeting or restlessness</p> </li> <li>Tapping feet or fingers</li> <li>Shifting weight frequently</li> <li>Adjusting clothing or accessories unnecessarily</li> </ol>"},{"location":"science/how-to-read-body-language/#c-vocal-cues","title":"C. Vocal Cues","text":"<ol> <li>Changes in voice pitch</li> <li> <p>Higher pitch may indicate stress or deception</p> </li> <li> <p>Speech patterns</p> </li> <li>Hesitations or frequent use of filler words (\"um,\" \"uh,\" \"like\")</li> <li> <p>Speaking unusually slowly or quickly</p> </li> <li> <p>Tone inconsistencies</p> </li> <li>Monotone delivery or inappropriate emotional tone</li> </ol>"},{"location":"science/how-to-read-body-language/#signs-of-honesty","title":"Signs of Honesty","text":"<ol> <li>Steady eye contact</li> <li> <p>Maintaining appropriate eye contact (but not staring)</p> </li> <li> <p>Open body posture</p> </li> <li>Uncrossed arms and legs</li> <li> <p>Body oriented towards the speaker</p> </li> <li> <p>Relaxed facial expressions</p> </li> <li>Natural, fluid changes in expression</li> <li> <p>Expressions matching the content of speech</p> </li> <li> <p>Consistent tone of voice</p> </li> <li>Even pitch and pace</li> <li> <p>Emotional tone appropriate to the subject</p> </li> <li> <p>Appropriate gestures</p> </li> <li>Hand movements that emphasize or illustrate speech</li> <li>Gestures that match the verbal content</li> </ol>"},{"location":"science/how-to-read-body-language/#advanced-assessment-techniques","title":"Advanced Assessment Techniques","text":""},{"location":"science/how-to-read-body-language/#a-establishing-a-baseline","title":"A. Establishing a Baseline","text":"<ol> <li>Observe normal behavior in non-stressful situations</li> <li>Note typical speech patterns, gestures, and expressions</li> <li>Use this baseline to identify deviations during questioning</li> </ol>"},{"location":"science/how-to-read-body-language/#b-cluster-analysis","title":"B. Cluster Analysis","text":"<ol> <li>Look for groups of behaviors rather than isolated signs</li> <li>Multiple consistent indicators increase reliability</li> </ol>"},{"location":"science/how-to-read-body-language/#c-contextual-considerations","title":"C. Contextual Considerations","text":"<ol> <li>Account for cultural differences in body language</li> <li>Consider environmental factors (e.g., temperature, comfort)</li> <li>Assess the stakes of the situation for the individual</li> </ol>"},{"location":"science/how-to-read-body-language/#d-verbal-nonverbal-consistency","title":"D. Verbal-Nonverbal Consistency","text":"<ol> <li>Compare spoken words with body language</li> <li>Note any mismatches or incongruencies</li> </ol>"},{"location":"science/how-to-read-body-language/#common-pitfalls-and-limitations","title":"Common Pitfalls and Limitations","text":"<ol> <li>Confirmation bias: Avoid interpreting behaviors to fit preconceived notions</li> <li>Stereotyping: Be aware of personal biases and cultural differences</li> <li>Overconfidence: Remember that even experts can misinterpret body language</li> <li>Individual variations: Some people naturally display \"deceptive\" behaviors</li> <li>Reverse tells: Skilled deceivers may deliberately display \"honest\" behaviors</li> </ol>"},{"location":"science/how-to-read-body-language/#ethical-considerations","title":"Ethical Considerations","text":"<ol> <li>Use these techniques responsibly and ethically</li> <li>Avoid making accusations based solely on body language</li> <li>Respect privacy and cultural differences</li> <li>Combine behavioral analysis with other forms of evidence</li> </ol>"},{"location":"science/how-to-study/","title":"How to study","text":"<p>Altre Fonti:</p> <ul> <li>https://www.coursera.org/learn/learning-how-to-learn </li> <li>https://www.coursera.org/learn/mindshift </li> <li>https://tomato-timer.com/</li> </ul>"},{"location":"science/how-to-study/#da-evitare","title":"Da evitare","text":"<ul> <li>Niente social networks la mattina  </li> <li>Evidenziare pi\u00f9 di un frase a paragrafo  </li> <li>Rileggere pi\u00f9 volte  </li> <li>Overlearning: ripetere pi\u00f9 volte ci\u00f2 che si sa gi\u00e0  </li> <li>Einstellung: fissarsi su un\u2019idea impedisce che ne arrivino di altre.    Concentrati su qualcosa che ti \u00e8 pi\u00f9 difficile, fai interleaving.  </li> <li>Illusion of competence:    troppe evidenziazioni danno l\u2019impressione di sapere di pi\u00f9. Fai invece test frequenti.   Anche studiare molto dai video da quest\u2019illusione!  </li> <li>Attenzione alla competitivit\u00e0 dei colleghi: studia in disparte o solo con chi condivide la tua passione   NB: il senso di questa frase si riferiva all\u2019evitare persone negative durante le sessioni di studio (lascia perde, \u00e8 impossibile..) e di sicuro non nell'evitare gruppi di studio, anzi.</li> </ul>"},{"location":"science/how-to-study/#da-fare","title":"Da fare","text":"<ul> <li>Recall: ripeti senza guardare  </li> <li>Scrivi l e n t a m e n t e   i riassunti   </li> <li>Interleaving: alterna sezioni diverse di ci\u00f2 che stai studiando    (Per utilizzare l'interleaving in modo efficace, cerca di alternare regolarmente tra i diversi concetti o argomenti che stai studiando anzich\u00e9 concentrarti su uno solo per lunghi periodi.)  </li> <li>CHUNK: pezzi di informazioni collegati da concetti  </li> <li>Focus  </li> <li>Practice  </li> <li>Understanding the basic idea  </li> <li>Deliberate practice: trova le parti che ti sono meno chiare ed esercitati su quelle  </li> <li>Prendi appunti a mano (o tablet\u2026 al limite anche una tastiera senza copiare e incollare.  </li> <li>Immagini visuali delle parole chiave (memory palace, disegnini tra le note)   Metafore ed analogie, dai dei significati assurdi e ridicoli agli acronimi difficili da ricordare  </li> <li> <p>Inizia a cronometrare gli esercizi appena possibile (perfetto in combo con la pomodoro techcnique)</p> </li> <li> <p>L\u2019esercizio fisico LA MATTINA \u00e8 ci\u00f2 che aiuta di pi\u00f9 la longevit\u00e0 dei neuroni! </p> </li> </ul> <p>TEST: </p> <ul> <li>gestisci l\u2019ansia come preparazione ad una sfida, non \u00e8 qualcosa di negativo.   Fai 30 respiri profondi, diaframmatici, prima del test  </li> <li>Calcola velocemente quanto tempo hai per ogni esercizio, considera che il tempo reale sar\u00e0 pi\u00f9 alto per gli esercizi difficili e pi\u00f9 basso per quelli facili, ma datti subito un limite e tieni l\u2019orologio sotto controllo  </li> <li>leggi prima tutto velocemente! Inizia da esercizi pi\u00f9 difficili e salta a quelli facili al primo blocco, questo attiver\u00e0 la modalit\u00e0 diffusa (vedi interleaving) e dovrebbe essere pi\u00f9 facile riprendere il problema dopo (se hai studiato!).</li> </ul>"},{"location":"science/how-to-study/#dr-richard-felders-test-checklist","title":"Dr. Richard Felder's test checklist.","text":"<p>STUDIO INDIPENDENTE 1. Hai fatto uno sforzo serio per comprendere il testo (esclusi gli esempi)?  2. Hai lavorato con i colleghi sui compiti o problemi? 3. Hai tentato di delineare ogni soluzione al problema prima di lavorare con i colleghi? 4. Hai partecipato attivamente alle discussioni di gruppo sui compiti? 5. Ti sei consultato con il docente quando hai avuto problemi con qualcosa? 6. Hai compreso tutte le soluzioni ai problemi di assegnazione? 7. Hai chiesto spiegazioni su quelle soluzioni che non ti erano chiare?</p> <p>PREPARAZIONE PER L'ESAME 8. Se hai una guida allo studio o un documento del passato, lo hai letto, verificando che potevi farlo tutto quello che contiene? 9. Hai delineato rapidamente le soluzioni di molti problemi senza perdere tempo nei calcoli? 10. Avete esaminato la guida allo studio o il documento con i compagni e vi siete interrogati a vicenda? 11. Se ci sono state sessioni di revisione, hai partecipato e hai chiesto informazioni su qualsiasi cosa di cui non eri sicuro? Di? 12. Hai dormito abbastanza bene prima dell'esame?  (se rispondi no a questa domanda allora le 11 risposte precedenti potrebbero non avere importanza).</p> <p>\"No\" a due o pi\u00f9 domande che indicano che dovresti seriamente considerare di apportare modifiche come ti prepari per il prossimo test.</p>"},{"location":"science/how-to-study/#usa-le-sveglie","title":"Usa le sveglie!","text":"<ul> <li>Quando svegliarsi  </li> <li>Colazione  </li> <li>Primo pomodoro  </li> <li>Quando andare a dormire e segnare 3 task per il giorno dopo</li> </ul>"},{"location":"science/how-to-study/#abitudini","title":"Abitudini","text":"<ul> <li>The cue : il trigger dell\u2019attivit\u00e0, l\u2019innesco.   Impara a riconoscere cosa fa nascere la distrazione, la cattiva abitudine, e\u2019 qui che devi fermarti!  Come togliere le cattive abitudini dal nostro cervello  | Giuliano Trenti | TEDxFerrara </li> </ul> <p>Pomodoro technique   Via smartphone (silenzioso e fuori dall vista)   Chiudi altri tab del browser o usa un altro browser, mod. schermo intero.   Cuffie noise cancelling.</p> <ul> <li> <p>Routine: zombie mode. Qualcosa che viene fatto spesso si far\u00e0 in automatico   Usa sempre lo stesso posto tranquillo   Organizza i tuoi impegni dal giorno prima in modo che niente disturbi l\u2019innesco della tua routine la mattina seguente.</p> </li> <li> <p>REWARD: procrastinare \u00e8 facile perch\u00e8 da una soddisfazione (dopamina) immediata   Durante le pause piccole premiati: social, cibo, passeggiata</p> </li> <li> <p>Belief: stabilisci un gruppo o entra in una comunit\u00e0 che ti motiva</p> </li> </ul> <p>&gt; Non ti concentrare sul prodotto/risultato, ma sul processo!</p> <p>Altro: Acetylcholine affects focused learning and attention Dopamine signals in relation to unexpected reward Serotonin affects social life and risk-taking behavior</p> <p>#Lifelong learner!</p>"},{"location":"science/mindfulness/","title":"Mindfulness","text":""},{"location":"science/mindfulness/#jon-kabat-zinn-the-healing-power-of-mindfulness","title":"Jon Kabat-Zinn - \"The Healing Power of Mindfulness\"","text":"<p>discusses the importance of mindfulness in medicine, emphasizing that modern medicine often focuses on treating illnesses and consequences rather than maintaining overall well-being. </p> <p>He defines \u201cnow\u201d as the only moment we truly have, highlighting the significance of being present. </p> <p>He describes the practice of \u201cdropping in\u201d on our mind and body to achieve greater balance and clarity. </p> <p>notes that the brain is always active, even when we think we\u2019re doing nothing, and that striving to improve performance can be counterproductive, as a grasping mind often hinders desirable outcomes.</p> <p>\u201cdefault mode\u201d of the mind, which is often preoccupied with narratives about oneself.</p> <ul> <li> <p>Interoception: \u00a0is the collection of\u00a0senses\u00a0providing information to the organism about the internal state of the body.\u00a0   This can be both conscious and subconscious. It encompasses the brain's process of integrating signals relayed from the body into specific subregions allowing for a nuanced representation of the physiological state of the body.   This is important for maintaining\u00a0homeostatic\u00a0conditions facilitating\u00a0self-awareness.</p> </li> <li> <p>https://www.cmu.edu/news/stories/archives/2016/february/meditation-changes-brain.html</p> </li> <li>Mindfulness Meditation and Psychopathology</li> <li>The Effect of Mindfulness-Based Therapy on Anxiety and Depression: A Meta-Analytic Review</li> <li>My blog article</li> </ul>"},{"location":"science/rationality/","title":"Rationality","text":"<p>a more rational reasoning process tends to arrive at true beliefs and good decisions more often than a less rational process. For example, a reasoning process that responds to evidence is more likely to believe true things than one that just goes with what's convenient to believe.</p> <p>The goal of conversations is to figure out what's true, not to win arguments. - we try to focus on what would change our minds</p> <p>To be Bayesian: - Rather than treating belief as binary, use probabilistic credences to express our certainty/uncertainty.  - Try Bayesian evidence for or against a hypothesis,</p> <p>What Do We Mean By \"Rationality\"? \u2014 LessWrong</p> <p>Epistemic Rationality: This type of rationality is concerned with forming beliefs that are as accurate as possible. It involves using evidence and logical reasoning to ensure that one\u2019s beliefs correspond to reality. The goal is to hold beliefs that are true and to avoid false beliefs.</p> <p>Instrumental Rationality: This focuses on making decisions that effectively achieve one\u2019s goals. It involves choosing actions based on their expected outcomes and how well they align with one\u2019s objectives. The emphasis is on the practical effectiveness of decisions rather than their truthfulness.</p> <p>Probability Theory: This is used to evaluate the likelihood of various events and to update beliefs in light of new evidence. It provides a mathematical framework for dealing with uncertainty and making predictions.</p> <p>Decision Theory: This theory is concerned with choosing the best action among various alternatives based on their expected outcomes. It involves evaluating the potential benefits and risks of different actions to make rational choices that maximize one\u2019s goals.</p>"},{"location":"science/rationality/#challenges-in-rationality","title":"Challenges in Rationality","text":"<p>Bayesian Formalism: While Bayesian methods provide a comprehensive framework for updating beliefs and making decisions, they can be impractical for real-world problems due to their complexity and computational demands.</p> <p>Debates on Rules: There are ongoing debates about the exact rules and principles that should govern rational belief and decision-making. Different schools of thought propose various modifications and alternatives to classical probability and decision theory.</p>"},{"location":"science/rationality/#practical-application","title":"Practical Application","text":"<p>Overcoming Biases: Rationality involves recognizing and overcoming cognitive biases that can distort our thinking. This includes biases like confirmation bias, where we favor information that confirms our preexisting beliefs, and availability bias, where we overestimate the importance of information that is readily available.</p> <p>self-deception: Rationality also requires us to be honest with ourselves about our beliefs and motivations. Self-deception can lead to holding false beliefs and making poor decisions.     humans can look at an illusion and realize that part of what we\u2019re seeing is the lens itself.\u00a0You don\u2019t always have to believe your own eyes, but you have to realize that you\u00a0have\u00a0eyes \u2014 you must have distinct mental buckets for the map and the territory, for the senses and reality.\u00a0Lest you think this a trivial ability, remember how rare it is in the animal kingdom.     The Lens That Sees Its Flaws \u2014 LessWrong</p> <p>Aligning Beliefs and Actions: The ultimate goal of rationality is to ensure that our beliefs accurately reflect reality and that our actions effectively achieve our goals. This involves continuous self-reflection and adjustment of our beliefs and strategies in response to new information and changing circumstances.</p>"},{"location":"science/self-deception/","title":"Self deception","text":"<p>Sigmund Freud\u2019s theory of self-deception and protection is primarily encapsulated in his concept of defense mechanisms. These are unconscious strategies that the ego uses to protect itself from anxiety and to maintain psychological equilibrium.  Here are some key points:</p>"},{"location":"science/self-deception/#freuds-theory-of-defense-mechanisms","title":"Freud\u2019s Theory of Defense Mechanisms","text":"<ol> <li>Repression: This is the cornerstone of Freud\u2019s defense mechanisms. It involves pushing distressing thoughts, memories, or desires out of conscious awareness.</li> <li>Denial: Refusing to accept reality or facts, thereby blocking external events from awareness.</li> <li>Projection: Attributing one\u2019s own unacceptable thoughts or feelings to someone else.</li> <li>Rationalization: Creating logical explanations for behaviors or feelings that are actually driven by unconscious motives.</li> <li>Displacement: Redirecting emotions from a threatening target to a safer one.</li> <li>Sublimation: Channeling unacceptable impulses into socially acceptable activities.</li> <li>Regression: Reverting to behaviors characteristic of an earlier stage of development when faced with stress.</li> </ol>"},{"location":"science/self-deception/#self-deception-and-the-splitting-of-the-ego","title":"Self-Deception and the Splitting of the Ego","text":"<p>Freud also discussed the concept of self-deception in terms of the \u201csplitting of the ego.\u201d This involves a division within the ego where one part remains aware of the truth while another part denies it, allowing the individual to hold contradictory beliefs simultaneously1.</p>"},{"location":"science/self-deception/#modern-validity","title":"Modern Validity","text":"<p>Freud\u2019s ideas on defense mechanisms have been influential and remain relevant in modern psychology, though they have been refined and expanded upon.  Contemporary research supports the existence of defense mechanisms, though the specifics of Freud\u2019s original theories are often debated. For example:</p> <ul> <li>Empirical Support: Modern psychology has found evidence for many of Freud\u2019s defense mechanisms, such as repression and denial2.</li> <li>Cognitive Dissonance: The concept of cognitive dissonance, introduced by Leon Festinger, aligns with Freud\u2019s ideas about self-deception, suggesting that people are motivated to reduce the discomfort of holding conflicting beliefs1.</li> <li>Neuroscience: Advances in neuroscience have provided insights into how the brain processes and manages conflicting information, supporting some of Freud\u2019s ideas about unconscious processes3.</li> </ul> <p>Overall, while some aspects of Freud\u2019s theories have been modified or challenged, the core idea that people use unconscious strategies to protect themselves from psychological distress remains a significant and validated concept in modern psychology.</p> <p>Do you find Freud\u2019s ideas on self-deception and protection resonate with your understanding of human behavior?</p> <ol> <li>https://www.cambridge.org/core/books/philosophical-essays-on-freud/selfdeception-and-the-splitting-of-the-ego/1477BAF77C0CD1D390C44A7A1A0C36D7</li> <li>https://www.verywellmind.com/defense-mechanisms-2795960</li> <li>https://bing.com/search?q=Sigmund+Freud+theory+of+self-deception+and+protection</li> </ol>"},{"location":"science/strategy-and-game-theory-for-management/","title":"Strategy and game theory for management","text":"<ul> <li>https://www.coursera.org/learn/strategy-and-game-theory-for-management/</li> </ul>"},{"location":"science/strategy-and-game-theory-for-management/#dominant-strategy","title":"Dominant strategy","text":"<p>A Dominant Strategy is the best strategy (a best reply / earns the highest payoff) in every case, no matter what other players do.</p> <p>Why selfish people for selfish reasons end up cooperating? When emotions are involved people are more willing to take collaborative actions. - Prisoner's dilemma The Prisoner's Dilemma </p> <ul> <li> <p>Doctors prescribing brand-name medications instead of generics:      </p> <ul> <li>Dominant Strategy: If doctors receive incentives from pharmaceutical companies for prescribing brand-name drugs, they might choose this option regardless of the patient\u2019s financial situation or the efficacy of generics. This can be seen as a dominant strategy because it maximizes their personal benefit (e.g., financial incentives) regardless of other factors.</li> <li>Prisoner\u2019s Dilemma: If all doctors prescribe brand-name drugs, the overall cost of healthcare increases, which is a worse outcome for society. However, if each doctor individually chooses to prescribe generics, the overall cost decreases, benefiting everyone. The dilemma arises because each doctor might still choose the brand-name drug to maximize their personal gain, leading to a suboptimal outcome for society.</li> </ul> </li> <li> <p>Smoking corporations agreeing to stop smoking advertisements:      </p> <ul> <li>Dominant Strategy: If one corporation stops advertising while others continue, it might lose market share. Therefore, the dominant strategy for each corporation is to continue advertising to maintain or increase market share.</li> <li>Prisoner\u2019s Dilemma: If all corporations agree to stop advertising, they could collectively reduce the societal harm caused by smoking. However, there was a hidden benefit since smoking consumption was not correlated to ads. Also that resulted in a strong blocker for new companies addressing the smoking market without the possibility to be advertised.</li> </ul> </li> <li> <p>Religion (to be less selfish in favor of other people):    </p> <ul> <li>Dominant Strategy: In a religious context, individuals might adopt altruistic behaviors because they believe it maximizes their spiritual or social rewards, regardless of others\u2019 actions.</li> <li>Prisoner\u2019s Dilemma: If everyone acts altruistically, society as a whole benefits. However, if individuals act selfishly, they might gain short-term benefits at the expense of others, leading to a less cooperative and more fragmented society.</li> </ul> </li> <li> <p>The classical prisoner\u2019s dilemma case:    </p> <ul> <li>Dominant Strategy: In the classic scenario, each prisoner has a dominant strategy to betray the other, as it minimizes their own potential punishment regardless of the other\u2019s choice.</li> <li>Prisoner\u2019s Dilemma: If both prisoners betray each other, they receive a moderate punishment, which is worse than if they both remained silent. However, the fear of being betrayed leads them to choose betrayal, resulting in a suboptimal outcome for both. Each has a personal incentive to do something that ultimately leads to a result that is bad for everyone when everyone similarly does what his or her personal interest dictates.</li> </ul> </li> <li> <p>Problem/tragedy of the commons What is the tragedy of the commons? - Nicholas Amendolare</p> </li> </ul>"},{"location":"science/strategy-and-game-theory-for-management/#iterated-dominance","title":"Iterated dominance","text":""},{"location":"science/strategy-and-game-theory-for-management/#books","title":"Books","text":"<ul> <li>the-art-of-strategy</li> </ul>"},{"location":"science/the-science-of-gratitude/","title":"The science of gratitude","text":"<p>https://www.youtube.com/watch?v=KVjfFN89qvQ</p> <ul> <li>The science of gratitude has a significant impact on mental and physical health, including cardiovascular health, relationships, mental health, and cognitive performance.</li> <li>An effective gratitude practice involves more than simply writing down lists or thoughts of gratitude\u2014it requires engaging with the emotions and sensations associated with gratitude.</li> <li>Gratitude practices can involve receiving gratitude rather than just giving it, as receiving thanks activates pro-social neural circuits associated with gratitude.</li> <li>The medial prefrontal cortex plays a crucial role in setting the context and meaning of our experiences, and it is activated when we engage in gratitude practices.</li> <li>Storytelling and narratives are powerful tools for activating gratitude circuits in the brain, as they evoke empathy, sympathy, and theory of mind.</li> <li>Gratitude practices involve shifting neural circuitry to activate pro-social behaviors and enhance feelings of happiness and wellbeing.</li> <li>Receiving gratitude can have a more potent effect on activating gratitude circuits than giving gratitude.</li> <li>The most effective gratitude practice involves engaging in narratives or stories that evoke empathy and theory of mind, allowing us to experience the gratitude of others.</li> </ul>"},{"location":"science/the-science-of-gratitude/#summary","title":"Summary:","text":"<p>The text suggests that gratitude practices can be enhanced by incorporating storytelling. Instead of simply listing things we are thankful for, engaging with the narratives of others can evoke a deeper emotional response and activate the brain's gratitude circuits.</p> <p>To practice gratitude through storytelling, one should find a story that resonates personally and inspires feelings of human connection and compassion. This story can be a movie, podcast, or book. By repeatedly revisiting this story, individuals can cultivate a sense of gratitude and experience positive physiological changes, such as a shift in heart rate and breathing.</p> <p>The key to this practice is consistency. By regularly engaging with the chosen story, individuals can train their brains to associate the story with feelings of gratitude, making it easier to access these emotions in the future. This approach offers a unique and effective way to cultivate gratitude and its associated benefits.</p>"},{"location":"science/think-again/","title":"Think again","text":"<p>I think an argument is a structured assertion with the purpose of transferring knowledge. So it can't be a mere definition, but it could be a justification, an explanation or persuasion  </p> <p>An argument is a series of propositions starting from premises giving reasons to justify the conclusions. It should be made in a well-known language with a purpose to transfer knowledge.  </p> <p>An argument could be: - justification - explanation: causal, teleological, formal, material - persuasion - Generalization - prediction  </p> <p>Why did he add more sugar? To make the cake sweeter. teleological explanation gives the purpose or function of the phenomenon that it explains, and this explanation says that his purpose was to make the cake sweeter.  </p> <p>Language principles - fundamental - conventional - social - representational </p> <p>Animals can communicate but can't argue.  </p> <p>To justify a conclusion is to give a reason for that conclusion, but the audience might not understand or accept that reason, even when it is a good reason. Then the argument might have no effect (or an unintended effect) on the audience. One can give a reason for a conclusion, and it will be a reason, regardless of the effect on the audience.  </p> <p>We need to understand the purpose of an artifact in order to understand that artifact. Artifacts are created for special purposes, and different artifacts (such as a screwdriver and a spatula) are distinguished by their purposes, among other things.  </p> <p>You can try to give a reason for the conclusion even when you know that the audience will not understand or accept that reason. The point might be to show them that you have a reason, even if they don\u2019t accept your reason.  </p> <p>Even if we can't persuade everyone with strong arguments, luckily, being good in justification could lead to big changes in society since we would understand much better the reasons that are the root causes of one's behavior. Imagine this happening for real in politics!  </p> <p>Three levels of language usage\" - linguistic - speech - conversational Wittgenstein meant by his slogan \u201cMeaning is use.\u201d  </p> <p>Question 1 The old man the ship. Answer: Meaningful. If you read \u201cthe old man\u201d as a noun phrase, then you will look for a verb and not find one. That makes this garden path sentence seem meaningless. However, \u201cthe old\u201d can be a noun by itself referring to old people, and \u201cman\u201d can be a verb referring to managing the ship, and then the sentence means \u201cThe old people manage the ship.\u201d  </p> <p>Arguing is a speech act.  </p> <p>Paul Grice conversational maximes.  </p> <p>the special language in which arguments are formulated. We will investigate the functions of particular words, including premise and conclusion markers plus assuring, guarding, discounting, and evaluative terms. Identifying these words will enable students to separate arguments from the irrelevant verbiage that surrounds it and then to break the argument into parts and to identify what each part of an argument is doing.  </p> <p>how to organize the parts of an argument in order to show how they fit into a structure of reasoning. The goal is to make the argument look as good as possible so that you can learn from it. We work through the main steps of reconstruction, including putting the premises and conclusion into a standard form, clarifying the premises and breaking them into parts, arranging the argument into stages or sub-arguments, adding suppressed premises where needed to make the argument valid, and assessing the argument for soundness.  </p> <p>Deductive arguments are supposed to be valid in the sense that the premises guarantee that the conclusion is true. In this course, you will learn how to use truth-tables and Venn diagrams to represent the information contained in the premises and conclusion of an argument so that you can determine whether or not the argument is deductively valid. how such phrases as \u201cand\u201d, \u201cor\u201d, \u201cif\u201d, and \u201cnot\u201d can work to guarantee the validity or invalidity of the deductive arguments in which they occur. It will also teach you to understand the functioning of these phrases using a device called a \u201ctruth-table\u201d, which shows how the truth or falsity of propositions that use these phrases depends upon the truth or falsity of the propositions contained within it. We highly recommend that you practice the skills that you will learn in this module by doing the puzzles  </p> <p>how to analyze and assess five common forms of inductive arguments: generalizations from samples, applications of generalizations, inference to the best explanation, arguments from analogy, and causal reasoning. The course closes by showing how you can use probability to help make decisions of all sorts.</p>"},{"location":"software-engineering/Behind-The-Phoenix/","title":"Behind The Phoenix","text":"<p>Behind the Phoenix</p> <p>Affinito Alessandro#1</p> <p>#1IT cloud engineering consultant Italy, Rome, Oct 2019</p> <p>Abstract\u2014 Interruptions, errors, and reactions drive rework, make it difficult to focus and get things done. In doing work, the goal is to build quality in, but measuring this is difficult. Where did errors slip through? Those that develop and deliver quickly are better able to experiment with ways to increase customer adoption and satisfaction, but what if the thing you have to deliver is a working architecture and not a single product?</p> <p>DevOps is almost eleven years old now [1]. Statistics proving its efficiency can be found everywhere, and if efficiency is not enough, employees in high-performing DevOps teams were 2.2x more likely to recommend their organization as a great place to work [2].</p> <p>Here I try to sum up a few of those statistics, highlighting the issues that can be found in big corporations that are still skeptical about Agile and its derivatives.</p> <p>Keywords\u2014 DevOps, Waterfall, Rework, Automation, Delivery</p> <ol> <li>Introduction</li> </ol> <p>According to Forrester Research [3], only 13% of organizations have implemented DevOps, with 50% piloting or conducting proof of concepts. Another 27% plan to implement DevOps within the year, while 9% are interested but have no plans to adopt DevOps within the next 12 months. IT departments grow in 2018</p> <p>Findings from a fall 2017 survey [4] identified people-related issues as top barriers to DevOps adoption. Some 19.7 percent listed limited budgets as the top barrier, 9.4 percent cited company culture, 7.9 percent said limited IT skills, and 7.4 percent listed lack of executive buy-in. Low performers are struggling to keep up, widening the gap [5].</p> <p>Low performers are doing the worst on all dimensions in terms of value-add vs. non-value-add time. Respondents who agreed that they met the following characteristics were 23 times more likely to be in the elite group than those in the low performing group [5]: 1. On-demand self-service: consumers can provision computing resources as needed, automatically 2. Broad network access: capabilities are available through heterogeneous platforms 3.  Resource pooling: Provider resources are pooled in a multi-tenant model, with physical and virtual resources dynamically assigned  4. Rapid elasticity: capabilities can be elastically provisioned and released to rapidly scale 5. Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability</p> <p>Some company introduces just a few of the theoretical concepts found in Agile methodologies like Scrum, to sell themselves as modernized companies. But ignoring the technical shift and the culture transformation will create a false sense of agility, and increase the technical debt over time. What they could do, instead, is to develop proficiency in two steps of the transformation [6], for the first couple of years at least: 1. Focusing on work visibility, stopping to think as software layers and team self management (Scrum, Kanban) 2. Delivering faster with higher quality (Extreme Programming, DevOps).</p> <ol> <li>ISSUES</li> </ol> <p>High performers do significantly less manual work across all vectors, spend more time doing new work, and spend less time remediating security issues or defects than their low-performing counterparts. Because they build quality in, they spend less time fixing problems downstream, freeing up more time to do value-add work. </p> <p>Another issue to consider is the technology needed for automation tasks. In consultancy corporations, tools consist mostly in proprietary software managed by specialized teams, with vertical knowledge. When a product is not available or not sellable to the customer, a custom code could be developed in isolation by a tech specialist or from a remote development team.</p> <p>DevOps maturity is often measured in deployments per day, which becomes a hard metric to collect when most of the work is done by different teams in terms of configuration more than actual developments (CRM, SQL, DB REST services, ERP..). Even when a custom development is done in a SaaS, this will be hardly versioned since people working on these tasks often don't come from a development background, and/or a CI/CD pipeline is not expected from the SaaS management. Best practices suggests to always leave the product as standard as possible, but during the project this will hardly remain true.</p> <p>State of the art</p> <p>Here there are some of the current issues that I think are slowing the most Agile adoption: - dev, ops, security and QA are distinct teams, rarely co-located - dev and ops teams use a common set of tools but don't have visibility into each other's work - project prioritization is mostly scheduled with a minimum planning cadence of weeks, firefighting increase over the time - deployment stability is far above deployment throughput - manual testing with environments separated from development - late delivery on production environments - low transparency [7] at the lower gerarchies.</p> <p>To-Be Anyway there are some low impact changes that could be adopted in the next few years to start a real shift to a more efficient way of development.  Indeed it would be feasible to start delivering by single business functionalities, reducing the iteration time slot from 7/8 weeks to 3/4, where the last week should be dedicated to defining a small share of SIT, business test cases and UAT with the customer. An inter-team, Kanban fashioned, dashboard could be used to make work visible across all teams. Remote support should be more engaged with videoconferences, right after support requests, explaining in detail the context of the requested fix/new feature.</p> <p>Far far away</p> <p>The following are DevOps or Scrum methodologies I see hardly doable in less than five years: - Site Reliability Engineers doing incident management and practice ChatOps for conversation-driven development - Incidents and alerts automatically routed - Officially dedicated time for experimentation of new techniques and processes - Chaos Engineering: experimenting in production in order to build confidence in the system's capability to withstand unexpected conditions. - DevSecOps: automating some security gates to keep the DevOps workflow from slowing down [8].  - Data Ops.: as big data [9] and streaming architectures become more popular people will want and need more data logistics in their organizations because of ML adoption. </p> <p>III.      CONCLUSIONS</p> <p>DevOps requires some fundamental rethinking. People feel comfortable in the way they\u2019ve been working and not everyone is a change agent. I believe a shift is possible if coming from the top management, but it should be mandatory for managers and team leaders to attend it, officially reserving time to train and workshop to shield them from the daily firefighting.</p> <p>The gap between high and low performers seems to continue to increase. I think in a few years we will come to the point that big corporations could not ignore devOps anymore, but being late on the market, their only chance will be to acquire smaller companies that have become an elite in these years.</p> <p>REFERENCES</p> <ol> <li>John Allspaw, Engineer, Researcher, Founder, 10+ Deploys Per Day: Dev and Ops Cooperation at Flickr - https://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr </li> <li>State of DevOps Report - CIO summits 2016 - Dora - https://www.ciosummits.com/Online_Assets_Puppet_2016_State_of_DevOps_Report.pdf.  </li> <li>Dave Bartoletti, https://go.forrester.com/blogs/predictions-2019-cloud-computing/.  </li> <li>Press Release PR Newswire https://markets.businessinsider.com/news/stocks/pensa-survey-finds-top-devops-barriers-involve-cost-complexity-and-legacy-it-1002996792.  </li> <li>State of devops - Dora - https://cloudplatformonline.com/rs/248-TPC-286/images/DORA-State%20of%20DevOps.pdf </li> <li>Diana Larsen, James Shore, The Agile Fluency Model,https://martinfowler.com/articles/agileFluency.html </li> <li>Ken Schwaber and Jeff Sutherland, https://www.scrumguides.org/scrum-guide.html#theory </li> <li>Red Hat, What is devSecOps, https://www.redhat.com/en/topics/devops/what-is-devsecops </li> <li>Martin Fowler, Thinking about Big Data, https://martinfowler.com/articles/bigData/</li> </ol> <p>Further readings</p> <ol> <li>Bartosz Jedrzejewski, The journey to DevOps, Driving value in the public sector https://govtechglobal.co.uk/wp-content/uploads/2019/09/The-Journey-to-DevOps-White-Paper.pdf, 2019  </li> <li>Chasioti, K., BizDevOps: A process model for the Alignment of DevOps with Business Goals, https://dspace.library.uu.nl/handle/1874/383196, 2019  </li> <li>Jez Humble, What is Continuous Delivery?, https://continuousdelivery.com/ </li> <li>Martin Fowler, Software Delivery Guide, ,https://martinfowler.com/delivery.html </li> <li>Gene Kim, The unicorn Project, 2019 https://itrevolution.com/book/the-unicorn-project/ </li> </ol>"},{"location":"software-engineering/DESIGN-PATTERNS/","title":"DESIGN PATTERNS","text":"<p>Sono indipendenti dal linguaggio, ma scriverli due volte sicuro non mi fa male</p> <p>https://refactoring.guru/design-patterns/</p>"},{"location":"software-engineering/DESIGN-PATTERNS/#in-python","title":"IN PYTHON","text":"<p>https://www.linkedin.com/learning/python-design-patterns/types-of-design-patterns?u=42751868</p> <ul> <li>CREATIONAL:   Create objects in a flexible way. Polymorphism.  </li> <li>STRUCTURAL:   Relationship between elements - Inheritance </li> <li>BEHAVIORAL:   Object interactions. Methods and signatures.</li> </ul>"},{"location":"software-engineering/DESIGN-PATTERNS/#creational-creational","title":"CREATIONAL {#creational}","text":"<ul> <li> <p>Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created. https://refactoring.guru/design-patterns/factory-method/python/example</p> </li> <li> <p>Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.</p> </li> <li> <p>Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.  </p> </li> <li>Make the default constructor private, to prevent other objects from using the new operator with the Singleton class.  </li> <li>Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method return the cached object.</li> </ul> <p>The pattern requires special treatment in a multithreaded environment so that multiple threads won\u2019t create a singleton object several times.</p> <ul> <li> <p>Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.</p> </li> <li> <p>Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes.</p> </li> </ul>"},{"location":"software-engineering/DESIGN-PATTERNS/#structural-structural","title":"STRUCTURAL {#structural}","text":"<ul> <li> <p>Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.</p> </li> <li> <p>Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.   Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can\u2019t be added to the superclass.</p> </li> <li> <p>Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.   Using the Composite pattern makes sense only when the core model of your app can be represented as a tree.</p> </li> <li> <p>Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two separate hierarchies\u2014abstraction and implementation\u2014which can be developed independently of each other.   Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.   Use the Bridge if you need to be able to switch implementations at runtime.</p> </li> </ul>"},{"location":"software-engineering/DESIGN-PATTERNS/#behavioral-behavioral","title":"BEHAVIORAL {#behavioral}","text":"<ul> <li> <p>Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they\u2019re observing.   Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically.   X Subscribers are notified in random order.   \u2192 singleton</p> </li> <li> <p>Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.   Use the Visitor when you need to perform an operation on all elements of a complex object structure (for example, an object tree).   Use the pattern when a behavior makes sense only in some classes of a class hierarchy, but not in others.   \u2192 can also provide functionalities to Composite objects</p> </li> <li> <p>Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).</p> </li> <li> <p>Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable.</p> </li> <li> <p>Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.</p> </li> </ul>"},{"location":"software-engineering/DESIGN-PATTERNS/#_1","title":"DESIGN PATTERNS","text":""},{"location":"software-engineering/DESIGN-PATTERNS/#in-java","title":"IN JAVA","text":"<p>https://dzone.com/refcardz/design-patterns?chapter=17</p> <p>https://www.oodesign.com/</p> <p></p>"},{"location":"software-engineering/DESIGN-PATTERNS/#_2","title":"DESIGN PATTERNS","text":""},{"location":"software-engineering/DESIGN-PATTERNS/#creational-patterns","title":"Creational Patterns","text":"<ul> <li>The Abstract Factory Pattern</li> </ul> <p>Lets create objects without specifying their concrete class. Object level. </p> <ul> <li>Builder Pattern </li> <li>Factory Method Pattern </li> <li>Prototype Pattern </li> <li>Singleton Pattern</li> </ul> <p>Ensure a class has only one instance and provide a global point of access to it. Constructor must be private. Usi comuni: thread pool, registry, logging. Singleton is infamous in object oriented systems. A lot of the time the Singleton is used as a shortcut, so that the designer doesn't need to think properly about object visibility. If you're hacking in a Singleton so that there is global access to a resource, maybe it's not the right thing to do. It might be better to work out how to pass the reference to that resource around properly.</p>"},{"location":"software-engineering/DESIGN-PATTERNS/#structural-patterns","title":"Structural Patterns","text":"<ul> <li>Learn The Adapter Pattern</li> </ul> <p>It\u2019s a bridge between two different interfaces.</p> <p>Object level.</p> <ul> <li>Learn The Bridge Pattern</li> </ul> <p>Let decouple an abstraction from its implementation, letting them be modified independently.</p> <ul> <li>Learn The Composite Pattern </li> <li>Learn The Decorator Pattern</li> </ul> <p>Aggiunge dinamicamente a runtime attributi ad un oggetto. The concept of a decorator is that it adds additional attributes to an object dynamically. Open/Closed Principle: classes should be open for extension, but closed for modification.  Too much subclassing is definitely a bad thing. As you add more behaviours to a base class, you will soon find yourself dealing with maintenance nightmare, as a new class is created for each possible combination.  https://www.programmerinterview.com/index.php/design-pattern-questions/decorator-pattern-versus-inheritance/ </p> <ul> <li>Facade Pattern</li> </ul> <p>Un sistema (@Stateless o @Stateful) che raggruppa pi\u00f9 servizi (@EJB) https://dzone.com/articles/design-patterns-uncovered-1 https://www.oracle.com/technetwork/java/sessionfacade-141285.html All EJB are transactional and thread safe by default. </p> <ul> <li>Learn The Flyweight Pattern </li> <li>Learn The Proxy Pattern</li> </ul>"},{"location":"software-engineering/DESIGN-PATTERNS/#behavioral-patterns","title":"Behavioral Patterns","text":"<ul> <li>Learn The Chain of Responsibility Pattern </li> <li>Learn The Command Pattern </li> <li>Learn The Interpreter Pattern </li> <li>Learn The Iterator Pattern </li> <li>Learn The Mediator Pattern </li> <li>Learn The Memento Pattern </li> <li>Learn The Observer Pattern</li> </ul> <p>Java as built in Observer pattern: a Subject object when changing state send a message without knowing if it will be read, on the other side there could be other objects, the Observers, that get notified about the change, in a sync or async way.</p> <p>E\u2019 possibile assegnare una @Priority e un tipo all\u2019evento per differenziare i metodi in ascolto.</p> <p>Async injected events possono essere associati ad un numero minimo di threads associati</p> @Inject\u000bprivate Event\\&lt;Customer&gt; customerMessage;\u000b\u000bpublic void newCustomer(Customer c){\u000b   customerMessage.fire(c);\u000b}\u000b//---\u000bpublic void createCustomer(@Observes Customer c){\u000b  // ..\u000b} <ul> <li>Learn The State Pattern </li> <li>Learn The Strategy Pattern </li> <li>Learn The Template Method Pattern </li> <li>Learn The Visitor Pattern</li> </ul> <p>Circuit Breaker https://martinfowler.com/bliki/CircuitBreaker.html</p> <p>THE FILTER PATTERN Pre processing and post-processing of data  Mostly used in web to intercept servlet request and response to: log, compress</p> public class authFilter implements Filter{   @Override   Public void doFilter(ServletRequest sreq, ServletResponse sresp, Filter chain){        } } <p>INTERCEPTOR PATTERN AOP = Aspect Oriented Programming. Not business concerns: security..</p> <p>HandlerInterceptor is basically similar to a Servlet Filter, but in contrast to the latter it just allows custom pre-processing with the option of prohibiting the execution of the handler itself, and custom post-processing. Filters are more powerful, for example they allow for exchanging the request and response objects that are handed down the chain. Note that a filter gets configured in web.xml, a HandlerInterceptor in the application context.</p> <p>As a basic guideline, fine-grained handler-related preprocessing tasks are candidates for HandlerInterceptor implementations, especially factored-out common handler code and authorization checks. On the other hand, a Filter is well-suited for request content and view content handling, like multipart forms and GZIP compression. This typically shows when one needs to map the filter to certain content types (e.g. images), or to all requests.</p> <p></p> <p>MVC Persistence --- business (M) --- presentation (VC) --- client</p> <p>Model: Application data with logic. @Model class with getters and setter on attributes to display. Controller:  links view and model.  View: filter of the model data. JSF </p> <p>ARCHITECTURES</p> <p>DOMAIN ARCHITECTURE Hexagonal: adapter as external interfaces (messaging, db..). Inside use cases and domain model. Can be tested without touching presentation layer. Onion, Clean. Presentation can change easily thanks to decoupling. Hard to separate domain info from a standard application layer.</p> <p>JAVA code     - parenthesis parser - Stack     - creazione di oggetti da clase Factory, di tipi diversi a seconda della stringa passata al metodo pubblico     - array list:          List\\&lt;List\\&lt;String&gt;&gt; dict = new ArrayList\\&lt;&gt;();         List\\&lt;List\\&lt;String&gt;&gt; list = new ArrayList\\&lt;List\\&lt;String&gt;&gt;();</p> <p>JAVA theory     - encapsulation vs </p> <p>DB</p> <p>THREAD     is a live instance of a program, managed by the Operative system scheduler. generally multiple threads compose one process threads share memory while processes don't share address spaces     Systems with a single processor generally implement multithreading by time slicing: the central processing unit (CPU) switches between different software threads. This context switching generally happens very often and rapidly enough that users perceive the threads or tasks as running in parallel. On a multiprocessor or multi-core system, multiple threads can execute in parallel, with every processor or core executing a separate thread simultaneously;      Java thread priorities are in the range between MIN_PRIORITY (a constant of 1) and MAX_PRIORITY (a constant of 10). By default, every thread is given priority NORM_PRIORITY (a constant of 5).</p> <p>ITERATOR     move on the elements of a Collection. It let know if there are more, and to modify them, even even delete</p> <pre><code>A collection represents a group of objects, known as its elements. Some collections allow duplicate elements (Queue) and others do not (Set).\n</code></pre> <p>ABSTRACT class cannot be instantiated An abstract class is used by creating an inheriting subclass that can be instantiated.  Advantages:     Define methods which can be used by the inheriting subclass.     Define abstract methods which the inheriting subclass must implement.     Provide a common interface which allows the subclass to be interchanged with all other subclasses.</p> <p>STATIC the keyword static indicates that the particular member belongs to a type itself, rather than to an instance of that type, so it is shared between instances  It doesn\u2019t matter how many times we initialize a class</p> <pre><code> static methods are also widely used to create utility or helper classes so that they can be obtained without creating a new object of these classes.  \n If static variables require additional, multi-statement logic while initialization, then a static block can be used.  \n The most widely used approach to create SINGLETON objects is through static nested class is it doesn\u2019t require any synchronization and is easy to implement\n</code></pre> <p>FINAL     if a final variable holds a reference to an array, then the components of the array may be changed by operations on the array, but the variable will always refer to the same array.     A final class cannot be subclassed (String)     A final method cannot be overridden or hidden by subclasses     A final variable can only be initialized once, either via an initializer or an assignment statement. It does not need to be initialized at the point of declaration.      Unlike the value of a constant, the value of a final variable is not necessarily known at compile time. </p>"},{"location":"software-engineering/Docker/","title":"Docker","text":"<p>https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/</p> <ul> <li>https://docs.docker.com/install/linux/docker-ce/ubuntu/ </li> <li>https://docs.docker.com/get-started/part2/ </li> <li>where are docker images-stored/ </li> <li>docker cheatsheet info </li> <li>Manage Docker as a non-root user </li> <li> <p>sudo docker images  </p> </li> </ul> <p>sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-\\((uname \\-s)-\\)(uname -m)\" -o /usr/local/bin/docker-compose</p> <p>sudo chmod +x /usr/local/bin/docker-compose</p> <p>sudo docker ps -s sudo docker inspect ContainerID to clean them all:      docker rm `docker ps -aq`</p> <p>sudo docker info</p> <p>$ sudo docker kill $(sudo docker ps -aq)</p> <p>$ sudo docker rm $(sudo docker ps -aq)</p> <p>Minimal linux docker + autoremove $ docker run -it --rm busybox</p> <p>docker run -d -p 8080:80 --name='myApache' -v /var/www/html/:/var/www/html httpd docker exec -it myApache bash</p> <p>docker run -it busybox Ctrl+p + ctrl+q  per uscire senza terminarlo </p>"},{"location":"software-engineering/GIT/","title":"GIT","text":"<p>Forzare il merge di due repo: cd ../new-project git remote add old-project ../old-project git fetch old-project git checkout -b feature/merge-old-project git merge -S --allow-unrelated-histories old-project/master # controlla link con repo remoto git remote set-url origin https://_____ git push origin feature/merge-old-project git remote rm old-project</p> <p>Rimuovere un repo remoto git branch -a git push origin --delete test</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/","title":"LFCE - LFS211- LINUX ENGINEER","text":"<p>https://trainingportal.linuxfoundation.org/learn/course/linux-networking-and-administration-lfs211/</p> <ul> <li>ghumman/lfce: Linux Foundation Certified Exam Preparation and Practice </li> <li>LFCE Exam Study Guide (Linux Foundation Certified Engineer) </li> <li>https://learning.oreilly.com/videos/linux-foundation-certified/9780134774015/9780134774015-LFCE_01_01_00 </li> <li>LFCE: Installing Network Services and Configuring Automatic Startup at Boot - Part 1 </li> <li>Linux Journey: Home </li> <li>https://www.coursera.org/learn/real-time-cyber-threat-detection/home/welcome </li> <li>https://www.youtube.com/watch?v=D0Xob4DGbFQ</li> </ul> <p>https://www.katacoda.com/courses/ubuntu/playground</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#networking","title":"NETWORKING","text":"<p>less /etc/sysconfig/network-scripts/ifcfg-eth0</p> <p>ifdown eth0; ifup eth0</p> <p>ip a show eth0</p> <p>ip route show ip route </p> <p>nmcli device show   # NetworkManager: dettagli per network devices nmcli -f ip4.address device show enp1s0</p> <p>nmtui           # interfaccia da terminale</p> <p>se il networkmanager non gestisce connessioni allora forse lo sta facendo networkctl </p> <p>puoi verificare il manager anche tramite netplan get all network: renderer: NetworkManager version: 2</p> <p>Esempi di configurazioni si trovano in /usr/share/doc/netplan/examples/</p> <p># Change speed and mode of current enp0 interface sudo ethtool enp0s3 --change speed 1000 duplex full</p> <p>DNS systemd-resolve --status</p> <p>systemd-resolve --set-dns=192.168.178.1 --set-dns=10.34.168.6 --interface=enp0s3</p> <p>nmcli device show enp0</p> <p>https://phoenixnap.com/kb/linux-dig-command-examples dig -x 172.217.14.238      Reverse DNS dig google.com -t A +trace        Type Address, trace the request</p> <p># Ask server 8.8.4.4 the name google.com for records of type NameServer dig @8.8.4.4 google.com -t NS -c IN   </p> <p>nslookup google.com 8.8.8.8</p> <p>PING load test ping -f -s 4096 IP</p> <p>TRACEROUTE traceroute -I IP       usa ICMP per tentare bypass dei firewall</p> <p>NMAP</p> <p>ARP / TELNET telnet github.com 80</p> <p>openssl s_client -connect github.com:443</p> <p>TCPDUMP https://danielmiessler.com/study/tcpdump/</p> <p>To capture packets with tcpdump for use with wireshark, use: $ sudo tcpdump -i eth0 -s 65535 -w capture.pcap port 22</p> <p># tcpdump -nnvv -i any net 127.0.0.1 and port 4200 and not 'tcp[tcpflags] == tcp-syn'</p> <p>SERVER SIDE SS sudo ss -ltp | grep httpd</p> <p>NETSTAT sudo netstat -palute</p> <p>/etc/hosts man hosts_access</p> <ul> <li>/proc/sys/net/ipv4/ip_forward   Allows for network traffic to be forwarded from one interface to another.  </li> <li>/proc/sys/net/ipv4/conf/*/accept_redirects   Accepting Internet Control Message Protocol (ICMP) redirects from a router to find better routes. This setting has the potential to be exploited by a malicious party to redirect your traffic.  </li> <li>/proc/sys/net/ipv4/icmp_echo_ignore_all   Changing this setting will affect the host's visibility to ICMP ping packets.</li> </ul> <p>To persistently enable changes you must use the sysctl command with its configuration file /etc/sysctl.conf.</p> <p>sudo sysctl --all |grep redirect</p> <p>esempio: scrivi un log ogni volta che tentano la connessione ftp dal dominio .esempio.com hosts.deny vsftpd : 192.168.1. , .esempio.com : spawn /bin/echo  `/bin/date` access denied &gt;&gt; /var/log/vsftpd.log : deny</p> <p>NETCAT netcat -l 2000         ascolta sul server sulla 2000 netcat IP 2000      si connette</p> <p>TC Traffic Control https://linux.die.net/man/8/tc </p> <p>tc qdisc add dev lo root netem loss random 40 aggiunge una queue discilipline sul device lo tramite netEmulator che perder\u00e0 il 40% dei pacchetti</p> <p>ping localhost                      #1 sudo tcpdump -nnvvS src 127.0.0.1 -i lo       #2 sudo tcpdump -i lo -nnvvS icmp</p> <p>sudo tc qdisc show sudo tc qdisc delete lo root</p> <p>UDEV ACPI is the Advanced Configuration and Power Interface standard (Preexisting ACPI Specifications) by which the computer firmware (either the BIOS, for older machines, or its replacement, EUFI) can communicate what hardware is preinstalled in the computer to the operating system</p> <p>udevadm test /sys/class/net/enp0s3 udevadm info /sys/class/net/enp0s3</p> <p>TUN e TAP sono driver che permettono la creazione di periferiche di rete virtuali. Rispetto alle comuni periferiche (ad es. eth0) che sono controllate direttamente dalle schede di rete, i pacchetti spediti da o verso dispositivi TUN/TAP sono spediti da o verso programmi software. TUN \u00e8 in grado di simulare una periferica di rete di tipo punto-punto e lavora con pacchetti di tipo IP mentre TAP \u00e8 in grado di simulare un dispositivo Ethernet e logicamente utilizza i frame Ethernet. </p> <p>FILES /etc/hostname   hostname della macchina /etc/resolv.conf    DNS /etc/network         /etc/netplan/01..       Stesso risultato di \u2018netplan get all\u2019 /usr/share/doc/ppp/examples/interfaces</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#ifconfig","title":"IFCONFIG","text":"<p>https://www.computerhope.com/unix/uifconfi.htm</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#firewall","title":"FIREWALL","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#ssh","title":"SSH","text":"<p>pssh -H box -H node1 -H node2 \"yum install -y tmux bash-completion bash-completion-extras &amp;&amp; mandb\"</p> <p>/etc/ssh/ssh_config sudo apt install openssh-server \u2192 /etc/ssh/sshd_config grep -E \u201c^\\w\u201d /etc/ssh/sshd_config</p> <p>ssh-keygen -f $HOME/.ssh/id_rsa -N 'supersecret' -t rsa ssh-copy-id alex@IP</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#dns","title":"DNS","text":"<p>https://ns1.com/resources/dns-types-records-servers-and-queries</p> <p>host dig resolvectl query  nslookup</p> <p>DNS SERVER apt install -y bind9 resolvconf systemctl start bind9 /etc/resolv.conf /etc/systemd/resolved.conf /etc/bind/named.conf </p> <p>/etc/bind/named.conf.options options {         listen-on port 53 { any; };         allow-query     { any; };         recursion       yes; };</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#system-services","title":"SYSTEM SERVICES","text":"<p>Understanding Systemd Units and Unit Files</p> <p>Systemd has a flexible configuration architecture that uses override and drop-in directories. The sequence in which systemd processes the configuration files is predictable and extensible. The common sequence is:</p> <ul> <li>The vendor-supplied unit file in /usr/lib/systemd/\\&lt;service&gt;.service or /lib/systemd/system/\\&lt;service&gt;.service.  </li> <li>Optional or dynamically-created unit files in the /run/systemd/system/ directory.  </li> <li>Optional user-unit override files in the /etc/systemd/system/ directory.  </li> <li>Optional user drop-in files in /etc/systemd/system/\\&lt;service&gt;.d.</li> </ul> <p>man 5 systemd-system.conf When packages need to customize the configuration, they can install configuration snippets in /usr/lib/systemd/*.conf.d/. Files in /etc/ are reserved for the local administrator, who may use this logic to override the configuration files installed by vendor packages.</p> <p>ES: manually launch ftp service # /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf &amp;</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#yum","title":"YUM","text":"<p>yum provides */traceroute</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#http","title":"HTTP","text":"<p>ubuntu apache2 centos httpd</p> <p>/var/www/html   siti /var/log/apache2    access e error log</p> <p>$ grep \"^\\w\" /etc/apache2/apache2.conf DefaultRuntimeDir ${APACHE_RUN_DIR} PidFile ${APACHE_PID_FILE} Timeout 300 KeepAlive On MaxKeepAliveRequests 100 KeepAliveTimeout 5 User ${APACHE_RUN_USER} Group ${APACHE_RUN_GROUP} HostnameLookups Off ErrorLog ${APACHE_LOG_DIR}/error.log LogLevel warn IncludeOptional mods-enabled/*.load IncludeOptional mods-enabled/*.conf Include ports.conf AccessFileName .htaccess LogFormat \"%v:%p %h %l %u %t \\\"%r\\\" %&gt;s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" vhost_combined LogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined LogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %O\" common LogFormat \"%{Referer}i -&gt; %U\" referer LogFormat \"%{User-agent}i\" agent IncludeOptional conf-enabled/*.conf IncludeOptional sites-enabled/*.conf</p> <p>http://httpd.apache.org/docs/2.2/mod/mod_log_config.html#formats</p> <p>sudo apachectl configtest</p> <p>https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-apache-on-ubuntu-14-04</p> <p>sudo vim /etc/apache2/sites-enabled/000-default.conf \\&lt;Directory \"/var/www/html/get-only\"&gt; AuthType Basic         AuthName \"Restricted Content\"         AuthUserFile /etc/apache2/secure.passwords         Require valid-user \\&lt;/Directory&gt; sudo systemctl restart apache2</p> <p>https://www.ibm.com/docs/en/aspera-on-demand/3.9?topic=appendix-enable-ssl-apache</p> <p>KVM forward ports to guests VM with UFW on Linux</p> <p>Rewrite flags RewriteRule Flags - Apache HTTP Server Version 2.4 Directory directives https://httpd.apache.org/docs/2.4/mod/core.html#allowoverride</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#create-a-new-key-and-certificate-with-openssl","title":"Create a new key and certificate with openssl","text":"<p>https://www.katacoda.com/courses/ubuntu/playground</p> <p>man 1 req openssl req -x509 -newkey rsa:2048 -keyout my.key -out mycert.crt vim sites-enabled/000-default.conf cp sites-available/default-ssl.conf sites-enabled/ echo \"127.0.0.1 alex.com\" &gt;&gt; /etc/hosts curl -Ik https://alex.com HTTP/1.1 200 OK</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#mail","title":"MAIL","text":"<p>https://doc.dovecot.org/configuration_manual/ http://www.postfix.org/postconf.5.html</p> <p>/etc/postfix/main.cf </p> <p>only a few mail parameters need to be altered in /etc/postfix/main.cf. </p> <ul> <li>The domain name to use for outbound mail (myorigin).  </li> <li>The domains to receive mail for (mydestination).  </li> <li>The clients to allow relaying of mail (mynetworks).  </li> <li>The destinations to relay mail to (relay_domains).  </li> <li>The delivery method, indirect or direct (relayhost). </li> </ul> <p>The postconf command can be used to customize /etc/postfix/main.conf:</p> <p># postconf -e 'inet_interfaces = all' # postconf -e \"mynetworks_style = subnet\"</p> <p>~# vim /etc/postfix/master.cf ~# vim /etc/postfix/main.cf ~# vim /etc/aliases</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#proxy","title":"PROXY","text":"<p>https://en.wikipedia.org/wiki/Reverse_proxy</p> <p>http://www.squid-cache.org/Versions/v6/cfgman/ SquidFaq/SquidAcl - Squid Web Proxy Wiki</p> <p>https://wiki.squid-cache.org/ConfigExamples/Intercept/LinuxRedirect</p> <p>Squid can also parse and check its syntax with a built-in syntax checker: # squid -k parse</p> <p>The first match wins. Therefore, start your ACLs with the most specific options in the beginning. # grep \"^\\w\" /etc/squid/squid.conf acl localnet src 0.0.0.1-0.255.255.255    # RFC 1122 \"this\" network (LAN) acl localnet src 192.168.0.0/16      # RFC 1918 local private network (LAN)</p> <p>acl SSL_ports port 443 acl Safe_ports port 80      # http acl Safe_ports port 21      # ftp acl Safe_ports port 443     # https</p> <p>http_access deny !Safe_ports http_access deny CONNECT !SSL_ports http_access allow localhost manager http_access deny manager -------</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#nfs","title":"NFS","text":"<p># groupadd -g 42000 share # chown nfsnobody /home/export # chgrp share -R /home/export # chmod -R 2770 /home/export # usermod -aG share student # usermod -aG share root</p> <p># cat \\&lt;\\&lt;EOF &gt;&gt;/etc/exports &gt; /home/export  127.0.0.1/32(rw) 192.168.0.0/16(ro) &gt; EOF</p> <p>systemctl restart nfs-server mount 127.0.0.1:/home/export /mnt/my-nfs</p> <p>man exports</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#samba","title":"SAMBA","text":"<p># apt install samba smbclient</p> <p>man smb.conf</p> <p>cat \\&lt;\\&lt;EOF &gt;&gt;/etc/samba/smb.conf [lab13-3]   guest ok = yes   read only = yes   path = /home/export/cifs EOF</p> <p>smbclient -L localhost smbclient //localhost/lab13-3</p> <p>-- PRIVATE ACCESS EXAMPLE cat \\&lt;\\&lt;EOF &gt;&gt;/etc/samba/smb.conf [lab-private]   path = /home/export/private   valid users = alex   read only = no   public = no EOF</p> <p># chown -R alex /home/export/private/my-secret # smbpasswd -a alex # systemctl restart smbd.service # smbclient -L localhost # smbclient -U alex //localhost/lab-private smb: \\&gt; get my-secret</p> <p>-- ETC/FSTAB man systemd.mount</p> <p>127.0.0.1:/home/export/nfs /home/share/nfs nfs x-systemd.automount,x-systemd.idle-timeout=10,noauto,_netdev 0 0</p> <p>//localhost/mainexports /home/share/cifs cifs credentials=/root/smbfile,x-systemd.automount,x-systemd.idle-timeout=10,noauto,_netdev 0 0</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#security","title":"SECURITY","text":"<p>SELINUX Basic SELinux Troubleshooting in CLI</p> <p>APPARMOR https://wiki.debian.org/AppArmor/HowToUse /etc/apparmor.d apparmor_status</p> <p>PAM Framework for authentication called Pluggable Authentication Module (PAM).</p> <p>CHROOT</p> <p>https://us-cert.cisa.gov/ncas/alerts</p> <p>nmap tcpdump snort</p> <p>FIREWALL netfilter nftables</p> <p>When traffic comes to a libwrap-enabled daemon, those two files are consulted</p> <ul> <li>/etc/hosts.allow  </li> <li> <p>/etc/hosts.deny</p> </li> <li> <p>The netfilter firewall consists of tables.  </p> </li> <li>Tables consist of chains.  </li> <li>Chains have a default policy.  </li> <li>Chains consist of rules.  </li> <li> <p>Rules consist of a match criteria and a target.</p> </li> <li> <p>filter table deals with packets bound for the local machine, being routed through the machine, or packets generated by processes on the machine.   chains: forward, input, output  </p> </li> <li>NAT table for traffic creating a new network connection. Chains: prerouting, output, postrouting  </li> <li>mangle for all network packets rules: prerouting, input, output, forward, postrouting</li> </ul> <p>sudo ufw app list sudo ufw show listening          raw</p> <p>IPTABLES 7.4. Regole FORWARD e NAT</p> <p>man iptables man iptables-extensions</p> <p>iptables --list-rules       --list iptables --list INPUT --type mangle -v</p> <p>Targets: ACCEPT, DROP, REJECT </p> <p># Con drop la connessione rimane in attesa, con reject chiusa subito iptables -A INPUT --proto tcp --dport 80 --jump DROP</p> <p>iptables -A INPUT --proto tcp --dport 8080 --jump REJECT --reject-with icmp-net-prohibited</p> <p># apt install iptables-persistent # iptables-save</p> <p>To enable DNAT redirect (DMZ ecc): echo 1 &gt; /proc/sys/net/ipv4/ip_forward /etc/sysctl.conf  -----&gt; net.ipv4.ip_forward=1  # Rileggi le conf con sysctl -p /etc/sysctl.conf</p> <p>MASQUERADE This target is only valid in the nat table, in the POSTROUTING chain.  It should only be used with dynamically assigned IP (dialup) connections: if you have a static IP address, you should use the SNAT target. # iptables -t nat -A POSTROUTING -o eth1 ! -d 192.168.12.0/24 -j MASQUERADE</p> <p>Accettando i pacchetti inoltrati tramite il dispositivo IP interno, si abilita la comunicazione tra i nodi LAN; tuttavia essi non sono ancora abilitati a comunicare esternamente con Internet. Per abilitare i nodi LAN con indirizzi IP privati alla comunicazione con le reti pubbliche esterne, configurate il firewall per l'IP masquerading, il quale maschera le richieste provenienti dai nodi LAN con l'indirizzo IP dei dispositivi esterni del firewall iptables -A FORWARD -i eth1 -j ACCEPT iptables -A FORWARD -o eth1 -j ACCEPT iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</p> <p>Traffic redirect through Squid iptables -t nat -A PREROUTING -s $SQUIDIP -p tcp --dport 80 -j ACCEPT iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port $SQUIDPORT iptables -t nat -A POSTROUTING -j MASQUERADE</p> <p>LOG connections iptables -A INPUT -i lo -p tcp --dport 4200 --destination localhost -m state NEW -j LOG --log-level info --log-prefix \u201cNEW CON LOCAL \u201c</p> <p>journactl -f</p> <p>block all other traffic  # iptables -P INPUT DROP</p>"},{"location":"software-engineering/LFCE-LINUX-ENGINEER/#containers","title":"CONTAINERS","text":"<p>https://book.hacktricks.xyz/pentesting/2375-pentesting-docker</p> <p>Note sul corso</p> <p>https://trainingportal.linuxfoundation.org/learn/course/linux-networking-and-administration-lfs211/network-security/knowledge-check?page=1 no knowledge check</p>"},{"location":"software-engineering/RHCSA/","title":"RHCSA","text":"<p>Sander van Vugt, RhatCertification</p> <ul> <li>OpenRHCE/RHCE_Practice_Exam_01.rst.txt at master \u00b7 texastwister/OpenRHCE </li> <li>How To Set Up a Firewall Using FirewallD on CentOS 7 </li> <li>https://www.udemy.com/course/red-hat-system-administration-ii-rh134-sa2-rhel8 </li> <li>https://github.com/chlebik/rhcsa-practice-questions/</li> </ul>"},{"location":"software-engineering/RHCSA/#users","title":"Users","text":"<p>Mostra tutti gli utenti </p> <pre><code>**lslogins**\n</code></pre> <p>\u2018users\u2019 mostra solo quelli correntemente loggati</p> <p>w command shows all users who are logged on the system and what they are doing.</p> <p>ACL</p> <pre><code>setfacl\n\ngetfacl\n</code></pre> <p>pam_tally2</p> <p>##  Account expiration and password policies chage -l root</p> <p>## I valori di default per le nuove utenze sono in   /etc/login.defs</p>"},{"location":"software-engineering/RHCSA/#processes","title":"Processes","text":""},{"location":"software-engineering/RHCSA/#nice-level","title":"NICE level","text":"<p>La priorit\u00e0 va da -20 a 19, pi\u00f9 \u00e8 alto il numero pi\u00f9 bassa \u00e8 la priorit\u00e0.</p> <p>ps -axo pid,comm,nice |sort -n -k3</p> <pre><code>nice \\-n 5 sha1sum /dev/null\n</code></pre> <p>---</p> <p>L\u2019uguale alla fine di un argomento di -o mostra solo il risultato e non il titolo.</p> <p># ps -C rsyslogd -o cmd=</p> <p>/usr/sbin/rsyslogd -n</p> <p>To get info about threads:</p> <pre><code>      ps \\-eLf\n</code></pre> <p>To get security info:</p> <pre><code>      ps \\-eo euser,ruser,suser,fuser,f,comm,label\n</code></pre> <p>Print only the name of PID 42:</p> <pre><code>      ps \\-q 42 \\-o comm=\n</code></pre> <p>ps -C syslogd -o pid=</p>"},{"location":"software-engineering/RHCSA/#chroot","title":"CHROOT","text":"<p>A chroot jail is a way to isolate a process and its children from the rest of the system. It should only be used for processes that don't run as root, as root users can break out of the jail very easily. The idea is that you create a directory tree where you copy or link in all the system files needed for a process to run. You then use the chroot() system call to change the root directory to be at the base of this new tree and start the process running in that chroot'd environment. Since it can't actually reference paths outside the modified root, it can't perform operations (read/write etc.) maliciously on those locations.</p> <p>It is NOT a security policy. Take care of the configuration.</p> <p>Real jails can be enforced with freebsd jails. Understanding chroot Jail \u2013 The Geek Diary jailkit(8): utilities for jailing user/process - Linux man page</p> <ol> <li>Download latest lux-release rpm from    wget http://repo.iotti.biz/CentOS/7/noarch/lux-release-7-1.noarch.rpm </li> <li>Install lux-release rpm:    # rpm -Uvh lux-release*rpm  </li> <li>Install jailkit rpm package:    # yum install jailkit</li> </ol> <p>Red Hat How to set up Linux chroot jails</p>"},{"location":"software-engineering/RHCSA/#virtual-devices-lvm","title":"VIRTUAL DEVICES &amp; LVM","text":"<p>pvs     # physical volumes vgs     # volume groups lvs     # local volumes</p> <p>crea nuova partizione LVM da 100GB     fdisk /dev/sda Crea nuovo PV      pvcreate /dev/sda3      pvs Estendi il Volume Group     vgextend vg /dev/sda3 Estendi LV con i PE disponibili (vgdisplay)      lvextend -L +100G /dev/mapper/vg-lv_root Resize del disco     # resize2fs /dev/vg/lv_root</p> <p>--- # yum install -y kmod-kvdo vdo</p>"},{"location":"software-engineering/RHCSA/#selinux","title":"SELINUX","text":"<p>https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/getting-started-with-selinux_using-selinux</p> <p>The standard access policy based on the user, group, and other permissions, known as Discretionary Access Control (DAC), does not enable system administrators to create comprehensive and fine-grained security policies, such as restricting specific applications to only viewing log files.</p> <p>SELinux implements Mandatory Access Control (MAC). Every process and system resource has a special security label</p> <p>SELinux policy rules are checked after DAC rules</p> <p>SELinux contexts have several fields: user, role, type, and security level. The SELinux type information is perhaps the most important </p>"},{"location":"software-engineering/RHCSA/#tests","title":"TESTS","text":"<p>1.  Configure your Host Name, IP Address, Gateway and DNS.</p> <p>Host name: station.domain40.example.com</p> <p>/etc/sysconfig/network</p> <p>hostname=abc.com</p> <p>hostname abc.com</p> <p>IP Address:172.24.40.40/24</p> <p>Gateway172.24.40.1</p> <p>DNS:172.24.40.1</p> <p>2.  Add 3 users: harry, natasha, tom.</p> <p>The requirements: The Additional group of the two users: harry, Natasha is the admin group. The user: tom's login shell should be non-interactive.</p> <p>3. Create a catalog under /home named admins. Its respective group is requested to be the admin group. The group users could read and write, while other users are not allowed to access it. The files created by users from the same group should also be the admin group.</p> <p>4. Configure a task: plan to run echo hello command at 14:23 every day.</p> <p>5.  Find the files owned by harry, and copy it to catalog: /opt/dir</p> <p>6.  Find the rows that contain abcde from file /etc/testfile, and write it to the file/tmp/testfile, and the sequence is requested as the same as /etc/testfile.</p> <p>7. Create a 2G swap partition which take effect automatically at boot-start, and it should not affect the original swap partition.</p> <p>8. Create a user named alex, and the user id should be 1234, and the password should be alex111.</p> <p>9.  Install a FTP server, and request to anonymous download from /var/ftp/pub catalog. (it needs you to configure yum direct to the already existing file server. )</p> <p>4. Share directory for NFS</p> <p>To view the list of active zones</p> <ul> <li>A) firewall-cmd --get-active-zones  </li> <li>B) firewall-get-active-zones  </li> <li>C) firewall-active-zones  </li> <li>D) none of the above</li> </ul> <p>5. To view the list of active zones</p> <ul> <li>A)firewall-cmd --get-active-zones  </li> <li>B)firewall-get-active-zones  </li> <li>C) firewall-active-zones  </li> <li>D) none of the above</li> </ul> <p>6. Command to check selinux mode</p> <ul> <li>A) getenforce  </li> <li>B) getselinux  </li> <li>C) selinuxdisplay  </li> <li>D) none of the above</li> </ul> <p>7. Command to reduce volume group size</p> <ul> <li>A) vgreduce  </li> <li>B) vgchange  </li> <li>C) vgless  </li> <li>D) none of the above</li> </ul> <p>8. Command to create a user home directory</p> <ul> <li>A) useradd -k /dirname/username user  </li> <li>B) useradd -h /dirname/username user  </li> <li>C) useradd -d /dirname/username user  </li> <li>D) nono of above</li> </ul> <p>9. Umask value 011 for files</p> <ul> <li>A) user has rw group &amp; other have rx  </li> <li>B) all has rw permission  </li> <li>C) user has rwx group &amp; other have rx  </li> <li>D) none of the above</li> </ul> <p>10. command to extend lvm</p> <ul> <li>A) lvextend  </li> <li>B) lvmod  </li> <li>C) lvchange  </li> <li>D) none of the above</li> </ul> <p>11. Which of the following command can be used to change the user password?</p> <ul> <li>A) User can\u2019t change the password  </li> <li>B) passwd  </li> <li>C) passd  </li> <li>D) pwd</li> </ul> <p>12. The permission -rwxr-sr\u2013 represented in octal expression will be</p> <ul> <li>A) 777  </li> <li>B) 2766  </li> <li>C) 2744  </li> <li>D)2754</li> </ul> <p>13. The command \u2018disown -r\u2019</p> <ul> <li>A) removes all jobs  </li> <li>B) removes all running jobs  </li> <li>C) marks jobs to not receive SIGHUP when bash exits  </li> <li>D) marks all jobs</li> </ul> <p>14. Command to set selinux permissive mode</p> <ul> <li>A) setenforce 0  </li> <li>B) setenforce permissive  </li> <li>C) setenforce enforce  </li> <li>D) none of the above</li> </ul> <p>15. Which command can create environment variable?</p> <ul> <li>A) export  </li> <li>B) set  </li> <li>C) read  </li> <li>D) none</li> </ul> <p>16. Command to show hidden files and directories</p> <ul> <li>A) dir -a  </li> <li>B) dir -h  </li> <li>C) ls -a  </li> <li>D) ls -l</li> </ul> <p>17. The directory /media is the</p> <ul> <li>A) mount point for removable media  </li> <li>B) mount point for filesystem  </li> <li>C) both (a) and (b)  </li> <li>D) none of the mentioned</li> </ul> <p>18. Which command is used to set limits on file size A) fsize</p> <ul> <li>B) flimit  </li> <li>C) ulimit  </li> <li>D)usize</li> </ul> <p>19. Samba configuration file path</p> <ul> <li>A) /etc/samba/smb.conf  </li> <li>B) etc/smb.conf  </li> <li>C) /etc/samba.conf  </li> <li>D) none of the above</li> </ul> <p>20. Which command prints the directory stack?</p> <ul> <li>A) cd  </li> <li>B) dirs  </li> <li>C) popd  </li> <li>D) pushd</li> </ul>"},{"location":"software-engineering/sed-grep-awk/","title":"Sed grep awk","text":"<p>https://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/</p> <p>https://unix.stackexchange.com/questions/32907/what-characters-do-i-need-to-escape-when-using-sed-in-a-sh-script</p> <p>8 Powerful Awk Built-in Variables \u2013 FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</p> <p>FS is any single character or regular expression which you want to use as a input field separator. OFS is an output equivalent of awk FS variable. By default awk OFS is a single space character. RS defines a line. ORS is an Output equivalent of RS. Each record in the output will be printed with this delimiter. NR gives you the total number of records being processed or line number.  NF gives you the total number of fields in a record</p> <p>Chiude le parole cercate tra parentesi, case insensitive sed -e 's/\\bthy\\b/{&amp;}/gi'</p> <p>Inverte l\u2019ordine dei gruppi di cifre sed 's/\\([0-9]\\{4\\}\\) \\([0-9]\\{4\\} \\)\\([0-9]\\{4\\} \\)\\([0-9]\\{4\\}\\)/\\4 \\3\\2\\1/g'</p> <p>$ cat awk_avg.awk  {     avg=(\\(2+\\)3+$4)/3;  </p> <pre><code>if (avg \\&lt; 50\\) grade=\"FAIL\";  \nelse if (avg\\&gt;=50 &amp;&amp; avg\\&lt;60) grade=\"C\";  \nelse if (avg\\&gt;=60 &amp;&amp; avg\\&lt;80) grade=\"B\";  \nelse grade=\"A\";\n\nprint $0,\":\",grade;\n</code></pre> <p>} OUTPUT $ awk -f awk_avg.awk colonne.txt A 25 27 50 : FAIL B 35 37 75 : FAIL C 75 78 80 : B D 99 88 76 : A ---</p> <p>$ cat merge_lines.awk  BEGIN { evenLine = 0; } {     if ( evenLine == 0 ){         line = $0;         evenLine = 1;     }     else {         print line \";\" $0;         evenLine = 0;     } } OR  awk 'ORS=NR%2?\";\":\"\\n\"' OR paste -d';' - -</p> <p>Stampa per le righe con meno di 4 colonne  awk 'NF\\&lt;4{print \"Not all scores are available for \"$1}' colonne.txt</p> <p>GREP grep -e \"\\bthe\\b\" egrep -i \"\\bthe\\b\" # le righe che non contengono that grep -vie \"\\bthat\\b\"</p> <p>PYTHON</p> <p>regex_pattern = r\"^...\\....\\....\\....$\" # Do not delete 'r'.</p>"},{"location":"software-engineering/Azure/AZ-104/","title":"AZ-104","text":""},{"location":"software-engineering/Azure/AZ-104/#study","title":"STUDY:","text":"<p>AZ-104 Azure Administrator Study List (~40h)</p>"},{"location":"software-engineering/Azure/AZ-104/#ad","title":"AD","text":"<ul> <li>Invited accounts will stay as guests and can't become admin.</li> </ul> <p>Azure Administrator Exam Study Cram</p>"},{"location":"software-engineering/Azure/AZ-104/#regions","title":"Regions","text":"<ul> <li>A region is a collection of datacenters.</li> </ul> <p>Azure Regions</p>"},{"location":"software-engineering/Azure/AZ-104/#subscription","title":"Subscription","text":"<ul> <li>Billing boundary</li> <li>Free</li> <li>Pay-as-you-go</li> <li>Cloud Solution Partner</li> <li>Enterprise</li> <li>Student</li> <li>You can ask for an increase in subscription resource limits.</li> </ul> <p>Azure Subscriptions</p>"},{"location":"software-engineering/Azure/AZ-104/#resource-groups","title":"Resource Groups","text":"<ul> <li>Resources can be in only one resource group.</li> <li>Groups cannot be nested.</li> <li>Locks can prevent deletions or modifications.</li> </ul> <p>Azure Resource Groups</p>"},{"location":"software-engineering/Azure/AZ-104/#management-groups","title":"Management Groups","text":"<ul> <li>Above subscriptions</li> <li>Global spending budgets</li> </ul> <p>Azure Management Groups</p>"},{"location":"software-engineering/Azure/AZ-104/#tagging","title":"Tagging","text":"<ul> <li>Logical organization in taxonomy</li> </ul> <p>Azure Resource Tags</p>"},{"location":"software-engineering/Azure/AZ-104/#costs","title":"Costs","text":"<ul> <li>Differ by location, inbound/outbound traffic</li> <li>Pre-pay Azure reserved instances</li> <li>Re-use on-prem licenses</li> </ul> <p>Azure Pricing</p>"},{"location":"software-engineering/Azure/AZ-104/#azure-policies","title":"Azure Policies","text":"<ul> <li>Resource types, SKU, location, required tags, backups</li> <li>You can combine multiple policies in an INITIATIVE</li> <li>Assignable to:</li> <li>Management group</li> <li>Subscriptions</li> <li>Resource group</li> </ul> <p>Azure Policy</p>"},{"location":"software-engineering/Azure/AZ-104/#rbac","title":"RBAC","text":"<ul> <li>Bind a role definition to a user, group, or Service Principal</li> </ul> <p>Azure RBAC</p>"},{"location":"software-engineering/Azure/AZ-104/#resource-manager-arm","title":"Resource Manager (ARM)","text":"<ul> <li>Deploy, update, or delete multiple resources in coordination</li> <li>When you send a request through any of the Azure APIs, tools, or SDKs, Resource Manager receives the request.</li> <li>Overview</li> </ul> <p>Configure Azure Resources Tools</p>"},{"location":"software-engineering/Azure/AZ-104/#virtual-networking","title":"VIRTUAL NETWORKING","text":"<p>https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-faq#what-protocols-can-i-use-within-vnets https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview</p> <p>4 IPs are reserverd by Azure. Each subnet need its own address range.</p> <p>.0 : Network address .1 : Reserved by Azure for the default gateway .2,.3 : Reserved by Azure to map the Azure DNS IPs to the VNet space .255 : Network broadcast address.</p> <p>Private IP addresses: VPN gateway or ExpressRoute</p> <p>Public IPs costs around 5\u20ac per month You can buy one to expose a Load Balancer</p> <p>Dyanimc/Static IP    Virtual machine   VPN GW   App GW   LB</p> <ul> <li>Network Security Group https://learn.microsoft.com/en-us/azure/virtual-network/network-security-group-how-it-works Rules:</li> <li>Source</li> <li>Destination</li> <li> <p>Service</p> </li> <li> <p>App Security Groups group VM and Servers You can wrap the ASG with a NSG</p> </li> <li> <p>Firewall Stateful service. Hihly available and scalable. Log applications Threat filtering. Price around 10.000\u20acyear + extra GB traffic</p> </li> </ul> <p>Hub    - Spoke architecture Bastion   |         |   VM1 Firewall  | peering |   VM2 Bastion   |         |</p> <ul> <li>Azure DNS zones hosts the DNS records for a domain. Child zones are registered in the parent domain. 20 records per record set.</li> </ul> <p>Private DNS zones name resoultion for VMs in a VNET reverse DNS resolution works only in the same VNET</p> <ul> <li> <p>VPN Gateway</p> </li> <li> <p>PEERING</p> </li> </ul> <p>Global and Regional across subscription and tenants Uses Azure backbone</p> <p>Allow gateway Transit</p> <ul> <li>VPN (virtual network) GW 1 GW subnet 2 VPN GW   route or policy based. VPN/ExpressRoute. Public IP.    site-to-site (S2S/ IPSEC) and Net-to-VNet   By default Active/Standby  3 Local network GW    refers to the on-premises location 4 VPN device on-premise 5 VPN connection</li> <li> <p>UDR </p> </li> <li> <p>ExpressRoute Direct connect directly into Microsoft's global network at peering location. ExpressRoute Direct provides dual 100 Gbps or 10 Gbps connectivity, which supports Active/Active connectivity at scale. Always S2S</p> </li> <li> <p>User defined Routes route table contains routes for packages in a vnet</p> </li> </ul> <p>Private Link VS Peering ? Private Endpoint can be connected with Private Link to other resources</p> <ul> <li>LOAD BALANCER Application gateway:    Http, Https, WAF, Private (region specific), also non Azure resources Front Door:    microservice apps, HTTP HTTPS, Global, WAF, NSG Load Balancer:   TCP, UDP, private balancing between Azure resources   SKU:      Basic: no SLA     Standard: any kind of VM o VM set   Session persistance</li> </ul> <p>Traffic Manager:    based on DNS distributes traffic between global public resources.</p> <ul> <li>Network Watcher Regional service. Next HOP check. Connectivity issues. VPN diagnostics. IP flow verifier: ping + tracer.</li> </ul>"},{"location":"software-engineering/Azure/AZ-104/#storage","title":"STORAGE","text":"<p>local disk hard drives for creating a big pool on the hyperV server</p> <p>Containers     BLOB: unstructured data (img, web docs, video, audio...)     accounts have unlimited containers Tables   structured, non relational data Queues   FIFO storage for msg Files   VM hard drives   SMB + REST interface   incremental Snapshot   File Sync (extend on-prem storage):      storage sync service     prepare win server     install agent     register win server</p> <p>Containers + Files   Access Tiers:      Hot = frequent access     Cool = large amount of data not freq accessed     Archive = hours of retrieval latency     You can switch between them.   Lifecycle management rules.</p> <p>Storage Account   standard    premium blobs   premium file: high performance  file share apps   premium page blobs All data is locked by Storage Service Encryption (SSE)</p> <p>Replication: - LRS:  1 region, 3 replicas - ZRS:  1 region, 3 replicas, 3 zones - GRS:  2 regions, 6 replicas - RA-GRS - GZRS: 6 rep, 3+1 zon, 2 reg - RA-GZRS</p> <p>You should restrict network access to the St Ac after creation.</p> <p>A shared access signature (SAS) is a URI that grants restricted access to an Azure Storage blob.</p>"},{"location":"software-engineering/Azure/AZ-104/#vm","title":"VM","text":"<p>Can't change VNet anymore os disk + temp disk + data disk os and data disk reside in storage accounts Best to use SSH connection behind a VPN GW</p> <p>Availability Zones independent locations ina a region update + fault domains 99,99% SLA</p>"},{"location":"software-engineering/Azure/AZ-104/#app-services","title":"APP Services","text":"<p>.NET, Node.js, PHP, Java, Python, HTML, containers</p> <p>Deployment slots</p>"},{"location":"software-engineering/Azure/AZ-104/#aks","title":"AKS","text":"<p>Cluster autoscaler Horizontal POD autoscaler</p>"},{"location":"software-engineering/Azure/AZ-104/#azure-backup-center","title":"Azure Backup Center","text":"<p>You need a backup agent to transfer data to the vault. 1. create recovery service vault 2. download and install the agent and credential file 3. configure the backup</p> <p>Microsoft Azure Recovery Services (MARS) Agents.</p> <ul> <li>Azure backup vault  -&gt; blobs, disks, postgreSQL, AKS services</li> <li> <p>Recovery Services   -&gt; VM snaphost, Azure files, </p> </li> <li> <p>Azure backup Server -&gt; linux support, recover granularity</p> </li> </ul>"},{"location":"software-engineering/Azure/AZ-104/#azure-monitor","title":"Azure Monitor","text":"<ul> <li>apps</li> <li>VM</li> <li>Storage accounts</li> <li>containers</li> <li>networks</li> <li>DBs</li> <li>key vaults</li> </ul> <p>Log Analytics -&gt; stream to Event Hub Can create Workspace to collect data.</p>"},{"location":"software-engineering/Azure/AZ-104/#faq","title":"FAQ","text":"<ul> <li> <p>management group Several azure polices can be applied with at once with Policy INITIATIVE Az management group are a way to organize multiple subscriptions</p> </li> <li> <p>Role to modify settings on a VM Contributor</p> </li> <li>Custom role definitions</li> <li>Team member access IAM &gt; check access</li> <li>geo redundant storage VS Zone RS</li> <li>storage account global unique</li> <li>blob storage replication</li> <li>secure access for azure storage users access keys</li> <li>easiest way to implement secure storage for hundred of resources stored access policies</li> </ul> <p>Vnet gateway next hop types private dns custom domains</p>"},{"location":"software-engineering/Azure/AZ-500/","title":"AZ 500","text":""},{"location":"software-engineering/Azure/AZ-500/#az-500","title":"AZ-500","text":"<ul> <li>AZ-500 Microsoft Azure Security Technologies Study Cram +3h</li> <li>Microsoft Certified: Azure Security Engineer Associate - Certifications | Microsoft Learn</li> <li>Top Five Security Tips (youtube.com)</li> <li>Microsoft Azure Security Engineer Associate (AZ-500) Professional Certificate | Coursera ~ 101h</li> <li>Practice Assessment | Microsoft Learn</li> <li>Exam Readiness Zone | Microsoft Learn</li> <li>https://www.examtopics.com/exams/microsoft/az-500/view/</li> <li>https://learn.microsoft.com/en-us/azure/well-architected/security/</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#licenses","title":"Licenses","text":"EntraID features P1 P2 Entra Suite Portal X X RBAC X X Conditional Access X X Password Protection X X Cross-tenant user sync X X Group management X X Session lifetime management X X SharePoint limited access X X Reports X X PROTECTION Risk-based conditional access X X Device filtering conditional access X X Real-time sign-in assessment X X Real-time user assessment X X Authentication context X X Risk event investigation X X Token protection X X GOVERNANCE Automated user provisioning  to cloud and on-prem apps X X X HR-driven provisioning X X X Terms-of-use attestation X X X Basic entitlement management X X Privileged Identity management (PIM) X X VERIFIED ID Verifiable credentials issuance  and verification X X X INTERNET ACCESS X PRIVATE ACCESS X <p>Explore the Microsoft identity platform - Training | Microsoft Learn</p>"},{"location":"software-engineering/Azure/AZ-500/#entra-id","title":"ENTRA ID","text":""},{"location":"software-engineering/Azure/AZ-500/#authn","title":"AUTHN","text":"<p>Components:</p> <p>Portal, Oauth2, OIDC, MSGraph APIs, open source libraries (MSAL)\u2026</p>"},{"location":"software-engineering/Azure/AZ-500/#service-principals","title":"Service Principals","text":"<p>An application registered in EntraID gets a global unique object ID and a service principal.</p> <p>The app can be single tenant or multi-tenant.</p> <p>Object ID: scoped across the home tenant. It is like a class with static properties used as template to create the app instances through service principals.</p> <p>It defines mainly:</p> <ul> <li>How to issue tokens</li> <li>Resources available</li> <li>Actions permitted</li> </ul> <p>Service principal: An app registration will create a SP, with specific permissions (eg: delegated).</p> <ul> <li>Application: App Instance = SP single tenant representation of a global object ID.</li> <li> <p>Managed Identity: for services supporting EntraID authn. Can have permissions updates but not direct edits.     No need to manage certificates in the app.</p> </li> <li> <p>System assigned: 1 identity &lt;--&gt; 1 managed SP     If you require that each resource has its own identity, or have resources that require a unique set of permissions and want the identity to be deleted as the resource is deleted, then you should use a system-assigned identity.</p> </li> <li>User assigned:\u00a0\u00a0\u00a0\u00a0 N to N map to resources     User-assigned identities can be used by multiple resources, and their life cycles are decoupled from the resources\u2019 life cycles with which they\u2019re associated.</li> </ul> <p>Best practice recommendations for managed system identities - Managed identities for Azure resources | Microsoft Learn</p> <ul> <li>Legacy</li> </ul> <p>You can login directly against the cloud IdP or to a Passthrough authentication agent. With Pass-through Authentication, the user\u2019s password is validated against the on-premises Active Directory, ensuring a secure and seamless authentication experience.</p> <p>AADS/Entra Domain Services creates managed Domain Controllers in another VNet to sync the authentication of users coming from another IdP. It is only synced from the Main DC to the managed replicas direction.</p>"},{"location":"software-engineering/Azure/AZ-500/#sso","title":"SSO","text":""},{"location":"software-engineering/Azure/AZ-500/#kerberos","title":"Kerberos","text":"<ul> <li>Kerberos Authentication Overview | Microsoft Learn </li> <li>KDC = Key Distribution Center</li> <li>If client credentials are valid, the KDC emits a Ticket Granting Ticket (TGT).</li> <li>Before accessing a specific service, the client sends the TGT back to the KDC to receive a new ticket scoped for the target service.</li> <li>Until this new ticket expires, the client can access the target server without repeating the authentication process.</li> </ul> <p>Cons: - pass-the-ticket attack - Kerberoasting - Missing sync between servers' clocks</p>"},{"location":"software-engineering/Azure/AZ-500/#guest-users","title":"Guest Users","text":"<p>Authentication happens against their IdP (social network, external AD, mail...) while authorization happens against our service (OAuth2).</p>"},{"location":"software-engineering/Azure/AZ-500/#entraad-b2b","title":"EntraAD B2B","text":"<p>Guest users could be: - from an external Azure AD tenant - from an external Microsoft account - synced from an on-prem Domain Controller - guest users created on the EntraID host tenant</p>"},{"location":"software-engineering/Azure/AZ-500/#entraad-b2c","title":"EntraAD B2C","text":""},{"location":"software-engineering/Azure/AZ-500/#conditional-access","title":"Conditional Access:","text":"<p>Apply policies to target</p> <ul> <li>users (external, groups, roles)</li> <li>Actions (registration...)</li> <li>Apps</li> <li>Platforms</li> <li>Locations</li> </ul> <p>To require:</p> <ul> <li> <p>MFA MFA settings     Number matching prevents accidental approval by requiring the user to type in a two-digit code from the login screen to their Authenticator app.</p> <p>OATH TOTP tokens: users can have a max of 5 between hardware based tokens and authentication apps.</p> </li> <li> <p>something you know (psw)</p> </li> <li>Smt you have (usb key, mobile app...)</li> <li> <p>Smt you are (fingerprint)</p> </li> <li> <p>Allow only enrolled devices</p> </li> <li>IP filtering (named locations)</li> <li>VPN</li> <li>certificate based auth</li> <li>passkeys (FIDO2)   an MFA setup might include:<ol> <li>Something You Have: A FIDO2 security key or a mobile device with FIDO2 capabilities.</li> <li>Something You Are: Biometric verification like a fingerprint or facial recognition.</li> <li>Something You Know: A password or PIN.</li> </ol> </li> </ul> <p>To then report risky users and accesses (malicious IP, psw spray, anonymous IP...)</p>"},{"location":"software-engineering/Azure/AZ-500/#authz","title":"AUTHZ","text":""},{"location":"software-engineering/Azure/AZ-500/#oauth2","title":"OAuth2","text":"<p>is an authz method where third party apps can get authorized on behalf of a user to web hosted resources (MSGraph, Az Key Vaults...) by exchanging tokens provided by the IdP.</p> <p>The tokens are given by Az Identity and validated by MSGraph API.</p> <p>Explore Microsoft Graph - Training | Microsoft Learn</p> <p>Microsoft Graph Fundamentals - Training | Microsoft Learn</p> <p>Tokens can be - ID tokens - Access tokens: are sent in the http req as bearer tokens in the Authorization header - Refresh tokens</p> <p>In OAuth2 permissions are called scopes. - OAuth 2.0 and OpenID Connect protocols on the Microsoft identity platform - Microsoft identity platform | Microsoft Learn - Microsoft identity platform token exchange scenario with SAML and OIDC/OAuth in Microsoft Entra ID - Microsoft identity platform | Microsoft Learn - MSAL</p> <ul> <li>Golang Azure MSAL</li> </ul> <p>Permissions can be:</p> <ul> <li>Delegated: a user must be present to sign-in</li> <li>App-only: background services apps (daemons)</li> </ul> <p>Consent type:</p> <ul> <li>Static: need to know all the resources in advance</li> <li>Dynamic: you can increment the scope access over time</li> <li>Admin</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#user-management","title":"User management","text":""},{"location":"software-engineering/Azure/AZ-500/#administrative-units","title":"Administrative Units","text":"<p>Administrative units restrict permissions in a role to any portion of your organization that you define (geographical, business unit...), if you assign a role to a user that is not a member of an administrative unit, the scope of the role is the entire tenant.</p> <p>You can assign the user to an administrative unit, group, or Microsoft Entra role when the account is created. You can assign the user to up to 20 groups or roles.</p> <p>A.U. can't be nested. Entra ID Governance can't manage A.U.</p>"},{"location":"software-engineering/Azure/AZ-500/#users","title":"Users","text":"<p>Global Admins and Auth Admins can create and delete users (also admin), B2B users and B2C users. User Administrator can't delete other admins. Deleted users are soft deleted for 30 days.</p> <p>Licenses: depending on user location there should be available Free, P1 and P2 licenses. Licenses could be also assigned to a group and inherited by their users, a user has to be removed from the group to have his license retired. If the user is instead synced from an on-premise AD it will be soft deleted.</p> <p>External Identities</p> <p>B2B collaboration is a feature within Microsoft Entra External ID that lets you invite guest users to collaborate with your organization.</p> <p>The partner uses their own identity management solution, so there's no external administrative overhead for your organization.</p>"},{"location":"software-engineering/Azure/AZ-500/#groups","title":"Groups","text":"<p>Members can include: users, service principals, groups, devices.</p> <p>Options:</p> <ul> <li>AD Roles can be assigned</li> <li> <p>Membership:</p> </li> <li> <p>Assigned</p> </li> <li>Dynamic users membership (query rules)</li> <li> <p>Dynamic device</p> </li> <li> <p>Name, Description</p> </li> <li>Owners</li> </ul> <p>Microsoft 365 Groups: share access to calendar, Teams channels, SharePoint sites...</p>"},{"location":"software-engineering/Azure/AZ-500/#roles","title":"Roles","text":"<p>RBAC can give specific permissions to some user or group to a given scope like a management group, a resource group, a resource or an entire subscription.</p> <p>Policies</p> <ul> <li>Tracking compliance</li> <li>Offers remediations</li> <li>Track Events</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#global-administrator","title":"Global Administrator","text":"<p>Suggested to have less than 5. Can revoke MFA and edit all other roles.</p>"},{"location":"software-engineering/Azure/AZ-500/#resources","title":"Resources","text":"<p>Subscription &gt; Management group &gt; resource group &gt; resource &gt; resource internal scope.</p> <p>Can be locked.</p> <p>I can deploy a template of resources through a BLUEPRINT.</p>"},{"location":"software-engineering/Azure/AZ-500/#pim-privileged-identity-management","title":"PIM (Privileged Identity Management)","text":"<p>Give the roles just in time for a limited amount of time.</p>"},{"location":"software-engineering/Azure/AZ-500/#hybrid-cloud","title":"Hybrid Cloud","text":"<ul> <li>psw hash sync</li> <li>Passthrough auth: needs agents installation</li> <li>Federation Hybrid cloud authn decision tree</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#azure-connect","title":"Azure Connect","text":"<p>On-prem application to sync AD accounts to the cloud.</p> <p>Filtering on identities to sync (computers, users, groups..) psw hash sync: uses on-prem AD as authentication authority Psw writeback: reset your psw in the cloud conditioned by on-prem policies Federation features</p> <p>Psw policy doesn't apply to synchronized accounts from on-prem using Connect. Implement password hash synchronization with Microsoft Entra Connect Sync - Microsoft Entra ID | Microsoft Learn</p>"},{"location":"software-engineering/Azure/AZ-500/#entra-cloud-sync","title":"Entra Cloud Sync","text":"<p>Cloud architecture: one or more agents installed in on-prem apps while the configuration is kept in the cloud, no need to connect AD forests to network. No need to manage upgrades.</p>"},{"location":"software-engineering/Azure/AZ-500/#entra-domain-service","title":"Entra Domain Service","text":"<p>Two Windows domain controller server are deployed in the Azure cloud to create a new domain connected to the legacy AD. The synch is one-way from the legacy on-prem and EntraID to the cloud managed replica. HA through multiple DC replicas. It is useful for giving access to legacy on-prem apps (LDAP, NTLM, Kerberos) through SSO and to give those accounts a fine grained policy protection.</p> <p>If an account is locked out in EntraDS it is not locked out in tits original source directory (EntraID or on-prem).</p> <p>NTLM - requires an application server to connect to a domain controller to authenticate every client computer or service. - NTLM does not enable clients to verify a server's identity or enable one server to verify the identity of another. NTLM authentication was designed for a network environment in which servers were assumed to be genuine. The Kerberos protocol makes no such assumption.</p> <ul> <li>LDAP</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#identity-protection","title":"IDENTITY PROTECTION","text":"<p>Tool to identify and remediate suspicious login activities - password policies - geospatial login checks - MFA - Suspicious behaviour detection - self-remediation workflows</p> <p>Sign-in (suggested at medium level) and user risks (suggested at high level) can be remediated. - self-remediation workflow - reset password when SSPR is impossible     - user admin can't reset psw in case of an incident - dismiss risk - close detection Depending on the risk the user can be unblocked by resetting their psw or logging in from a known location.</p> <p>Smart lockout: - by default 10 different failed attempts are allowed on public cloud - customizations require P1 license - Use much higher thresholds for on-prem lockout polices - even admins can't unlock a lockout user</p>"},{"location":"software-engineering/Azure/AZ-500/#risk-event-detection","title":"Risk Event Detection","text":"<p>Risk policies can be at low, medium or high level for:</p> <ul> <li>User (legacy): related to identity risks as leaked credentials or anomalous activity.</li> <li>Sign-in (legacy):   if a member of the target user group has a risk detected during sign-in, a remediation policy could be automatically triggered like asking for MFA.   Detects impossible travel, malware or anonymous IPs...</li> <li>MFA registration: can be used in combination of both user and sign-in risk policy</li> <li>Conditional Access (\ud83d\udcb8 P2 license):<ul> <li>Foundation: require MFA, compliant device...</li> <li>Zero Trust: no browser session, no unknown apps...</li> <li>Remote work</li> <li>Protect administrators</li> <li>Emerging threats: require anti-phishing MFA for admins It is a second-layer access protection, not used for DoS attacks or similar. Policies cover these signals:<ul> <li>user/group</li> <li>cloud app</li> <li>client app</li> <li>device status (eg: domain joined)</li> <li>IP</li> <li>sign-in risk</li> </ul> </li> </ul> </li> </ul> <p>Access Reviews, available in PIM and Enterprise Applications, could be needed when:</p> <ul> <li>periodical audits</li> <li>guest users</li> <li>change of group members or scope</li> <li>users not in EntraID</li> <li>policy exceptions</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#privileged-identity-management-pim","title":"Privileged Identity Management (PIM)","text":"<ul> <li>P2 license</li> <li>temporary role assignments for users or groups from 1 to 24 hours</li> <li>monitor and alert on changes</li> <li>can require stroger authentication proof like MFA or Conditional Access Policy</li> <li>user role: it provides a list of built-in user roles to be enabled if the current user is eligible, plus the custom roles defined by the User Access Administrator</li> <li>resource access: there are resources specific roles like Owner, Reader or Contributor</li> <li>group membership: a Global Admin or Privileged Role Admin can add as members users to EntraID security groups or Microsoft365 groups. Max 500 groups definitions.</li> </ul> <p>Zero Trust model: Assume breach and implement least privilege principle together with enforcing authentication between all the entities communicating in the internal network.</p> <ul> <li>InTune checks for device configuration</li> <li>Entra ID checks for user and groups</li> <li>Access polices for device health Plan a project with a pilot group to test PIM settings JIT (just in time) access for 28 built-in roles</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#microsoft-identity-management","title":"Microsoft Identity Management","text":"<ul> <li>manages users and groups access to on-prem apps</li> <li>differences from Entra ID: both focuses on identity and access management, including the provisioning of users in sync with external HR apps, but MIM has a broader scope over the identity lifecycle management including on-premise.</li> <li>passwordless MFA (FIDO 2)</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#azure-policies","title":"Azure Policies","text":"<p>When you enable Defender for Cloud, the Microsoft cloud security benchmark (MCSB) becomes the default initiative.</p> <p>Azure Defender initiative: - group of policies - There also regulatory compliance initiatives useful to detect non-conformities with legal security frameworks like ISO27001 (Regulatory Compliance details for ISO 27001:2013 - Azure Policy | Microsoft Learn) eg: Policy definitions for Azure Kubernetes Service</p> <p>To run workloads that are compliant with GDPR, custom initiatives should be to be created. GDPR compliance initiatives are not yet available in Azure. Azure has existing initiatives for ISO, PCI DSS 3.2.1, and FedRAMP High.</p> <p>Types: - built-in - custom - static for regulatory compliances</p> <p>Modes: - all (default) - indexed: only resources supporting tags and locations</p> <p>Some built-in policies: - App slots should use a managed identity - App Configuration should disable public network access - APIs should use encrypted protocols - Allowed VM size SKU - Configure container registries to disable anonymous authentication - Add a tag to resources</p> <p>Effects in evaluation order: - Disabled - Append - Modify - Deny - Audit - Manual - AuditIfNotExists - DenyAction</p> <p>Possible states of a resources in a policy scope: - compliant - non compliant - exempted     - Mitigated: The exemption is granted because the policy intent is met through another method.     - Waiver: The exemption is granted because the non-compliance state of the resource is temporarily accepted. - conflict - unknown</p> <p>Defender for Cloud protects workloads in Azure, AWS, GitHub, and Azure DevOps.  Oracle Cloud and Alibaba Cloud are unsupported by Defender for Cloud.</p> <p>The Subscription Owner role is the only role that has permissions to create and assign custom security initiatives in Defender for Cloud.</p> <p>Defender External Attack Surface Management (EASM) applies the crawling technology of Microsoft to discover assets that are related to your known online infrastructure and actively scans these assets to discover new connections over time.</p>"},{"location":"software-engineering/Azure/AZ-500/#shared-responsibility-model","title":"Shared Responsibility Model","text":""},{"location":"software-engineering/Azure/AZ-500/#management-groups","title":"Management groups","text":"<ul> <li>Management Groups:<ul> <li>Root Management Group: The top-level container for all resources within an Azure Active Directory (Azure AD) tenant.</li> <li>Child Management Groups: Can be created within the root group or other child groups to further organize resources based on business units, departments, or projects.</li> <li>Apply policies at the management group level to enforce consistent standards across multiple subscriptions.</li> </ul> </li> <li>Subscriptions:<ul> <li>Contain a collection of resource groups and resources.</li> <li>Can be assigned to one or more management groups.</li> </ul> </li> <li>Resource Groups:<ul> <li>A logical container for related Azure resources.</li> <li>Can be assigned to one subscription.</li> </ul> </li> <li>Resources:<ul> <li>Individual Azure services, such as virtual machines, storage accounts, and databases.</li> <li>Belong to a specific resource group.</li> </ul> </li> </ul> <p>RBAC</p> <p>Locks When you apply a lock at a parent scope, all resources within that scope inherit the same lock. Even resources you add later inherit the same parent lock. The most restrictive lock in the inheritance takes precedence.</p>"},{"location":"software-engineering/Azure/AZ-500/#networking-platform-protection","title":"NETWORKING (Platform Protection)","text":""},{"location":"software-engineering/Azure/AZ-500/#perimeter-defense","title":"Perimeter defense","text":"<p>In addition to a firewall, microsegmentation could be needed through an software defined networks (SDN), software-defined data centers (SSDC) and zero trust policies.</p> <p>Virtual Network Appliances located on the perimeter: - public IP - Application gateway (regional L7 LB) - Firewall (WAF, L4 packet filtering, stateful NGFW, proxy) - Front Door (HTTPS LB) - TCP/IP Load balancer</p>"},{"location":"software-engineering/Azure/AZ-500/#firewall","title":"FIREWALL","text":"<p>L4: network rules L7: app rules (FQDN, TLS inspection, URL filtering, IDPR = Intrusion Detection Protection System) High availability by default. Limit FQDN outbound connections. OSNAT Firewall manager Create Application rules to operate at at the application layer (FQDN filtering).</p> <p>ROUTING</p> <p>Az automatically creates routing tables for each new subnet adding system default routes.</p> <p>You don't need to define route tables or gateways for Azure to route traffic between subnets.</p> <ul> <li>Parent VNet prefix</li> <li>0.0.0.0/0 Internet</li> <li>10.0.0.0/8 None</li> <li>192.168/16, 172.16/12 None</li> </ul> <p>UDR</p> <p>When you create a route table and associate it to a subnet, the table's routes are combined with the subnet's default routes. If there are conflicting route assignments, user-defined routes override the default routes.</p> <ul> <li>Virtual appliance: private VM inet, private LB IP</li> <li>VNet VPN GW</li> <li>VNet</li> <li>None</li> <li>Internet</li> </ul> <p>Diagnose an Azure virtual machine routing problem | Microsoft Learn</p>"},{"location":"software-engineering/Azure/AZ-500/#expressroute","title":"ExpressRoute","text":"<p>Dedicated physical connection to an Azure tenant</p> <p>Dot1Q VLAN QinQ</p>"},{"location":"software-engineering/Azure/AZ-500/#vpn","title":"VPN","text":"<p>IpSec/K encrypted connection.</p> <ul> <li>P2P</li> <li>Point to site</li> <li>Site to site</li> </ul> <p>Can be established also inside an ExpressRoute connection.</p> <p>Can have DDOS Protection</p> <ul> <li>Attack analytics</li> <li>Support</li> <li>Multilayered protection (if there is also a WAF)</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#ddos-protection","title":"DDOS Protection","text":"<ul> <li>Azure DDoS Protection is designed\u00a0for services that are deployed in a virtual network.</li> <li>Azure DDoS Protection features | Microsoft Learn</li> <li>Compare pricing between Azure DDoS Protection tiers | Microsoft Learn</li> </ul> <p>Real time protection and mitigation (L4 to L7 monitoring). Telemetry logging. Blocks: volumetric (UDP...), protocol (SYN flood, reflection...) and app layer attacks (SQL inj...).</p>"},{"location":"software-engineering/Azure/AZ-500/#load-balancer","title":"LOAD BALANCER","text":"<p>L4 (TCP/UDP), REGIONAL</p> <p>can be internal or external (get assigned a Public IP)</p>"},{"location":"software-engineering/Azure/AZ-500/#application-gateway","title":"APPLICATION GATEWAY","text":"<p>L7, REGIONAL: redirection, rewrite, https, Can have on top a WAF (OWASP threats)</p> <ol> <li>Connection comes from the internet</li> <li>App GW frontend public IP is reached trough the DNS</li> <li>HTTP/HTTPS Listener: The gateway listens for incoming HTTP or HTTPS traffic. This listener is configured to handle specific types of requests.</li> <li>Rule: Based on the listener's configuration, rules are applied to direct traffic. These rules determine how requests are routed to the backend.</li> <li>Backend Pool: The destination for the traffic. This pool can include:<ul> <li>Virtual Machines (VMs): Individual virtual servers.</li> <li>Virtual Machine Scale Sets (VMSS): Groups of identical VMs that can automatically scale.</li> <li>App Services: Managed services for hosting web applications.</li> </ul> </li> <li>Encryption: The diagram highlights that traffic between the application servers and the application gateway is encrypted, ensuring secure communication.<ol> <li>AES-256 (Advanced Encryption Standard): This is a symmetric encryption algorithm widely used for its high level of security and efficiency. \u00a0</li> <li>RSA-4096: This is an asymmetric encryption algorithm used for secure data transmission. It uses a pair of keys (public and private) and is known for its robustness, especially with a 4096-bit key</li> <li>TLS 1.3 (Transport Layer Security): This protocol provides secure communication over a computer network. TLS 1.3 is the latest version and offers improved security and performance over its predecessors\u00a0</li> </ol> </li> </ol> <p>A traditional load balancer directs traffic based on where it's coming from and where it's supposed to go, much like how a post office sorts mail based on the address on the envelope. However, Azure Application Gateway besides knowing where the traffic comes from and where it's going, it can also direct traffic based on what's being asked for in the request (APIs). - back end health check - autoscaling - session affinity - WAF</p>"},{"location":"software-engineering/Azure/AZ-500/#az-front-door","title":"AZ FRONT DOOR","text":"<p>L7,\u00a0 GLOBAL</p> <p>Uses anycast to manage the connection as close as possible to the client ( the lowest number of BGP network hops) with hundreds of PoPs (point of\u00a0 presence) CDN connected through a high speed WAN.</p> <p>Key Features:</p> <ol> <li>Global Load Balancing: Routes traffic to the closest and healthiest backend based on latency, ensuring optimal performance for users worldwide\u00a0</li> <li>Content Delivery Network (CDN): Provides caching and acceleration for static and dynamic content, reducing load times\u00a0</li> <li>Web Application Firewall (WAF): Offers built-in protection against common web threats like SQL injection and cross-site scripting\u00a0</li> <li>SSL Offloading: Terminates SSL/TLS connections at the edge, reducing the load on backend servers\u00a0</li> <li>Multi-Region Failover: Ensures high availability by automatically routing traffic to another region if the primary region fails\u00a0</li> </ol> <p>App must only allow user access through Azure Front Door: Traffic from Front Door to the app originates from a well-known set of IP ranges defined in the\u00a0<code>AzureFrontDoor.Backend</code>\u00a0service tag. This includes every Front Door. To ensure traffic only originates from your specific instance, you will need to further filter the incoming requests based on the unique HTTP header that Front Door sends.</p>"},{"location":"software-engineering/Azure/AZ-500/#nsg-network-security-group-l4","title":"NSG \u2013 Network Security Group (L4)","text":"<p>Allows us to group network resources through tags instead of caring of IPs.</p> <p>SUBNET or NIC specific.</p> <p>Network Security Groups (NSGs)\u00a0can be applied to a single VM, subnet, or network adapter. only one NSG\u00a0can be associated with each of these resources.</p> <ul> <li>Service endpoint: identifies an internal subnet to be allowed to call other internal services by allowing it in the target service firewall</li> <li>Private endpoint: identifies a specific service instance inside a private subnet. Requires also a DNS configuration in order to be found by other internal services.</li> <li>Through a resource manager deployment model they can be assigned at NIC level, such that the same VM would have different security rules assigned to its network interfaces.</li> <li>Limit of 100 NSG per region. Max 200 rules per NSG. This limits can be increased by raising a support ticket.</li> <li>https://learn.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview#default-security-rules</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#asg-application-security-group","title":"ASG - Application Security Group","text":"<p>https://learn.microsoft.com/en-us/azure/virtual-network/application-security-groups</p> <p>It lets you focus on the business logic instead of networking details like IP addresses, allowing you to group virtual machines and define network security policies based on those groups (eg: AKS nodepool). All network interfaces assigned to an ASG should be in the same VNET.</p>"},{"location":"software-engineering/Azure/AZ-500/#service-endpoints","title":"Service Endpoints","text":"<p>Virtual Network service endpoint provides secure and direct connectivity to Azure services over an optimized route over the Azure backbone network. Useful to identify internal resources that would have a non unique private IP while communicating through private VNets. Also it doesn't require a NAT Gateway.</p>"},{"location":"software-engineering/Azure/AZ-500/#host","title":"HOST","text":"<p>Azure update manager</p> <p>Automatic VM patching</p> <p>TPM</p> <p>Secure boot</p> <p>Anti malware, local firewall</p> <p>Azure disk encryption (Win BitLocker/Linux DM-crypt)</p> <p>Bastion (managed jump-box)</p>"},{"location":"software-engineering/Azure/AZ-500/#containers","title":"CONTAINERS","text":"<p>AKS</p>"},{"location":"software-engineering/Azure/AZ-500/#key-vault","title":"KEY VAULT","text":"<p>Stores:</p> <ul> <li>Keys</li> <li>Secrets</li> <li>certificates</li> </ul> <p>Permissions:</p> <ul> <li>Access policies</li> <li>RBAC: granular</li> </ul> <p>Event Grid can capture key rotation events from Key Vault and trigger an Azure function to generate a new key in SQL and store it in Key Vault. A web app can get events from Event Grid to create and rotate a key, but it costs more than using a Azure Functions. Log Analytics cannot trigger a function.</p>"},{"location":"software-engineering/Azure/AZ-500/#storage-account","title":"STORAGE ACCOUNT","text":"<p>Enabling storage keys you can access containers/blobs/queue/files through SAS signed by the storage account access private key.</p>"},{"location":"software-engineering/Azure/AZ-500/#db","title":"DB","text":"<p>Firewall</p> <p>Encryption</p> <ul> <li>At rest</li> <li>In transit: always encrypted (deterministic or randomized)</li> </ul> <p>Dynamic Data Masking: hiding data without encryption.</p> <p>Classification.</p>"},{"location":"software-engineering/Azure/AZ-500/#az-monitor","title":"Az MONITOR","text":"<p>To collect logs I need first to create Diagnostic Settings, where I can collect also metrics, EntraID events</p> <p>Login dates Location of access Apps used</p>"},{"location":"software-engineering/Azure/AZ-500/#perimeter-security-in-azure","title":"Perimeter Security in Azure","text":""},{"location":"software-engineering/Azure/AZ-500/#1-zero-trust-security-model","title":"1. Zero Trust Security Model","text":"<p>Definition: A security approach where no entity (user, device, or application) is trusted by default. Verification is required every time a request is made.</p> <p>Key Principle: \"Never trust, always verify.\"</p> <ul> <li>Access is granted at access time based on identity and policy evaluation.</li> <li>Avoids reliance on network location (IP, subnet, etc.).</li> <li>Strong identity verification, least privilege access, and micro-segmentation.</li> </ul> <p>\ud83d\udd0e Use in Azure: Azure implements Zero Trust through Azure Active Directory (AAD), Conditional Access Policies, Microsoft Defender for Cloud, and Azure Policy.</p> <pre><code>flowchart TD\n    User[User / Device] --&gt; |Request Access| PolicyEngine[Policy Evaluation]\n    PolicyEngine --&gt; |Verified?| App[Target Application / Resource]\n    PolicyEngine -.-&gt; |Deny| Blocked[Access Denied]</code></pre>"},{"location":"software-engineering/Azure/AZ-500/#2-thin-clients","title":"2. Thin Clients","text":"<p>Definition: A lightweight computer that relies on a server to perform most processing tasks.</p> <ul> <li>Minimal or no local data storage.</li> <li>All applications and processing occur on the server.</li> <li>Enhances security and simplifies desktop management.</li> </ul> <p>\ud83d\udd0e Use in Azure: Implemented using Azure Virtual Desktop (AVD) with thin clients accessing centralized sessions.</p>"},{"location":"software-engineering/Azure/AZ-500/#3-private-ip-addressing-in-azure","title":"3. Private IP Addressing in Azure","text":"<p>Private IPs allow resources within an Azure Virtual Network (VNet) to communicate securely without exposure to the internet.</p> <ul> <li>Non-routable (RFC 1918 compliant).</li> <li>Used for internal communication between VMs in the same or peered VNets.</li> <li>Allocated dynamically or statically from the VNet\u2019s address space.</li> <li>IPs are associated with NICs via Azure Resource Manager (ARM) configurations, not manually or directly by the admin. For load balancers, IPs are assigned to frontend configurations, not directly to the NIC.</li> <li>Azure reserves the first four and last IPs in each subnet (e.g., .0, .1, .2, .3, and .255 in a /24).</li> </ul> <p>\ud83d\udd0e Tip: Private IPs are the default addressing method inside Azure VNets. Public IPs are required only for external communication.</p> IP Range CIDR Number of IPs Common Use 10.0.0.0 \u2013 10.255.255.255 10.0.0.0/8 ~16.7 million Large enterprise networks 172.16.0.0 \u2013 172.31.255.255 172.16.0.0/12 ~1 million Medium-sized organizations 192.168.0.0 \u2013 192.168.255.255 192.168.0.0/16 ~65,000 Home/small office networks"},{"location":"software-engineering/Azure/AZ-500/#4-azure-ddos-protection-standard","title":"4. Azure DDoS Protection Standard","text":"<p>Purpose: Automatically mitigates distributed denial of service (DDoS) attacks.</p> <p>By examining network traffic patterns and looking for any irregularities that could point to a DDoS assault, Azure DDoS Protection Standard operates. To build a baseline of typical traffic behavior, it employs traffic profiling and machine learning techniques. A suspicious alert is raised for any traffic that deviates from this baseline.</p> <ul> <li>Monitors network traffic to build a baseline of normal behavior.</li> <li>Uses machine learning to detect anomalies.</li> <li>Automatically initiates mitigation strategies like traffic throttling, SYN cookies, and rate limiting.</li> </ul> <p>\ud83d\udd0e Benefits:</p> <ul> <li>Seamless integration with Azure resources.</li> <li>Automatic attack mitigation.</li> <li>Alerts and telemetry via Azure Monitor.</li> </ul> <pre><code>graph LR\n    Internet --&gt; DDoSFilter[DDoS Protection]\n    DDoSFilter --&gt; AzureInfra[Azure Network Infrastructure]\n    DDoSFilter -.-&gt; Blocked[Blocked Malicious Traffic]</code></pre>"},{"location":"software-engineering/Azure/AZ-500/#5-azure-firewall-rule-types","title":"5. Azure Firewall Rule Types","text":"<p>Azure Firewall is a cloud-native, stateful firewall-as-a-service.</p>"},{"location":"software-engineering/Azure/AZ-500/#rule-types","title":"\ud83d\udd12 Rule Types:","text":"<ul> <li>Application Rules: Control outbound HTTP/S traffic based on FQDNs.</li> <li>Network Rules: Allow/deny traffic based on source/destination IP, ports, and protocols.</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#example","title":"\ud83e\udde0 Example:","text":"<p>To allow HTTP (port 80) and block SSH (port 22) to Marketing VMs:</p> <ul> <li>Create an Application Rule to allow HTTP.</li> <li>SSH traffic is already denied by default rules.</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#6-azure-firewall-manager","title":"6. Azure Firewall Manager","text":"<p>Purpose: Centralized management for Azure Firewall policies across regions/subscriptions.</p> <ul> <li>Unified visibility and policy enforcement.</li> <li>Consistency across multiple firewalls.</li> <li>Integration with Secure Virtual Hub in Azure Virtual WAN.</li> </ul> <p>\ud83d\udd0e Best for: Large enterprises with many VNets and regional workloads.</p>"},{"location":"software-engineering/Azure/AZ-500/#7-azure-expressroute","title":"7. Azure ExpressRoute","text":"<p>Definition: A private, dedicated connection between on-premises infrastructure and Azure.</p> <ul> <li>Bypasses the public internet for secure, low-latency communications.</li> <li>Supported via IP VPN (MPLS) or Ethernet connections.</li> <li>Offers layer 2 and layer 3 connectivity options.</li> </ul> <p>\ud83d\udd0e Use Case: Required for highly sensitive workloads needing deterministic performance and isolation.</p>"},{"location":"software-engineering/Azure/AZ-500/#8-vpn-gateway","title":"8. VPN Gateway","text":"<p>Azure VPN Gateway allows encrypted communication over public networks.</p> <ul> <li>Site-to-site VPNs (on-prem to Azure).</li> <li>VNet-to-VNet VPNs (intra-Azure region).</li> <li>Supports IKEv2 and IPsec protocols.</li> </ul> <pre><code>graph TD\n    OnPrem[On-Prem Network] --&gt; |IPsec Tunnel| AzureVNet[Azure VNet Gateway]\n    AzureVNet --&gt; AzureVMs[Virtual Machines]</code></pre> <p>\ud83d\udd0e Note: VPNs provide cost-effective connectivity, but ExpressRoute is preferred for higher throughput or compliance-sensitive scenarios.</p>"},{"location":"software-engineering/Azure/AZ-500/#9-network-virtual-appliance-nva","title":"9. Network Virtual Appliance (NVA)","text":"<p>Definition: A VM-based appliance offering advanced networking capabilities like IDS/IPS, WAF, or custom routing.</p> <ul> <li>Performs deep packet inspection.</li> <li>Controls inbound and outbound traffic.</li> <li>Useful when built-in services like Azure Firewall don\u2019t meet specific requirements.</li> </ul> <p>\ud83d\udd0e Common NVAs: Palo Alto VM-Series, Cisco ASA, Fortinet FortiGate.</p>"},{"location":"software-engineering/Azure/AZ-500/#10-vpn-with-forced-tunneling","title":"10. VPN with Forced Tunneling","text":"<p>Forced Tunneling: Routes all Azure VNet traffic destined for the internet through on-premises via a VPN connection.</p> <ul> <li>Enforce centralized security inspection.</li> <li>Ensure logging and compliance.</li> <li>Directs outbound traffic via on-prem proxy or firewall.</li> </ul> <pre><code>graph TD\n    AzureVM[Azure VMs] --&gt; VPNGateway[VPN Gateway]\n    VPNGateway --&gt; OnPremFirewall[On-Prem Firewall / Proxy]\n    OnPremFirewall --&gt; Internet</code></pre> <p>\ud83d\udd0e Configuration Tips:</p> <ul> <li>Requires custom user-defined routes (UDRs).</li> <li>Use BGP if dynamic routing is needed.</li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#application-security","title":"Application Security","text":"<p>Microsoft identity platform documentation | Microsoft Learn)</p>"},{"location":"software-engineering/Azure/AZ-500/#application-security-in-azure","title":"\u2705 Application Security in Azure","text":"<p>You can integrate a web app only to a dedicated subnet of a virtual network that does not have any connected resources. The subnet can have service endpoints, but subnet delegation should either not be configured or must be configured to the\u00a0<code>Microsoft.Web/serverFarms</code>\u00a0service.</p>"},{"location":"software-engineering/Azure/AZ-500/#1-purpose-of-application-security","title":"\ud83d\udd10 1. Purpose of Application Security","text":"<ul> <li> <p>Application security helps prevent unauthorized access, data exfiltration, and malicious activities.</p> </li> <li> <p>It is critical for applications that process or store sensitive or regulated data (e.g., personal identifiers, financial records).</p> </li> <li> <p>Core security practices:</p> <ul> <li> <p>Authentication: Verifying user or app identity (e.g., Azure AD, MSAL).</p> </li> <li> <p>Authorization: Granting access based on roles or scopes.</p> </li> <li> <p>Encryption: Data at rest (Azure Storage, SQL) and in transit (TLS).</p> </li> <li> <p>Input validation &amp; secure coding: Preventing injection attacks.</p> </li> <li> <p>Least privilege: Minimize permissions and access scope.</p> </li> </ul> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#2-risk-classification","title":"\ud83d\udee1\ufe0f 2. Risk Classification","text":"<ul> <li> <p>Apps are classified based on data sensitivity and regulatory exposure:</p> <ul> <li>Regulated: Handles PII, financial data, or health records.</li> </ul> </li> <li> <p>Examples of applicable compliance frameworks:</p> <ul> <li> <p>PCI DSS \u2013 Payment data</p> </li> <li> <p>GDPR \u2013 EU personal data</p> </li> <li> <p>HIPAA \u2013 US healthcare data</p> </li> <li> <p>ISO/IEC 27001, FedRAMP, CCPA, etc.</p> </li> </ul> </li> <li> <p>Classification affects logging, encryption, access policies, and retention.</p> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#3-msal-java-platform-compatibility","title":"\ud83d\udcf1 3. MSAL Java Platform Compatibility","text":"<ul> <li> <p>MSAL for Java is optimized for desktop/server-side apps, not mobile.</p> </li> <li> <p>For Android, use MSAL for Android.</p> </li> <li> <p>For iOS, use MSAL for iOS (Swift/Objective-C).</p> </li> <li> <p>For cross-platform mobile apps (e.g., React Native, Xamarin):</p> <ul> <li>Use MSAL.js (for SPAs) or MSAL.NET (for Xamarin).</li> </ul> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#4-authentication-protocol","title":"\ud83d\udd04 4. Authentication Protocol","text":"<ul> <li> <p>Microsoft Identity Platform supports:</p> <ul> <li> <p>OAuth 2.0 \u2013 Authorization framework</p> </li> <li> <p>OpenID Connect (OIDC) \u2013 Built on top of OAuth 2.0 for authentication</p> </li> </ul> </li> <li> <p>Key concepts:</p> <ul> <li> <p>Access Token \u2013 Grants API access.</p> </li> <li> <p>ID Token \u2013 Provides identity information.</p> </li> <li> <p>Refresh Token \u2013 Used to obtain new tokens silently.</p> </li> </ul> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#5-token-selection-for-spas","title":"\ud83e\uddfe 5. Token Selection for SPAs","text":"<ul> <li> <p>For Single-Page Applications (SPAs):</p> <ul> <li> <p>Use ID Tokens for identifying the user after login.</p> </li> <li> <p>Use Access Tokens for calling backend APIs.</p> </li> </ul> </li> <li> <p>SPAs must use the OAuth 2.0 Authorization Code Flow with PKCE for improved security (instead of implicit flow).</p> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#6-oauth-20-authorization-code-grant-flow","title":"\ud83e\udde9 6. OAuth 2.0 Authorization Code Grant Flow","text":"<ul> <li> <p>Used by web apps and SPAs to securely obtain tokens.</p> </li> <li> <p>Flow:</p> <ol> <li> <p>User logs in through Azure AD.</p> </li> <li> <p>Azure AD returns an Authorization Code to the redirect URI.</p> </li> <li> <p>App sends the code to the token endpoint to retrieve tokens.</p> </li> </ol> </li> <li> <p>Benefits:</p> <ul> <li> <p>Tokens are not exposed in browser URLs.</p> </li> <li> <p>Enhanced security with PKCE (Proof Key for Code Exchange).</p> </li> </ul> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#7-azure-ad-app-registration-for-single-tenant-apps","title":"\ud83e\udded 7. Azure AD App Registration for Single-Tenant Apps","text":"<ul> <li> <p>During app registration, choose:</p> <p>Accounts in this organizational directory only (Default Directory only - Single tenant)</p> </li> <li> <p>Ensures app access is restricted to users in the same Azure AD tenant.</p> </li> <li> <p>Use for internal line-of-business (LOB) applications.</p> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#8-client-credentials-grant-flow","title":"\ud83d\udd10 8. Client Credentials Grant Flow","text":"<ul> <li> <p>Suitable for daemon apps, automation, or backend services.</p> </li> <li> <p>Characteristics:</p> <ul> <li> <p>No user interaction or UI.</p> </li> <li> <p>Authenticated via Client ID and Client Secret or Certificate.</p> </li> <li> <p>Used to obtain an Access Token to call APIs on behalf of the app (not a user).</p> </li> </ul> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#9-noninteractive-apps-authentication","title":"\ud83e\udd16 9. Noninteractive Apps Authentication","text":"<ul> <li> <p>Examples: CI/CD pipelines, scheduled jobs, microservices.</p> </li> <li> <p>Authentication method:</p> <ul> <li> <p>Confidential client credentials (Client ID + Secret/Certificate).</p> </li> <li> <p>No interactive login, no MFA, no delegated permissions.</p> </li> </ul> </li> <li> <p>Must request application permissions instead of delegated ones.</p> </li> </ul>"},{"location":"software-engineering/Azure/AZ-500/#10-developer-and-admin-responsibilities","title":"\ud83d\udee0\ufe0f 10. Developer and Admin Responsibilities","text":"Role Responsibilities Developer - Register the application in Azure AD- Configure Redirect URIs- Generate client secrets or upload certificates Admin - Assign API permissions (delegated or application)- Grant admin consent for organization-wide permissions <ul> <li> <p>Additional tasks may include:</p> <ul> <li> <p>Setting conditional access policies</p> </li> <li> <p>Managing token lifetimes and scopes</p> </li> <li> <p>Monitoring via Azure AD sign-in logs</p> </li> </ul> </li> </ul>"},{"location":"software-engineering/devops/CI_CD%20Architecture/","title":"CI CD Architecture","text":"<ol> <li>Pull Request  </li> <li>Commit and push a new feature  </li> <li>Deployment in staging  </li> <li>Test  </li> <li>Close PR and merge to main  </li> <li>Deployment in production</li> </ol>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#1-pr","title":"1. PR","text":"<p>The team agrees that a change has to be done to the app so a Pull Request is opened. This should be chained to the creation of a new branch from the main, let\u2019s call it branch \u201c#1\u201d</p> <p>Tools:</p> <ul> <li>Jira to manage PR  </li> <li>Git: for version control</li> </ul>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#2-commit-and-push","title":"2. Commit and push","text":"<p>The Java app \u201cfoo#1\u201d starts to be developed on a temporary namespace on Kubernetes thanks to direct access that developers have to a dedicated \u201cstaging\u201d cluster, here they can manage only resources inside specific namespaces. Only Argo CD and Jenkins can delete and create namespaces.</p> <p>For every git commit multiple actions are triggered on the client:</p> <ul> <li>a maven pom will perform: static code analysis, security test, unit test  </li> <li>git commit message formatting</li> </ul> <p>Server side:</p> <ul> <li>docker container packaging  </li> <li>docker container push to a registry (docker push)  </li> <li>Argo CD will detect changes in the repo automatically deploying the new version of the feature app#1 on a dedicated K8s namespace.</li> </ul> <p>Tools:</p> <ul> <li>precommit:   </li> <li>git hooks </li> <li>docker scan (beta!)  </li> <li>Static code analysis: PMD / Semgrep </li> <li>ARGO CD</li> </ul> <p>Docs:</p> <ul> <li>Jenkinsfile to build and deploy a docker image</li> </ul>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#3-jenkins-staging-pipeline","title":"3 Jenkins Staging pipeline","text":"<p>A pipeline should be hooked by the push (or the pull request) to let Jenkins set the environment for ArgoCD, in order to let ArgoCD know the new branch name which will be the feature name and the temporary namespace name.</p> <p>Also it will be run integration tests.</p> <p>Tools:</p> <p>Docs:</p> <ul> <li>Environments Based On Pull Requests (PRs): Using Argo CD To Apply GitOps Principles On Previews</li> </ul>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#4-debugging-in-a-sync-environment","title":"4 Debugging in a sync environment","text":"<p>Now that the branch and the K8s namespace are keeped in sync by ArgoCD, the developer can focus only on debugging the new feature until all tests are satisfied.</p>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#5-code-review-and-closing-the-pull-request","title":"5 Code review and closing the pull request","text":""},{"location":"software-engineering/devops/CI_CD%20Architecture/#6-deploy-in-production","title":"6. Deploy in production","text":"<p>A Jenkins pipeline will detect the push on the master branch, so it will wake up, do some integration test and deploy in production.</p>"},{"location":"software-engineering/devops/CI_CD%20Architecture/#faq","title":"FAQ:","text":""},{"location":"software-engineering/devops/CI_CD%20Architecture/#one-or-more-jenkins-pipeline","title":"One or more Jenkins pipeline?","text":""},{"location":"software-engineering/devops/CI_CD%20Architecture/#should-developers-have-rights-over-namespace-creationdeletion","title":"Should developers have rights over namespace creation/deletion?","text":""},{"location":"software-engineering/devops/CI_CD%20Architecture/#when-should-i-start-the-argocd-configuration","title":"When should I start the ArgoCD configuration?","text":""},{"location":"software-engineering/distributed-systems/AKS/","title":"AKS","text":"<p>Import a new AKS cluster in powershell</p> <ul> <li>https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3#winget</li> <li>https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-portal?tabs=azure-powershell#connect-to-the-cluster</li> </ul> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force az login Connect-AzAccount Import-AzAksCredential -ResourceGroupName aff-experiments -Name aks-test kubectl config list-context</p> <p>choco install starship</p> <p>kubectl completion powershell &gt;&gt; $PROFILE Invoke-Expression (&amp;starship init powershell) &gt;&gt; $PROFILE</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES%20APIS%20PROGRAMMING/","title":"KUBERNETES APIS PROGRAMMING","text":"<p>Kubernetes-API in Kubernetes | ANOTE.DEV The Kubernetes API | Kubernetes Kubernetes API Reference Docs</p> <p>kubectl get --raw /apis/discovery.k8s.io/v1 |jq '.' |less kubectl get --raw /apis/apps/v1 |jq '.resources' |less kubectl get --raw /apis/apps/v1/deployments |jq '.items[]' |less</p> <p>kubectl get --raw /api/v1/nodes |jq '.items' |less kubectl get --raw /api/v1/namespaces |jq '.items[].metadata.name' |less</p> <p>kubectl api-versions</p> <p>2018 Introducing client-go version 6 | Kubernetes</p> <p>Understanding the Kubernetes Resource Model and Controller Pattern Writing a Kubernetes Controller | Rawkode Live - YouTube</p> <p>Tutorial: Building CronJob - The Kubebuilder Book</p> <p>Dynamic Admission Control | Kubernetes</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES%20APIS%20PROGRAMMING/#code-pkg","title":"Code PKG","text":"<p>clientgo</p> <ul> <li>Scheme  a registry to map (serialize) go type from apis (Group Version Kind)   </li> <li>Informers in memory cache store syncing every 30 s   You get a Resource from a shared informer as a read only cache entry, so you need to map it (deepCopy) to an Object before modification  </li> <li>listers  </li> <li>watchers  </li> <li>workqueue package - k8s.io/client-go/util/workqueue - Go Packages</li> </ul> <p>Runtime Object runtime package - k8s.io/apimachinery/pkg/runtime - Go Packages encode the type of an API to a Schema</p> <p>RestMapping meta package - k8s.io/apimachinery/pkg/api/meta - Go Packages</p> <p>OpenAPI-Specification/3.1.0.md at main \u00b7 OAI/OpenAPI-Specification (github.com)</p> <p>kubernetes/sample-apiserver: Reference implementation of an apiserver for a custom Kubernetes API. (github.com)</p> <p>Controller Kubernetes Deep Dive: Code Generation for CustomResources (redhat.com) kubernetes/sample-controller: Repository for sample controller. Complements sample-apiserver (github.com)</p> <p>_____________________________________________________</p> <p>KUBEBUILDER</p> <p>- batch instead of batch.tutorial..? https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/internal/controller/cronjob_controller.go#L79</p> <p>- Why to import multiple loggers? controller: \"sigs.k8s.io/controller-runtime/pkg/log\" main: \"sigs.k8s.io/controller-runtime/pkg/log/zap\"</p> <p>zap is used to customize and flag the logging interface provided by logr, so you'll need to import both libraries in main, while zap or klog should be enough in a project module https://sdk.operatorframework.io/docs/building-operators/golang/references/logging/</p> <p>_____________________________________________________</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES%20APIS%20PROGRAMMING/#sig-meetings","title":"SIG meetings","text":"<p>SIG API Machinery Meetings - YouTube</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES%20APIS%20PROGRAMMING/#real-implementations","title":"Real implementations","text":"<p>MongoDB Community Kubernetes Operator Go Operator Tutorial | Operator SDK (operatorframework.io)</p> <p>Questions Why /api/v1 and /apis/apps/v1   </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/","title":"KUBERNETES CKA CKS","text":"<ul> <li>CKAD Certified Kubernetes Application Developer (CKAD) </li> <li>CKAD  https://learning.oreilly.com/videos/certified-kubernetes-application/9780136677628 </li> <li>kelseyhightower/kubernetes-the-hard-way: Bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts. </li> <li>CKAD Certified Kubernetes Application Developer (CKAD) Prep Course </li> <li>Tasks </li> <li>https://kubernetes.io/docs/reference/kubectl/cheatsheet/ </li> <li>hobby-kube/guide: Kubernetes clusters for the hobbyist. con TERRAFORM  </li> <li> <p>Devops-exercises https://github.com/bregman-arie/devops-exercises</p> </li> <li> <p>Appunti Docker: https://docs.google.com/document/d/1QLveehlnIJWqA9KXELP_wgvbCJJq9diPsQC9brj-0HE/edit</p> </li> <li> <p>Getting Started With Managed Kubernetes Day-2 Operations</p> </li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#repo-per-esercitazioni","title":"REPO PER ESERCITAZIONI","text":"<p>CKA</p> <ul> <li>https://github.com/tuxerrante/CKA-practice-exercises </li> <li>https://github.com/stretchcloud/cka-lab-practice </li> <li>https://github.com/chadmcrowell/CKA-Exercises </li> <li>https://github.com/kimdoanh89/CKA-exercises</li> </ul> <p>CKAD</p> <ul> <li>https://github.com/dgkanatsios/CKAD-exercises </li> <li>https://github.com/bmuschko/ckad-prep</li> </ul> <p>https://kodekloud.com/courses/kubernetes-certification-course/lectures/6743640</p> <p>https://kodekloud.com//courses/certified-kubernetes-administrator-with-practice-tests/lectures/9808147</p> <p>Be fast with Kubectl 1.19 (CKS|CKA|CKAD) | FAUN</p> <p>Creare risorse velocemente: Cat &gt; nome.yml Copia dalla documentazione \u201cpod overview\u201d To copy and paste limited amounts of text (1\u22122 lines) please use      For Windows: Ctrl+Insert to copy and Shift+Insert to paste. For Linux: select text for copy and middle button for paste (or both left and right  </p> <p>Vi nome.yml customizza</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#installazione","title":"INSTALLAZIONE","text":"<ul> <li>https://kubernetes.io/docs/setup/learning-environment/minikube/#installation </li> <li>Creating a cluster with kubeadm</li> </ul> <p>KUBEADM https://github.com/tuxerrante/kubernetes-utils/tree/main/local-install/multipass</p> <p>Per usare il driver KVM https://minikube.sigs.k8s.io/docs/reference/drivers/kvm2/ # yum install qemu-kvm libvirt libvirt-python libguestfs-tools virt-install virt-host-validate</p> <p>grep -E --color 'vmx|svm' /proc/cpuinfo</p> <p>Altrimenti Docker https://docs.docker.com/engine/install/centos/ sudo yum install docker-ce docker-ce-cli containerd.io --nobest     minikube config set driver docker</p> <p>cat \\&lt;\\&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg EOF</p> <p>dnf install -y kubectl</p> <p># install minikube echo downloading minikube, check version curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</p> <p>chmod +x minikube # mv minikube /usr/local/bin</p> <p>echo at this point, reboot your Fedora Workstation.  curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#avvio","title":"AVVIO","text":"<p>https://kubernetes.io/docs/setup/learning-environment/minikube/#managing-your-cluster</p> <p>$ minikube start --memory 4096  --dry-run kubectl get all --all-namespaces</p> <p>ip address show docker0 kubectl cluster info</p> <p>autocomplete echo 'source \\&lt;(kubectl completion bash)' &gt;&gt;~/.bashrc</p> <p>export MINIKUBE_ACTIVE_DOCKERD=\"minikube\" Oppure     minikube docker-env</p> <p>minikube stop</p> <p>Basic Commands:   create        Create a resource from a file or from stdin. expose        Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service run               Run a particular image on the cluster set               Set specific features on objects</p> <p>explain           Documentation of resources get           Display one or many resources edit              Edit a resource on the server delete        Delete resources by filenames, stdin, resources and names, or by resources and label selector</p> <p>Deploy Commands:   rollout       Manage the rollout of a resource   scale         Set a new size for a Deployment, ReplicaSet or Replication Controller   autoscale     Auto-scale a Deployment, ReplicaSet, or ReplicationController</p> <p>Cluster Management Commands:   certificate   Modify certificate resources.   cluster-info  Display cluster info   top           Display Resource (CPU/Memory/Storage) usage.   cordon        Mark node as unschedulable   uncordon      Mark node as schedulable   drain         Drain node in preparation for maintenance   taint         Update the taints on one or more nodes</p> <p>Troubleshooting and Debugging Commands:   describe      Show details of a specific resource or group of resources   logs          Print the logs for a container in a pod   attach        Attach to a running container   exec          Execute a command in a container   port-forward  Forward one or more local ports to a pod   proxy         Run a proxy to the Kubernetes API server   cp            Copy files and directories to and from containers.   auth          Inspect authorization</p> <p>Advanced Commands:   diff          Diff live version against would-be applied version   apply         Apply a configuration to a resource by filename or stdin   patch         Update field(s) of a resource using strategic merge patch   replace       Replace a resource by filename or stdin   wait          Experimental: Wait for a specific condition on one or many resources.   convert       Convert config files between different API versions   kustomize     Build a kustomization target from a directory or a remote url.</p> <p>Settings Commands:   label         Update the labels on a resource   annotate      Update the annotations on a resource   completion    Output shell completion code for the specified shell (bash or zsh)</p> <p></p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#cluster-info","title":"CLUSTER INFO","text":"<p>kubectl cluster-info |head -n1 |egrep -o \"([0-9]*\\.){3}[0-9]+\" 172.17.0.14</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#scheduler","title":"SCHEDULER","text":"<p>The scheduler decides where to put the pod, Kubelet generated that pod on the node</p> sudo less /etc/kubernetes/manifests/kube-scheduler.yaml"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#kubelet","title":"KUBELET","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#pods","title":"PODS","text":"<p>The containers are incapsulated in pods. </p> kubectl run nginx --image=nginx --port=80 --expose=true --dry-run=client --output yaml kubectl run echo --image=gcr.io/google-containers/echoserver:1.10 kubectl get pods -o wide\u000b\u000bTo create a YAML (declarative config)\u000bexplain \u000bapi-resources\u000bapi-version \u000b\u000bK delete pod X --grace-period=0 --force\u000b\u000bk describe pods grep -C 10 \"Image:\"\u000b\u000b k get po --sort-by=.metadata.name\u000b\u000bK describe pods\u000b Li descrive tutti"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#deployment","title":"DEPLOYMENT","text":"<p>kubectl create deployment nginx --image=nginx:alpine --dry-run --output=yaml</p> <p>kubectl create deployment nginx --image=nginx:alpine</p> <p>kubectl expose deployment nginx --port=80 --type=NodePort</p> <p>kubectl exec nginx-86c57db685-jq796 -- hostname -i</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#context","title":"CONTEXT","text":"<p>k config use-context ferrari_dev</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#nodes","title":"NODES","text":"<p>k describe nodes | grep -i \"cpu \"</p> <p>kubectl describe nodes |grep -A 2 -e \"^\\\\s*cpu.*%\"   cpu                                                     250m (12%)    33500m (1675%)   memory                                                  2232Mi (15%)  2974Mi (20%)   ephemeral-storage                                       0 (0%)        0 (0%) --   cpu                                                     270m (13%)    33500m (1675%)   memory                                                  2754Mi (18%)  3486Mi (23%)   ephemeral-storage                                       0 (0%)        0 (0%)</p> <p>alias k_util='kubectl get nodes | grep node | awk '\\''{print $1}'\\'' | xargs -I {} sh -c '\\''echo   {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '\\'''</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#services","title":"SERVICES","text":"<ul> <li>Cluster-ip </li> <li>Node-port </li> <li>Load balancer </li> <li>External name</li> </ul> <p>https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types</p> <p>You can also use Ingress to expose your Service. Ingress is not a Service type, but it acts as the entry point for your cluster. It lets you consolidate your routing rules into a single resource as it can expose multiple services under the same IP address</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#cluster-ip","title":"CLUSTER-IP","text":"<p>A Service receives a Virtual IP address, known as its ClusterIP. This Virtual IP address is used for communicating with the Service and is accessible only from within the cluster. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#node-port","title":"NODE PORT","text":"<p>in addition to a ClusterIP, a high-port, dynamically picked from the default range 30000-32767, is mapped to the respective Service, from all the worker nodes. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#load-balancer","title":"LOAD BALANCER","text":"<ul> <li>NodePort and ClusterIP are automatically created, and the external load balancer will route to them  </li> <li>The Service is exposed at a static port on each worker node  </li> <li>The Service is exposed externally using the underlying cloud provider's load balancer feature.</li> </ul> <p>Oracle Load Balancing</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#external-ip","title":"EXTERNAL IP","text":"<p>A Service can be mapped to an ExternalIP address if it can route to one or more of the worker nodes. Traffic that is ingressed into the cluster with the ExternalIP (as destination IP) on the Service port, gets routed to one of the Service endpoints.</p> <p>apiVersion: v1 kind: Service metadata: name: my-service spec: selector: app: MyApp ports:     - name: http protocol: TCP port: 80 targetPort: 9376 externalIPs:     - 80.11.12.10</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#external-name","title":"EXTERNAL NAME","text":"<p>Services of type ExternalName map a Service to a DNS name, not to a typical selector such as my-service or cassandra. You specify these Services with the spec.externalName parameter. Please note that ExternalIPs are not managed by Kubernetes. The cluster administrator has to configure the routing which maps the ExternalIP address to one of the nodes.</p> <p>apiVersion: v1 kind: Service metadata: name: my-service namespace: prod spec: type: ExternalName externalName: my.database.example.com</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#ingress","title":"INGRESS","text":"<p>To manage access to multiple application Services from the external world, administrators can configure a reverse proxy - an ingress, and define rules that target specific Services within the cluster. </p> <p>An API object that manages external access to the services in a cluster, typically HTTP. Ingress may provide load balancing, SSL termination and name-based virtual hosting.</p> <p>decouple the routing rules from the application and centralize the rules management, we can then update our application without worrying about its external access.</p> <ul> <li>TLS (Transport Layer Security)  </li> <li>Name-based virtual hosting   </li> <li>Fanout routing  </li> <li>Load Balancing  </li> <li>Custom rules.</li> </ul> <p>it merely accepts the definitions of traffic routing rules. The ingress is fulfilled by an Ingress Controller, which is a reverse proxy responsible for traffic routing based on rules defined in the Ingress resource. </p> <p>KONG INGRESS CONTROLLER Getting started with the Kubernetes Ingress Controller - v1.1.x Kong/kubernetes-ingress-controller: Kong for Kubernetes: the official Ingress Controller for Kubernetes. Can you expose your services with an API gateway in Kubernetes?</p> <p>| alias k=kubectl #### Crea tutte le risorse del controller Kong (namespace, service, ingress ecc..) kubectl create -f https://bit.ly/k4k8s #### Salva IP alla quale \u00e8 accessibile il servizio kong (load balancer) dall\u2019esterno: export PROXY_IP=\\((kubectl get service \\-n kong kong-proxy \\--no-headers \\--output=custom-columns=:.spec.clusterIP) \\#\\#\\#\\# CREA SERVIZIO E DEPLOYMENT PER IL CONTAINER ECHO kubectl apply \\-f https://bit.ly/echo-service \\#\\#\\#\\#\\# CREATE AN INGRESS RULE FOR THE API 1.0 OF THE ECHO APP echo \" apiVersion: extensions/v1beta1 kind: Ingress metadata:   name: demo   annotations:     kubernetes.io/ingress.class: kong spec:   rules:   \\- http:       paths:       \\- path: /api/1.0         backend:           serviceName: echo           servicePort: 80 \" | kubectl apply \\-f \\- \\#\\#\\#\\#\\#\\# APPLY A FAKE V2 VERSION OF THE SAME APP \"ECHO\" echo \" apiVersion: v1 kind: Service metadata:   labels:     app: echo-v2   name: echo-v2 spec:   ports:   \\- port: 8080     name: high     protocol: TCP     targetPort: 8080   \\- port: 80     name: low     protocol: TCP     targetPort: 8080   selector:     app: echo-v2 \\--- apiVersion: apps/v1 kind: Deployment metadata:   labels:     app: echo-v2   name: echo-v2 spec:   replicas: 1   selector:     matchLabels:       app: echo-v2   template:     metadata:       labels:         app: echo-v2     spec:       containers:       \\- image: gcr.io/kubernetes-e2e-test-images/echoserver:2.2                  name: echo-v2                  ports:         \\- containerPort: 8080                 env:           \\- name: NODE\\_NAME             valueFrom:               fieldRef:                 fieldPath: spec.nodeName           \\- name: POD\\_NAME             valueFrom:               fieldRef:                 fieldPath: metadata.name           \\- name: POD\\_NAMESPACE             valueFrom:               fieldRef:                 fieldPath: metadata.namespace           \\- name: POD\\_IP             valueFrom:               fieldRef:                 fieldPath: status.podIP         resources: {} \" | kubectl apply \\-f \\- \\#\\#\\# UPDATE AN INGRESS RULE FOR THE API 2.0 OF THE ECHO APP echo \" apiVersion: extensions/v1beta1 kind: Ingress metadata:   name: demo   annotations:     kubernetes.io/ingress.class: kong spec:   rules:   \\- http:       paths:       \\- path: /api/1.0         backend:           serviceName: echo           servicePort: 80              \\- path: /api/2.0         backend:           serviceName: echo-v2           servicePort: 80        \" | kubectl apply \\-f \\- curl \\--insecure \\-i \\--stderr \\- http://\\){PROXY_IP}/api/1.0 |grep pod curl --insecure -i --stderr - http://\\({PROXY\\_IP}/api/2.0 |grep pod \\#        pod name:       echo-v2-9b78d55f7-b4rcz \\#        pod namespace:  default \\#        pod IP: 172.18.0.6 \\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# \\#\\#\\#\\#\\# NINJA LEVEL \\==\\&gt; remove the api version before sending it to the container \\#\\#\\#\\#\\# https://docs.konghq.com/kubernetes-ingress-controller/1.1.x/guides/using-rewrites/\\#rewriting-the-path kubectl patch ingress demo \\-p '{\"metadata\":{\"annotations\":{\"konghq.com/strip-path\":\"true\"}}}' curl \\--insecure \\--stderr \\- http://\\){PROXY_IP}/api/2.0/login |grep \"Request Information\" -A3 #Request Information: #        client_address=172.18.0.4 #        method=GET #        real path=/           | | :---- |</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#kube-proxy","title":"KUBE PROXY","text":"<p>watches the API server on the master node for the addition, updates, and removal of Services and endpoints. on each node, kube-proxy configures iptables rules to capture the traffic for its ClusterIP and forwards it to one of the Service's endpoints. </p> $ kubectl get daemonsets -n kube-system \u000bNAME         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE\u000bkube-proxy   1         1         1       1            1           kubernetes.io/os=linux   6d3h"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#service-discovery","title":"SERVICE DISCOVERY","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#environment-variables","title":"Environment Variables","text":"<p>As soon as the Pod starts on any worker node, the kubelet daemon running on that node adds a set of environment variables in the Pod for all active Services.  the Pods will not have the environment variables set for Services which are created after the Pods are created</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#dns","title":"DNS","text":"<p>Kubernetes has an add-on for DNS (CoreDNS), which creates a DNS record for each Service and its format is my-svc.my-namespace.svc.cluster.local. Services within the same Namespace find other Services just by their names. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#volumes","title":"VOLUMES","text":"<p>A Volume is essentially a mount point on the container's file system backed by a storage medium. The storage medium, content and access mode are determined by the Volume Type. </p> <p>A Volume is linked to a Pod and can be shared among the containers of that Pod. Although the Volume has the same life span as the Pod, meaning that it is deleted together with the Pod, the Volume outlives the containers of the Pod - this allows data to be preserved across container restarts. </p> <ul> <li>emptyDir   An empty Volume is created for the Pod as soon as it is scheduled on the worker node. The Volume's life is tightly coupled with the Pod. If the Pod is terminated, the content of emptyDir is deleted forever.    </li> <li>hostPath   With the hostPath Volume Type, we can share a directory between the host and the Pod. If the Pod is terminated, the content of the Volume is still available on the host.  </li> <li>secret   With the secret Volume Type, we can pass sensitive information, such as passwords, to Pods.  </li> <li>configMap   With configMap objects, we can provide configuration data, or shell commands and arguments into a Pod.  </li> <li>persistentVolumeClaim   We can attach a PersistentVolume to a Pod using a persistentVolumeClaim. </li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#persistent-volume","title":"PERSISTENT VOLUME","text":"<p>A Persistent Volume is a storage abstraction backed by several storage technologies, which could be local to the host where the Pod is deployed with its application container(s), network attached storage, cloud storage, or a distributed storage solution. A Persistent Volume is statically provisioned by the cluster administrator. </p> <p>PersistentVolumes can be dynamically provisioned based on the StorageClass resource. A StorageClass contains pre-defined provisioners and parameters to create a PersistentVolume. Using PersistentVolumeClaims, a user sends the request for dynamic PV creation, which gets wired to the StorageClass resource.</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#a-persistentvolumeclaim-pvc","title":"A PersistentVolumeClaim (PVC)","text":"<p>is a request for storage by a user. Users request for PersistentVolume resources based on type, access mode, and size. There are three access modes:</p> <ul> <li>ReadWriteOnce (read-write by a single node),   </li> <li>ReadOnlyMany (read-only by many nodes), and   </li> <li>ReadWriteMany (read-write by many nodes). </li> </ul> <p>Once a suitable PersistentVolume is found, it is bound to a PersistentVolumeClaim.  </p> <p>Once a user finishes its work, the attached PersistentVolumes can be released.  The underlying PersistentVolumes can then be</p> <ul> <li>reclaimed (for an admin to verify and/or aggregate data),   </li> <li>deleted (both data and volume are deleted), or   </li> <li>recycled for future usage (only data is deleted), </li> </ul> <p>based on the configured persistentVolumeReclaimPolicy property. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#dynamic-volume-provisioning","title":"Dynamic Volume Provisioning","text":"<p>Dynamic volume provisioning allows storage volumes to be created on-demand. Without dynamic provisioning, cluster administrators have to manually make calls to their cloud or storage provider to create new storage volumes, and then create PersistentVolume objects to represent them in Kubernetes.</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#config-maps","title":"CONFIG MAPS","text":"<p>ConfigMaps allow us to decouple the configuration details from the container image.  Using ConfigMaps, we pass configuration data as key-value pairs, which are consumed by Pods or any other system components and controllers, in the form of </p> <ul> <li>environment variables,   </li> <li>sets of commands and arguments, or   </li> <li>volumes. </li> </ul> <p>We can create ConfigMaps from </p> <ul> <li>literal values,   </li> <li>from configuration files,   </li> <li>from one or more files or directories.</li> </ul> <p>... containers: - name: myapp-full-container image: myapp envFrom: - configMapRef: name: full-config-map \u2026</p> <p>Load configMap as Volume ... containers: - name: myapp-vol-container image: myapp volumeMounts: - name: config-volume mountPath: /etc/config volumes: - name: config-volume configMap: name: vol-config-map \u2026</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#secrets","title":"SECRETS","text":"<p>the Secret data is stored as plain text inside etcd, therefore administrators must limit access to the API server and etcd.  However, Secret data can be encrypted at rest while it is stored in etcd, but this feature needs to be enabled at the API server level. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#quotas","title":"QUOTAS","text":"<ul> <li>Compute Resource Quota   We can limit the total sum of compute resources (CPU, memory, etc.) that can be requested in a given Namespace.  </li> <li>Storage Resource Quota     We can limit the total sum of storage resources (PersistentVolumeClaims, requests.storage, etc.) that can be requested.  </li> <li>Object Count Quota     We can restrict the number of objects of a given type (pods, ConfigMaps, PersistentVolumeClaims, ReplicationControllers, Services, Secrets, etc.).</li> </ul> <p>An additional resource that helps limit resources allocation to pods and containers in a namespace, is the LimitRange, used in conjunction with the ResourceQuota API resource. A LimitRange can:</p> <ul> <li>Set compute resources usage limits per Pod or Container in a namespace.  </li> <li>Set storage request limits per PersistentVolumeClaim in a namespace.  </li> <li>Set a request to limit ratio for a resource in a namespace.  </li> <li>Set default requests and limits and automatically inject them into Containers' environments at runtime.</li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#autoscaling","title":"AUTOSCALING","text":"<ul> <li>Horizontal Pod Autoscaler (HPA)   HPA is an algorithm-based controller API resource which automatically adjusts the number of replicas in a ReplicaSet, Deployment or Replication Controller based on CPU utilization.  </li> <li>Vertical Pod Autoscaler (VPA)     VPA automatically sets Container resource requirements (CPU and memory) in a Pod and dynamically adjusts them in runtime, based on historical utilization data, current resource availability and real-time events.  </li> <li>Cluster Autoscaler     Cluster Autoscaler automatically re-sizes the Kubernetes cluster when there are insufficient resources available for new Pods expecting to be scheduled or when there are underutilized nodes in the cluster.</li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#job","title":"JOB","text":"<p>creates one or more Pods to perform a given task.  The Job object takes the responsibility of Pod failures.  It makes sure that the given task is completed successfully. Once the task is complete, all the Pods have terminated automatically. Job configuration options include:</p> <ul> <li>parallelism - to set the number of pods allowed to run in parallel;  </li> <li>completions - to set the number of expected completions;  </li> <li>activeDeadlineSeconds - to set the duration of the Job;  </li> <li>backoffLimit - to set the number of retries before Job is marked as failed;  </li> <li>ttlSecondsAfterFinished - to delay the clean up of the finished Jobs.</li> </ul> <p>we can also perform Jobs at scheduled times/dates with CronJobs,</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#daemonset","title":"DAEMONSET","text":"<p>In cases when we need to collect monitoring data from all nodes, or to run a storage daemon on all nodes, then we need a specific type of Pod running on all nodes at all times. A DaemonSet is the object that allows us to do just that.  The kube-proxy agent running as a Pod on every single node in the cluster is managed by a DaemonSet.  </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#statefulset","title":"STATEFULSET","text":"<p>The StatefulSet controller is used for stateful applications which require a unique identity, such as name, network identifications, or strict ordering. For example, MySQL cluster, etcd cluster. The StatefulSet controller provides identity and guaranteed ordering of deployment and scaling to Pods. Similar to Deployments, StatefulSets use ReplicaSets as intermediary Pod controllers and support rolling updates and rollbacks. </p> <p>Unlike a Deployment, a StatefulSet maintains a sticky identity for each of their Pods. These pods are created from the same spec, but are not interchangeable: each has a persistent identifier that it maintains across any rescheduling.</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#custom-resources","title":"CUSTOM RESOURCES","text":"<p>There are two ways to add custom resources:</p> <ul> <li>Custom Resource Definitions (CRDs)   This is the easiest way to add custom resources and it does not require any programming knowledge. However, building the custom controller would require some programming.   </li> <li>API Aggregation     For more fine-grained control, we can write API Aggregators. They are subordinate API servers which sit behind the primary API server. The primary API server acts as a proxy for all incoming API requests - it handles the ones based on its capabilities and proxies over the other requests meant for the subordinate API servers. </li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#should-i-use-a-configmap-or-a-custom-resource","title":"Should I use a configMap or a custom resource?","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#kubernetes-cluster-federation","title":"Kubernetes Cluster Federation","text":"<p>We can manage multiple Kubernetes clusters from a single control plane. We can sync resources across the federated clusters and have cross-cluster discovery.  This allows us to perform Deployments across regions, access them using a global DNS record, and achieve High Availability. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#security","title":"SECURITY","text":"<p>Security Contexts allow us to set Discretionary Access Control for object access permissions, privileged running, capabilities, security labels, etc. However, their effect is limited to the individual Pods In order to apply security settings to multiple Pods and Containers cluster-wide, we can define Pod Security Policies.</p> <p>SNYK Webinar: Live Hack: Hack My Mis-Configured Kubernetes, sponsored by Snyk</p> <p>https://kubernetes.io/docs/tasks/configure-pod-container/security-context/</p> <p>dal POD con root     nmap -sn IP_ETh0/netmask sugli host trovati     nmap -sS </p> <p>https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#securitycontext-v1-core https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#podsecuritycontext-v1-core privileged: false runAsNonRoot: true allowPrivilegeEscalation: false</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#network-policies","title":"Network Policies","text":"<p>are sets of rules which define how Pods are allowed to talk to other Pods and resources inside and outside the cluster. Pods not covered by any Network Policy will continue to receive unrestricted traffic from any endpoint. </p> <p>The Network Policy API resource specifies podSelectors, Ingress and/or Egress policyTypes, and rules based on source and destination ipBlocks and ports.</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#metrics","title":"METRICS","text":"<p>Prometheus</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#logging","title":"LOGGING","text":"<p>A popular method to collect logs is using Elasticsearch together with fluentd with custom configuration as an agent on the nodes. fluentd is an open source data collector, which is also part of CNCF. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#helm","title":"Helm","text":"<p>client queries the Chart repositories for Charts based in search parameters, downloads a desired Chart, and then it requests the API server to deploy in the cluster the resources defined in the Chart.  Charts submitted for Kubernetes are available here. </p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#service-mesh","title":"Service Mesh","text":"<p>is a third party solution to the Kubernetes native application connectivity and exposure achieved with Services paired with Ingress Controllers. </p> <ul> <li>Consul by HashiCorp </li> <li>Envoy built by Lyft, currently a CNCF project  </li> <li>Istio is one of the most popular service mesh solutions, backed by Google, IBM and Lyft  </li> <li>Kuma by Kong </li> <li>Linkerd a CNCF project</li> </ul> <p>https://servicemesh.es/ http://leanpub.com/s/8duzgr_S1vlLyGjptlKzZA.pdf</p> <p>https://docs.google.com/spreadsheets/d/1Bxf8VW9n-YyHeBiKdXt6zytOgw2cQlsDnK1gLUvsZ4A/edit#gid=907731238</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#ckad","title":"CKAD","text":"<ul> <li>Crea un pod con data immagine, replicas, namespace  </li> <li>Pod con due container con volume persistente condiviso  </li> <li>Sidecar container  </li> <li>Volume hostPath </li> <li>Storage class  </li> <li></li> <li>Pod con due container, uno con dei comandi \u201cwhile \u2026\u201d</li> </ul> <p>https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/</p> <ul> <li>Pod con secret come env var  </li> <li>Pod con config map come volume  </li> <li>Crea deployment   </li> <li>Inserisci readiness e liveness al pod -&gt; errore se provo con k edit https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes </li> <li>Associa un service account ad un pod  </li> <li>Salva i log di un pod su file  </li> <li></li> </ul> <p>Problemi</p> <ul> <li>Non ho trovato un modo per creare velocemente un deployment  </li> <li>Il deployment falliva per errore sul selector/label  </li> <li>Associando readiness e liveness ad un pod, questi campi risultavano read only  </li> <li>Differenze tra command e arg  </li> <li></li> </ul> <p>AMBASSADOR PATTERN</p> <p>ADAPTER PATTERN</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#cks","title":"CKS","text":"<p>=============================================================== https://github.com/OWASP/Docker-Security/blob/main/D00%20-%20Overview.md https://microsoft.github.io/Threat-Matrix-for-Kubernetes/ https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core https://linuxera.org/container-security-capabilities-seccomp/ https://lwn.net/Articles/604287/  =============================================================== ===============================================================</p> <p>sudo tail /proc/self/stack</p> <p>-&gt; sudo grep 'Name\\|Cap\\|Sec' /proc/self/status</p> <p>Name:   grep CapInh: 0000000000000000 CapPrm: 000001ffffffffff CapEff: 000001ffffffffff CapBnd: 000001ffffffffff CapAmb: 0000000000000000 Seccomp:        0 Seccomp_filters:       0</p> <p>\u279c capsh --decode=000001ffffffffff 0x000001ffffffffff=cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,cap_audit_read,cap_perfmon,cap_bpf,cap_checkpoint_restore</p> <p>\u279c grep 'Name\\|Cap\\|Sec' /proc/self/status Name:   grep CapInh: 0000000000000000 CapPrm: 0000000000000000 CapEff: 0000000000000000 CapBnd: 000001ffffffffff CapAmb: 0000000000000000 Seccomp:        0 Seccomp_filters:       0</p> <p>\u279c man syscalls</p> <p>===============================================================</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#cis-centre-for-internet-security-benchmark","title":"CIS = centre for internet security benchmark","text":"<p>It provides tools for people and governments to respect best security practices. - verbose logging     /var/log/containers find /var/log/ -type f -exec grep configmap {} + Install rsyslog - auditing access - FS      /dev/shm     Ensure /tmp is a separate partition (tmpfs)     mounting new devices is disabled Ensure strong password hashing algorithm is configured - network     Ensure SSH access is limited     Ensure SSH PAM is enabled - debugging - Ggm - userspace - no duplicate id, gid, usernames\u2026 - Jobs     permissions on /etc/crontab are configured</p> <p>CIS-CAT tool &gt; ./Assessor-CLI.sh -html --reports-dir /var/www/html/ --no-timestamp -report-prefix index --benchmark benchmarks/CIS_Ubuntu_Linux_20.04_LTS_Benchmark_v2.0.0-xccdf.xml --profile  xccdf_org.cisecurity.benchmarks_profile_Level_1_-_Server</p> <p>Releases \u00b7 inspec/inspec (github.com) dev-sec/cis-docker-benchmark: CIS Docker Benchmark - InSpec Profile (github.com)</p> <p>wget -O /root/cis-cat.zip https://learn.cisecurity.org/e/799323/l-799323-2019-11-15-3v7x/2mnnf/145238200?h=XB2O2vOkVGHhHbfAxiAyYhdsSGW-osVs3NvDASSOSps</p> <p>&gt; curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec git clone https://github.com/dev-sec/cis-docker-benchmark inspec exec cis-docker-benchmark</p> <p>===============================================================</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#aquasecurity-kube-bench","title":"AQUASECURITY KUBE-BENCH","text":"<p>curl -sLO $(curl -s https://api.github.com/repos/aquasecurity/kube-bench/releases/latest |grep \"browser_download_url.*linux_amd64.tar.gz\" |tr -s ' ' |cut -d'\"' -f4 )</p> <p>GitHub - aquasecurity/kube-bench: Checks whether Kubernetes is deployed according to security best practices as defined in the CIS Kubernetes Benchmark </p> <p>kube-controller-manager | Kubernetes</p> <p>===============================================================</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#general-principles","title":"General Principles","text":"<ul> <li>Confidentiality: no unauthorised read  </li> <li>Integrity: no unauthorised modification  </li> <li>Availability: data is accessible even during an attack  </li> <li>Non Repudiation/Accountability: non deniability of own actions</li> </ul> <p>Others</p> <ul> <li>Auditing: logging  </li> <li>Identification &amp; Authentication: requires an Identity Authorization Manager and a login process (user/psw, AD, SSH cert, SSH PAM\u2026)  </li> <li>Authorization: identities permission management</li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#containers","title":"Containers","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#containers-images","title":"Containers images","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#containers-runtime","title":"Containers runtime","text":"<ul> <li>Pause container: Every Kubernetes Pod includes an empty pause container, which bootstraps the Pod to establish all of the cgroups, reservations, and namespaces before its individual containers are created.  </li> <li>Containers in a pod share the network  </li> <li>Mounted host paths like  </li> <li>/dev    host devices  </li> <li>/sys    process info  </li> <li>/proc   launch new containers  </li> <li>Linux capabilities  </li> <li>CAP_SYS_ADMIN  </li> <li>CAP_NET_RAW  </li> <li>CAP_SET_UID  </li> <li>CAP_SYS_PTRACE  </li> <li>Namespace can be inferred by .metadata headers and by /etc/resolv.conf</li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#security-levels-in-the-cloud","title":"Security levels in the cloud","text":"<ol> <li>Code  </li> <li>SBOM analysis  </li> <li>Vuln scanner  </li> <li>Static code analysis  </li> <li>Container  </li> <li>SHA256 digest tags  </li> <li>Signed images  </li> <li>Build from scratch  </li> <li>Security context  <ol> <li>Privileged  </li> <li>readOnlyFilesystem  </li> <li>runAsUser  </li> </ol> </li> <li>Cluster  </li> <li>Network policies  </li> <li>Admission controllers  </li> <li>Secret management (key vault)  </li> <li>RBAC through AD  </li> <li>Seccomp / Sellinux / Apparmor -&gt; Security Profiles Operator  </li> <li>Rebuild of old containers  </li> <li>Operators can see deployment secrets and have Cluster wide role bindings  </li> <li>CPU and MEM resource limits  </li> <li>Kubesec  </li> <li>Kubescan  </li> <li>Falco IDS  </li> <li>Tracee IDS  </li> <li>CloudProvider  </li> <li>Vulnerability in the hardware  </li> <li>Bugged services</li> </ol>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#sandboxing","title":"Sandboxing","text":"<p>VM -&gt; QEMU .&gt; KVM -&gt; Linux Kernel</p> <p>Linux Kernel Virtual Machine is a module that runs a nested kernel as hypervisor for the container Kata     Executes any syscalls but it is slower since it has a QEMU kernel replication  Gvisor     Syscalls are limited but very fast Firecracker</p> <p>Persistence attacks</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#pki","title":"PKI","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#cosign","title":"Cosign","text":"<p>Sign docker images Sign build artefacts</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#spiffespire","title":"SPIFFE/SPIRE","text":"<p>Assign identity to k8s workloads</p> <p>OverlayFS Tmpfs</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#k8s-certificates","title":"K8S Certificates","text":"<p>Use curl instead of kubectl (github.com)</p> <p>&gt;&gt; kubectl unable to connect to server: x509: certificate signed by unknown authority cat .kube/config openssl s_client -showcerts -connect 127.0.0.1:6443 kubectl --insecure-skip-tls-verify cluster-info dump crictl ps -a  |grep api-server crictl logs 569cfa02f7716 --follow</p> <p>grep 2379 /etc/kubernetes/manifests/kube-apiserver.yaml netstat -tlnp |grep etcd openssl s_client -showcerts -connect 127.0.0.1:2379 openssl verify -CApath /etc/kubernetes/pki/ /etc/kubernetes/pki/ca.key</p> <p>openssl rsa -check -noout -in akshay.key openssl req -verify  -noout -in akshay.csr openssl req -in akshay.csr -text -noout</p> <p># Take values from kubeconfig and decode base64 curl \\   --cacert cluster_admin_dev_pau.ca \\   --cert cluster_admin_dev_pau.crt \\   --key cluster_admin_dev_pau.key \\   https://dev-pau-aks-55062799.hcp.westeurope.azmk8s.io:443</p> <p>curl --cacert cluster_admin_dev_pau.ca   --cert cluster_admin_dev_pau.crt   --key cluster_admin_dev_pau.key   https://dev-pau-aks-55062799.hcp.westeurope.azmk8s.io:443/apis/apps/v1/namespaces/dev-pau-testing/deployments/pythontestappdeployment</p> <p># https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-the-latest-release latest_tag=$(curl -sL -H \"X-GitHub-Api-Version: 2022-11-28\" https://api.github.com/repos/mikefarah/yq/releases/latest |jq -r .tag_name)</p> <p>curl -fsSL https://github.com/mikefarah/yq/releases/download/${latest_tag}/yq_linux_amd64 -o yq</p> <p>yq_linux_amd64_checksum=\"\\((curl \\-fsSL https://github.com/mikefarah/yq/releases/download/\\){latest_tag}/checksums |grep \"yq_linux_amd64 \" |tr --squeeze-repeats [:space:] |cut -d' ' -f2- )\"</p> <p>grep $(sha256sum yq_linux_amd64 |cut -d' ' -f1) yq_linux_amd64_checksum</p> <p>mv yq_linux_amd64 yq chmod +x /usr/local/bin/yq sudo mv yq /usr/local/bin/yq</p> <p># Choose a user with the certificate data inside kube config export CLUSTER_USER=\"clusterAdmin_dev-pau-infra-group_dev-pau-aks\" export CLUSTER_NAME=\"dev-pau-aks\"</p> <p>KEY_DATA=\"$( yq eval '.users[] | select(.name == env(CLUSTER_USER)) | .user.client-key-data' \\(KUBECONFIG |base64 \\-d \\--wrap=76)\"   CERT\\_DATA=\"\\)(yq eval '.users[] | select(.name == env(CLUSTER_USER)) | .user.client-certificate-data' \\(KUBECONFIG | base64 \\-d \\--wrap=76)\"   CA\\_DATA=\"\\)( yq eval '.clusters[] | select(.name == env(CLUSTER_NAME)) | .cluster.certificate-authority-data' $KUBECONFIG | base64 -d --wrap=76)\"</p> <p>SERVER=\"$(yq eval '.clusters[] | select(.name == env(CLUSTER_NAME)) | .cluster.server' $KUBECONFIG)\"</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#system-hardening","title":"SYSTEM HARDENING","text":""},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#least-privilege","title":"Least Privilege","text":"<ul> <li>Account management  </li> <li>Identity profiling  </li> <li>Session locks  </li> <li>Session terminations  </li> <li>Information flow enforcement</li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#ssh-hardening","title":"SSH Hardening","text":"<p>/etc/ssh/sshd_config visudo</p> <ul> <li>permitRootLogin no  </li> <li>passwordAuthentication no  </li> <li>usermod --shell /usr/sbin/nologin \u2013lock himanshi  </li> <li></li> </ul> <p>Privilege Escalation</p> <p>Remove Obsolete packages</p> <ul> <li>systemctl list-units --type service --state active  </li> <li>apt list --installed</li> </ul> <p>Kernel Modules</p> <p>Secrets kubectl create secret    tls    webhook-server-tls    --namespace webhook-demo    --cert /root/keys/webhook-server-tls.crt    --key /root/keys/webhook-server-tls.key</p>"},{"location":"software-engineering/distributed-systems/kubernetes/KUBERNETES-CKAD/#sandboxing_1","title":"Sandboxing","text":"<p>https://stackoverflow.com/a/50150710/3673430</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/","title":"Kubernetes dns","text":"<p>Not headless Services are assigned DNS A and/or AAAA records, depending on the IP family or families of the Service, with a name of the form\u00a0my-svc.my-namespace.svc.cluster-domain.example. This resolves to the cluster IP of the Service.\u00a0</p> <p>If the\u00a0\u00a0is an IPv4 address, an\u00a0A\u00a0record\u00a0of the following form must exist\u00a0 <p><code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN\u00a0A\u00a0&lt;cluster-ip&gt;</code></p> <p>Records for External Name Services</p> <p>Given a Service named\u00a0\u00a0in Namespace\u00a0\u00a0with\u00a0ExternalName\u00a0<code>&lt;extname&gt;</code>, a\u00a0CNAME\u00a0record named\u00a0<code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;</code>\u00a0pointing to\u00a0<code>&lt;extname&gt;</code>\u00a0must exist.\u00a0 <p>Record Format:\u00a0 <code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN\u00a0CNAME\u00a0&lt;extname&gt;</code> </p> <p>By default AKS uses\u00a0CoreDNS\u00a0for\u00a0tcp\u00a0and\u00a0udp\u00a0internal DNS resolution. This configuration is easily editable through a configmap\u00a0</p> <p>These resolution policies are specified in the\u00a0dnsPolicy\u00a0field of a Pod Spec.\u00a0</p> <ul> <li> <p>\"Default\": The Pod inherits the name resolution configuration from the node that the Pods run on. See\u00a0related discussion\u00a0for more details.\u00a0</p> </li> <li> <p>\"ClusterFirst\": Any DNS query that does not match the configured cluster domain suffix\u00a0is forwarded to an upstream nameserver by the DNS server. See\u00a0related discussion\u00a0for details on how DNS queries are handled in those cases.\u00a0</p> </li> </ul> <p>\u279c\u00a0kubectl\u00a0describe\u00a0configmaps\u00a0--namespace=kube-system\u00a0coredns\u00a0</p> <pre><code>.:53 {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Listen on port 53 for all zones (.)\n\u00a0\u00a0\u00a0 errors\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Enable error logging\n\u00a0\u00a0\u00a0 ready\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Enable readiness probe\n\u00a0\u00a0\u00a0 health {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Enable health checks\n\u00a0\u00a0\u00a0\u00a0\u00a0 lameduck 5s # Delay shutdown by 5 seconds to allow in-flight requests to complete\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 kubernetes cluster.local in-addr.arpa ip6.arpa {\u00a0 # Kubernetes plugin for service discovery in the cluster\n\u00a0\u00a0\u00a0\u00a0\u00a0 pods insecure\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Use insecure mode for pod DNS names\n\u00a0\u00a0\u00a0\u00a0\u00a0 fallthrough in-addr.arpa ip6.arpa\u00a0 # Continue to the next plugin if no match is found\n\u00a0\u00a0\u00a0\u00a0\u00a0 ttl 30\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Set the DNS record TTL to 30 seconds\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 prometheus :9153\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Enable Prometheus metrics on port 9153\n\u00a0\u00a0\u00a0 forward . /etc/resolv.conf\u00a0 # Forward all other DNS queries to the nameservers in /etc/resolv.conf\n}\n</code></pre>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#what-is-coredns","title":"What is\u00a0CoreDNS?","text":"<p>CoreDNS\u00a0is a modern, flexible, and extensible DNS server designed to provide DNS and service discovery functionalities.\u00a0It is built with a modular architecture, allowing it to be easily extended with plugins to support various use cases.\u00a0\u00a0</p> <p>CoreDNS\u00a0can serve as a DNS server for traditional DNS records, as well as for service discovery in cloud-native environments like Kubernetes.\u00a0</p> <p>CoreDNS\u00a0operates by listening for DNS queries on specified ports and resolving these queries based on its configuration. It can act as both a resolver and a forwarder:\u00a0</p> <ul> <li> <p>Resolver:\u00a0CoreDNS\u00a0can resolve DNS queries using its internal database of DNS records.\u00a0</p> </li> <li> <p>Forwarder: If\u00a0CoreDNS\u00a0does not have the answer to a query, it can forward the query to upstream DNS servers and return the response to the client.\u00a0</p> </li> </ul> <p>CoreDNS\u00a0uses a configuration file called\u00a0Corefile\u00a0to define its\u00a0behavior. This file specifies the plugins to be used and their configurations.\u00a0Plugins can handle various tasks such as caching, load balancing, health checks, and more.\u00a0</p> <p>In Kubernetes,\u00a0CoreDNS\u00a0is the default DNS service starting from version 1.13. It replaces the older\u00a0kube-dns\u00a0service and provides DNS resolution for services and pods within the cluster.\u00a0\u00a0</p> <p>Here\u2019s how\u00a0CoreDNS\u00a0integrates with Kubernetes:\u00a0</p> <ol> <li> <p>Deployment:\u00a0CoreDNS\u00a0is deployed as a Kubernetes Deployment with multiple replicas for high availability.\u00a0It runs in the\u00a0kube-system\u00a0namespace and is exposed via a Kubernetes Service named\u00a0kube-dns.\u00a0</p> </li> <li> <p>Service Discovery:\u00a0When a pod in the Kubernetes cluster needs to communicate with another service, it sends a DNS query to\u00a0CoreDNS.\u00a0CoreDNS\u00a0resolves the query by mapping the service name to the corresponding IP address using its internal records.\u00a0</p> </li> <li> <p>Configuration: The\u00a0CoreDNS\u00a0configuration in Kubernetes is managed through a ConfigMap. This ConfigMap contains the\u00a0Corefile, which defines how\u00a0CoreDNS\u00a0should handle DNS queries.\u00a0The\u00a0kubernetes\u00a0plugin in the\u00a0Corefile\u00a0is specifically designed to handle DNS queries for Kubernetes services and pods.\u00a0</p> </li> <li> <p>Performance and Monitoring:\u00a0CoreDNS\u00a0can be configured to collect metrics using plugins like Prometheus.\u00a0These metrics can help monitor DNS performance, such as query latency, cache hit rates, and resource usage [using-coredns-effectively-kubernetes].\u00a0</p> </li> <li> <p>Scalability:\u00a0CoreDNS\u00a0is designed to scale with the Kubernetes cluster.\u00a0It can handle a large number of DNS queries efficiently and can be tuned to optimize resource usage.\u00a0</p> </li> </ol> <p>More info on the\u00a0CoreDNS kubernetes plugin here.\u00a0</p> <p>Looking inside the\u00a0CoreDNS\u00a0deployment we can see it is mounted there\u00a0\u00a0</p> <pre><code>#\u00a0kubectl\u00a0--namespace=kube-system\u00a0describe\u00a0deploy\u00a0coredns\nName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0coredns\nNamespace:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kube-system\nLabels:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addonmanager.kubernetes.io/mode=Reconcile\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k8s-app=kube-dns\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kubernetes.azure.com/managedby=aks\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kubernetes.io/cluster-service=true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kubernetes.io/name=CoreDNS\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0version=v20\nSelector:  k8s-app=kube-dns,version=v20\nReplicas:  4\u00a0desired\u00a0|\u00a04\u00a0updated\u00a0|\u00a04\u00a0total\u00a0|\u00a04\u00a0available\u00a0|\u00a00\u00a0unavailable\nPod Template:\n    Labels:\n    \u00a0\u00a0k8s-app=kube-dns\n    \u00a0\u00a0kubernetes.azure.com/managedby=aks\n    \u00a0\u00a0kubernetes.io/cluster-service=true\n\u00a0\u00a0Service-Account:\u00a0\u00a0coredns\n\u00a0\u00a0Containers:\n\u00a0\u00a0\u00a0coredns:\n\u00a0\u00a0\u00a0\u00a0Image:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mcr.microsoft.com/oss/kubernetes/coredns:v1.9.4-hotfix.20240704\n\u00a0\u00a0\u00a0\u00a0Ports:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a053/UDP,\u00a053/TCP,\u00a09153/TCP\n\u00a0\u00a0\u00a0\u00a0Host\u00a0Ports:\u00a0\u00a00/UDP,\u00a00/TCP,\u00a00/TCP\n\u00a0\u00a0\u00a0\u00a0Args:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-conf\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/etc/coredns/Corefile\n...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Mounts:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/etc/coredns\u00a0from\u00a0config-volume\u00a0(ro)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/etc/coredns/custom\u00a0from\u00a0custom-config-volume\u00a0(ro)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/tmp\u00a0from\u00a0tmp\u00a0(rw)\n\u00a0\u00a0Volumes:\n\u00a0\u00a0\u00a0config-volume:\n\u00a0\u00a0\u00a0\u00a0Type:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConfigMap\u00a0(a\u00a0volume\u00a0populated\u00a0by\u00a0a\u00a0ConfigMap)\n\u00a0\u00a0\u00a0\u00a0Name:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0coredns\n\u00a0\u00a0\u00a0\u00a0Optional:\u00a0\u00a0false\n</code></pre> <p>So any of the DNS resolving requests targeted on port 53 will be solved by\u00a0coredns\u00a0server itself if the target was in the same cluster zone (eg:\u00a0data.test.svc.cluster.local)\u00a0\u00a0while the rest will be redirected to the\u00a0host\u00a0resolv.conf\u00a0which is not much used today.\u00a0</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#differences-between-kube-dns-coredns-and-kube-proxy","title":"Differences Between\u00a0kube-dns,\u00a0CoreDNS, and\u00a0kube-proxy","text":"<ul> <li> <p>Function:\u00a0kube-dns\u00a0is the traditional DNS service used in Kubernetes for service discovery.\u00a0</p> </li> <li> <p>Components: It typically includes a DNS server (dnsmasq), a DNS caching layer, and a health check.\u00a0</p> </li> <li> <p>Usage:\u00a0kube-dns\u00a0resolves DNS names for services and pods within the cluster.\u00a0</p> </li> </ul> <pre><code>spec:\u00a0\n\u00a0\u00a0ports:\u00a0\n\u00a0\u00a0\u00a0\u00a0-\u00a0name:\u00a0dns\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0protocol:\u00a0UDP\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port:\u00a053\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0targetPort:\u00a053\u00a0\n\u00a0\u00a0\u00a0\u00a0-\u00a0name:\u00a0dns-tcp\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0protocol:\u00a0TCP\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port:\u00a053\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0targetPort:\u00a053\u00a0\n\u00a0\u00a0selector:\u00a0\n\u00a0\u00a0\u00a0\u00a0k8s-app:\u00a0kube-dns\u00a0\n\u00a0\u00a0clusterIP:\u00a010.X.Y.Z\n</code></pre> <p>CoreDNS\u00a0Deployment\u00a0</p> <ul> <li> <p>Function:\u00a0CoreDNS\u00a0is a more flexible and extensible DNS server that can replace\u00a0kube-dns.\u00a0</p> </li> <li> <p>Components:\u00a0CoreDNS\u00a0uses a configuration file (Corefile) to define its\u00a0behavior, including plugins for various functionalities.\u00a0</p> </li> <li> <p>Usage:\u00a0CoreDNS\u00a0can handle DNS-based service discovery, metrics, health checks, and more. It is the default DNS server in newer Kubernetes versions due to its modularity and performance.\u00a0</p> </li> </ul> <p>kube-proxy\u00a0DaemonSet\u00a0</p> <ul> <li> <p>Function:\u00a0kube-proxy is responsible for maintaining network rules on nodes to allow communication to services.\u00a0</p> </li> <li> <p>Components: It runs as a\u00a0daemonset\u00a0on each node and uses iptables or IPVS to manage routing rules.\u00a0</p> </li> <li> <p>Usage:\u00a0kube-proxy routes traffic to the appropriate backend pods for a given service, ensuring that requests reach the correct destination.\u00a0</p> </li> </ul>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#inspecting-dns-records-with-agnhost","title":"Inspecting DNS records with agnhost","text":"<p>```bash  kubectl\u00a0run\u00a0agnhost\u00a0--namespace\u00a0dev-testing\u00a0--image=registry.k8s.io/e2e-test-images/agnhost:2.40\u00a0--overrides='{\"spec\":{\"containers\":[{\"name\":\"agnhost\",\"image\":\"registry.k8s.io/e2e-test-images/agnhost:2.40\",\"command\":[\"sleep\",\"3600\"],\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"name\":\"host-volume\",\"mountPath\":\"/host\",\"readOnly\":true}]}],\"volumes\":[{\"name\":\"host-volume\",\"hostPath\":{\"path\":\"/\"}}],\"restartPolicy\":\"Never\"}}'</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#it-will-output-the-hosts-configured-dns-servers-separated-by-commas","title":"It\u00a0will\u00a0output\u00a0the\u00a0host's\u00a0configured\u00a0DNS\u00a0servers,\u00a0separated\u00a0by\u00a0commas","text":"<p>\u276f\u00a0kubectl\u00a0exec\u00a0-n\u00a0dev-testing\u00a0agnhost\u00a0--\u00a0/agnhost\u00a0dns-server-list 10.X.Y.Z\u00a0\u00a0(NDR:\u00a0kube-dns\u00a0service\u00a0IP)</p> <p>\u276f\u00a0kubectl\u00a0exec\u00a0-n\u00a0dev-testing\u00a0agnhost\u00a0--\u00a0nslookup\u00a0mapim.dev-mapim.svc.cluster.local Server:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.X.Y.Z Address:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.X.Y.Z#53 Name:\u00a0\u00a0\u00a0mapim.dev-mapim.svc.cluster.local Address:\u00a010.A.B.C</p> <p>\u279c\u00a0kubectl\u00a0exec\u00a0-n\u00a0dev-testing\u00a0agnhost\u00a0--\u00a0/agnhost\u00a0dns-suffix dev-testing.svc.cluster.local,svc.cluster.local,cluster.local,paxg3pivipuujon3aq5cuajlnb.ax.internal.cloudapp.net</p> <p>\u279c\u00a0kubectl\u00a0exec\u00a0-n\u00a0dev-testing\u00a0agnhost\u00a0--\u00a0/agnhost\u00a0etc-hosts</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#kubernetes-managed-hosts-file","title":"Kubernetes-managed\u00a0hosts\u00a0file.","text":"<p>127.0.0.1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localhost ::1\u00a0\u00a0\u00a0\u00a0\u00a0localhost\u00a0ip6-localhost\u00a0ip6-loopback fe00::0\u00a0ip6-localnet fe00::0\u00a0ip6-mcastprefix fe00::1\u00a0ip6-allnodes fe00::2\u00a0ip6-allrouters</p> <p>10.0.12.59\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agnhost-pod  ```</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#aks-peering","title":"AKS Peering","text":"<p>Here\u2019s a short guide on setting up network peering between two Azure Kubernetes Service (AKS) clusters</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#setting-up-network-peering-between-two-aks-clusters","title":"Setting Up Network Peering Between Two AKS Clusters","text":""},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#step-1-create-two-aks-clusters","title":"Step 1: Create Two AKS Clusters","text":"<ol> <li> <p>Create Resource Groups:</p> <pre><code>az group create --name ResourceGroup1 --location eastus\naz group create --name ResourceGroup2 --location westus\n</code></pre> </li> <li> <p>Create AKS Clusters:</p> <pre><code>az aks create --resource-group ResourceGroup1 --name AKSCluster1 --node-count 1 --enable-addons monitoring --generate-ssh-keys\naz aks create --resource-group ResourceGroup2 --name AKSCluster2 --node-count 1 --enable-addons monitoring --generate-ssh-keys\n</code></pre> </li> </ol>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#step-2-set-up-virtual-network-peering","title":"Step 2: Set Up Virtual Network Peering","text":"<ol> <li> <p>Get Virtual Network IDs:</p> <pre><code>VNET1_ID=$(az network vnet show --resource-group MC_ResourceGroup1_AKSCluster1_eastus --name aks-vnet-123456 --query id --output tsv)\nVNET2_ID=$(az network vnet show --resource-group MC_ResourceGroup2_AKSCluster2_westus --name aks-vnet-654321 --query id --output tsv)\n</code></pre> </li> <li> <p>Create Peering from VNet1 to VNet2:</p> <pre><code>az network vnet peering create --name VNet1ToVNet2 --resource-group MC_ResourceGroup1_AKSCluster1_eastus --vnet-name aks-vnet-123456 --remote-vnet $VNET2_ID --allow-vnet-access\n</code></pre> </li> <li> <p>Create Peering from VNet2 to VNet1:</p> <pre><code>az network vnet peering create --name VNet2ToVNet1 --resource-group MC_ResourceGroup2_AKSCluster2_westus --vnet-name aks-vnet-654321 --remote-vnet $VNET1_ID --allow-vnet-access\n</code></pre> </li> </ol>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#step-3-configure-externalname-kubernetes-services","title":"Step 3: Configure ExternalName Kubernetes Services","text":"<ol> <li> <p>Create ExternalName Service in AKSCluster1:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: externalname-service\nspec:\n  type: ExternalName\n  externalName: myservice.example.com\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f externalname-service.yaml\n</code></pre> </li> </ol>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#step-4-assign-roles-for-service-principal","title":"Step 4: Assign Roles for Service Principal","text":"<p>TODO</p>"},{"location":"software-engineering/distributed-systems/kubernetes/kubernetes-dns/#references","title":"REFERENCES:","text":"<ul> <li> <p>Customize CoreDNS for Azure Kubernetes Service (AKS) - Azure Kubernetes Service | Microsoft Learn </p> </li> <li> <p>https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/ </p> </li> <li> <p>dns/docs/specification.md at master \u00b7 kubernetes/dns \u00b7 GitHub </p> </li> <li> <p>Debugging DNS Resolution | Kubernetes </p> </li> <li> <p>https://github.com/kubernetes/kubernetes/tree/master/test/images/agnhost</p> </li> </ul>"},{"location":"software-engineering/security/CISA/","title":"CISA","text":""},{"location":"software-engineering/security/CISA/#different-levels-of-compliance","title":"Different levels of compliance:","text":"<ul> <li>standard</li> <li>policy</li> <li>recommendation</li> <li>guideline</li> </ul> <p><pre><code>graph TD\n\n\u00a0 \u00a0 A[\"Regulations &lt;br&gt;(Mandatory)\"]\n\n\u00a0 \u00a0 B[\"Standards &lt;br&gt;(Voluntary Guidelines)\"]\n\n\u00a0 \u00a0 C[Policies]\n\n\u00a0 \u00a0 D[Controls]\n\n\u00a0 \u00a0 E[Procedures]\n\n\u00a0 \u00a0 F[Guidelines]\n\n\n\n\u00a0 \u00a0 A --&gt; C\n\n\u00a0 \u00a0 B --&gt; C\n\n\u00a0 \u00a0 C --&gt; D\n\n\u00a0 \u00a0 D --&gt; E\n\n\u00a0 \u00a0 D --&gt; F\n\n\n\n\u00a0 \u00a0 subgraph Examples\n\n\u00a0 \u00a0 \u00a0 \u00a0 A1[GDPR]\n\n\u00a0 \u00a0 \u00a0 \u00a0 A2[ISO 27001:2022]\n\n\u00a0 \u00a0 end\n\n\n\n\u00a0 \u00a0 A1 --&gt; A\n\n\u00a0 \u00a0 A2 --&gt; B</code></pre> Explanation:</p> <ul> <li>Regulations: Legally enforceable requirements set by governmental bodies (e.g., GDPR).\u200b</li> <li>Standards: Voluntary best practices developed by industry groups (e.g., ISO 27001:2022).\u200b</li> <li>Policies: Organizational directives that align with applicable regulations and chosen standards.\u200b</li> <li>Controls: Specific measures implemented to enforce policies.\u200b</li> <li>Procedures: Detailed steps outlining how controls are executed.\u200b</li> <li>Practices: Day-to-day activities ensuring procedures are followed effectively.</li> </ul> <p>Example:</p> <pre><code>graph TD\n    A[\"GDPR&lt;br/&gt;(Regulation)\"]\n    B[\"ISO 27001:2022&lt;br/&gt;(Standard)\"]\n    C[Data Protection Policy]\n    D[Information Security Policy]\n    E[Access Control Measures]\n    F[Encryption Protocols]\n    G[User Access Procedure]\n    H[Data Encryption Procedure]\n    I[Employee Login Practice]\n    J[Secure Data Storage Practice]\n\n    A --&gt; C\n    B --&gt; D\n    C --&gt; E\n    D --&gt; F\n    E --&gt; G\n    F --&gt; H\n    G --&gt; I\n    H --&gt; J\n</code></pre>"},{"location":"software-engineering/security/CISA/#standards","title":"Standards","text":"<ul> <li>Definition: Mandatory requirements and practices codified into specifications that organizations must follow.</li> <li>Purpose: Ensure consistency and compliance across the organization.</li> </ul>"},{"location":"software-engineering/security/CISA/#policies","title":"Policies","text":"<ul> <li>Definition: High-level statements of management intent, outlining what should and shouldn't be done.</li> <li>Components:<ul> <li>Management Review: Policies should be periodically reviewed by management.</li> <li>Information Security Policy (ISP): Must be approved by senior management, documented, and communicated throughout the organization.</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#procedures","title":"Procedures","text":"<ul> <li>Definition: Documented steps to achieve policy objectives.</li> <li>Purpose: Provide detailed actions to ensure policies are implemented effectively.</li> </ul>"},{"location":"software-engineering/security/CISA/#guidelines","title":"Guidelines","text":"<ul> <li>Definition: Recommendations for positive results, not mandatory.</li> <li>Purpose: Help make wise decisions and support best practices.</li> </ul> <p>Comprehensive security control processes help in identifying and mitigating risks, ensuring compliance with regulations, and maintaining the integrity of financial and operational data.</p> <p>When operating internationally, especially in regions like India and China, policy controls are critical. These regions have specific regulatory requirements and compliance standards that companies must adhere to.</p> <p>Crossing the risk threshold means that the company is exposed to risks beyond its capacity to manage effectively. This can lead to operational disruptions, financial losses, and an inability to achieve strategic objectives</p> <p>Governance strategy is the key component that ensures stakeholder needs, conditions, and options are evaluated to determine balanced enterprise objectives. It involves setting priorities, making decisions, and monitoring performance to align with governance direction</p> <p>Audit Charter: Ask for a clear declaration about IS Auditor authority.  - Which documentation should be available,  - which IT processes should be verified or triggered: tests run, deployments, production logs...</p> <p>IS Audit plan 1. Understand the organization\u2019s mission, objective and purpose 2. Understand the organization\u2019s governance structure 3. Review prior audit work papers 4. Perform a risk analysis     1. ISO27001     2. NIST80053 5. Set the audit scope and audit objectives 6. Develop the audit approach and strategy 7. Assign personnel to the audit 8. Address engagement logistics     1. Can they enter the datacentre?     2. How is data access guaranteed? It could be a new account made for the audit, a present person...</p>"},{"location":"software-engineering/security/CISA/#e-commerce-requirements","title":"E-commerce requirements","text":"<ul> <li>persisted customer data is never exposed to the internet</li> </ul> <p>Electronic Data Interchange (EDI)\u00a0is a standardized method for exchanging business documents and data between organizations electronically, replacing traditional paper-based methods. EDI is widely used in various industries. Security Measures: To protect the integrity, confidentiality, and availability of the data exchanged, EDI systems implement various security measures, including:     - Encryption: Ensures that data is encrypted during transmission to prevent unauthorized access.     - Authentication: Verifies the identity of the parties involved in the transaction to ensure that data is exchanged with trusted entities.     - Access Control: Restricts access to EDI systems and data to authorized personnel only.</p>"},{"location":"software-engineering/security/CISA/#collecting-evidence","title":"Collecting evidence","text":"<ul> <li>IS organization structure review</li> <li>IS policies review</li> <li>interviewing appropriate personnel</li> <li>Observation of processes</li> <li>Reperformance</li> <li>walk-through</li> </ul>"},{"location":"software-engineering/security/CISA/#computer-assisted-audit-technologies-caats","title":"Computer assisted audit technologies (CAATs)","text":"<p>Data analytics tools to evaluate effectiveness of control environment and process improvements. It should contain independent unbiased data to conduct automated tests and fraud detections.</p>"},{"location":"software-engineering/security/CISA/#exit-interviews","title":"Exit interviews","text":"<ul> <li>resolution recommendations with suggested implementation dates</li> <li>auditor reservation about policies and procedures not effective to fix controls</li> </ul>"},{"location":"software-engineering/security/CISA/#what-is-governance","title":"What is Governance?","text":"<ul> <li>Definition: Governance is the way an organization directs and controls its operations to meet strategic objectives.</li> <li>Components: Includes policies, procedures, controls, practices, and guidelines.</li> <li>Ethical Issues and Decision-Making: Governance ensures ethical practices and guides decision-making processes.</li> </ul>"},{"location":"software-engineering/security/CISA/#enterprise-governance-of-it-egit","title":"Enterprise Governance of IT (EGIT)","text":"<ul> <li>Responsibility: Managed by the board of directors and executive management.</li> <li>Frameworks: Commonly uses frameworks like COBIT 2019 to establish governance structures.</li> <li>Key Elements:<ul> <li>IT Resource Management: Efficient use of IT resources.</li> <li>Performance Measurement: Evaluating how well IT functions perform.</li> <li>Compliance Management: Ensuring adherence to regulatory requirements.</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#governance-vs-management","title":"Governance vs. Management","text":"<ul> <li>Governance: Focuses on setting objectives, evaluating stakeholder needs, and aligning IT with business goals.</li> <li>Management: Involves planning, building, running, and monitoring activities in alignment with governance directions.</li> </ul>"},{"location":"software-engineering/security/CISA/#purpose-of-egit","title":"Purpose of EGIT","text":"<ul> <li>Value Delivery: Ensures IT delivers value to the business.</li> <li>Risk Management: Helps manage risks associated with IT and information systems.</li> </ul>"},{"location":"software-engineering/security/CISA/#information-security-governance-isg","title":"Information Security Governance (ISG)","text":"<ul> <li>Responsibility: Board of directors and CEO are accountable for ISG.</li> <li>Alignment: ISG must align with business objectives and comply with applicable laws and regulations.</li> <li>Roles and Responsibilities: Clear definition of roles, with senior management creating and approving security policies.</li> <li>NIST: ISG is a process of maintaining a framework that guarantees the security in information systems. </li> </ul>"},{"location":"software-engineering/security/CISA/#organizational-structure","title":"Organizational Structure","text":"<ul> <li>Decision-Making: The structure of an organization determines who makes decisions and who provides advice. It influences how governance is implemented and how policies are enforced.</li> <li>Types of Structures:<ul> <li>Hierarchical: Traditional organizations with many layers of management. Often found in older companies.</li> <li>Flat: Modern organizations, especially in tech, with fewer layers and more peer-based control.</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#it-governance-committees","title":"IT Governance Committees","text":"<ul> <li> <p>IT Strategy Committee:</p> <ul> <li>Role: Provides insight, advice, and guidance on IT development and alignment with business objectives.</li> <li>Responsibilities:<ul> <li>Assessing the relevance of new IT developments.</li> <li>Ensuring IT aligns with business direction.</li> <li>Evaluating the availability of IT resources.</li> <li>Considering the risks and competitive aspects of IT investments.</li> </ul> </li> </ul> </li> <li> <p>IT Steering Committee:</p> <ul> <li>Role: Makes decisions on IT spending and project approvals.</li> <li>Responsibilities:<ul> <li>Deciding the level of IT spending.</li> <li>Approving project plans and budgets.</li> <li>Monitoring project progress and value delivery.</li> <li>Communicating strategic goals to project teams.</li> <li>Assisting executive management in delivering IT strategy.</li> </ul> </li> </ul> </li> </ul> <p>Organizational structures play a crucial role in how effectively an organization can govern its IT operations. In hierarchical structures, decision-making is often slower due to multiple layers of approval, but it can provide clear lines of authority and accountability. In contrast, flat structures promote faster decision-making and greater flexibility, which is beneficial for innovation and rapid response to market changes.</p>"},{"location":"software-engineering/security/CISA/#enterprise-architecture-and-risk-management","title":"Enterprise Architecture and Risk Management","text":"<ul> <li>Enterprise Architecture: Structured documentation of an organization's assets and their interactions.</li> <li>Risk Appetite: The maximum amount of risk an organization is willing to accept to maintain its capabilities.</li> <li>Risk Threshold: Occasional higher risk levels allowed for specific opportunities.   Risk threshold refers to the point at which the level of risk becomes unacceptable, prompting the organization to take action to mitigate or manage the risk.</li> <li>Risk Capacity: The absolute limit of risk an organization can handle without severe consequences.</li> </ul>"},{"location":"software-engineering/security/CISA/#risk-management-process","title":"Risk Management Process","text":"<ul> <li>Identification: Recognizing potential risks to organizational assets.</li> <li>Analysis: Evaluating the probability and impact of risks using qualitative, semi-quantitative, and quantitative methods.</li> <li>Planning: Developing strategies to respond to identified risks.</li> <li>Response: Implementing and monitoring risk responses.</li> </ul>"},{"location":"software-engineering/security/CISA/#levels-of-risk-management","title":"Levels of Risk Management","text":"<ul> <li>Operational Level: Day-to-day risks affecting routine operations.</li> <li>Project Level: Risks associated with specific projects or initiatives.</li> <li>Strategic Level: High-level risks impacting the overall direction and long-term goals of the organization.</li> </ul>"},{"location":"software-engineering/security/CISA/#cost-effective-balance","title":"Cost-Effective Balance","text":"<ul> <li>Control Implementations vs. Risk Acceptance: Ensuring that the cost of risk mitigation measures is justified by the potential impact of the risks.</li> </ul>"},{"location":"software-engineering/security/CISA/#information-systems-maturity-models","title":"Information Systems Maturity Models","text":""},{"location":"software-engineering/security/CISA/#purpose-of-maturity-models","title":"Purpose of Maturity Models","text":"<ul> <li>Assessment: Maturity models help assess the quality and effectiveness of an organization's information security processes.</li> <li>Improvement: They provide a framework for continuous improvement by identifying areas that need enhancement.</li> </ul>"},{"location":"software-engineering/security/CISA/#types-of-maturity-models","title":"Types of Maturity Models","text":"<p>Maturity models like CMMI and IDEAL provide a structured approach to evaluating and improving organizational processes, helping identify areas for enhancement and promoting continuous improvement.</p> <ul> <li>Capability Maturity Model Integration (CMMI): Developed by Carnegie Mellon and managed by ISACA, CMMI is widely used to evaluate and improve processes.</li> <li>IDEAL Model: Stands for Initiating, Diagnosing, Establishing, Acting, and Learning. It provides a structured approach to process improvement.</li> </ul>"},{"location":"software-engineering/security/CISA/#cmmi-levels","title":"CMMI Levels","text":"<p>Also said: Initial, Repeatable, Defined, Managed, Optimizing 1. Level 1 - Initial: Processes are unpredictable and poorly controlled. 2. Level 2 - Managed: Basic project management processes are established. 3. Level 3 - Defined: Processes are well-documented and standardized. 4. Level 4 - Quantitatively Managed: Processes are measured and controlled. 5. Level 5 - Optimizing: Focus on continuous process improvement.</p>"},{"location":"software-engineering/security/CISA/#information-systems-governance-risk-and-compliance-grc","title":"Information Systems Governance, Risk, and Compliance (GRC)","text":""},{"location":"software-engineering/security/CISA/#governance","title":"Governance","text":"<ul> <li>Definition: Governance involves setting policies, procedures, and controls to guide organizational operations.</li> <li>Responsibility: Senior management, board of directors, and executives are accountable for governance.</li> <li>Components: Includes internal audits, compliance programs, and operational risk management.</li> </ul>"},{"location":"software-engineering/security/CISA/#risk","title":"Risk","text":"<ul> <li>Definition: Risk management identifies, analyzes, and responds to potential threats to organizational assets.</li> <li>Process: Involves risk identification, analysis, planning, and response.</li> <li>Levels: Operational, project, and strategic levels of risk management.</li> </ul>"},{"location":"software-engineering/security/CISA/#compliance","title":"Compliance","text":"<ul> <li>Definition: Compliance ensures adherence to laws, regulations, and standards.</li> <li>Activities: Includes monitoring, auditing, and enforcing policies and procedures.</li> <li>Importance: Compliance is crucial for maintaining legal and regulatory standards.</li> </ul> <p>Governance, Risk, and Compliance (GRC)\u00a0are three interconnected and overlapping activities essential for effective information systems management.</p> <p>Governance\u00a0sets the direction and control mechanisms for the organization, ensuring that policies and procedures are in place and followed. This includes internal audits to verify compliance and operational risk management to address potential threats.</p> <p>Risk management\u00a0is the process of identifying, analyzing, and responding to risks that could impact the organization's assets and operations. It operates at different levels, from day-to-day operational risks to strategic risks that affect long-term goals.</p> <p>Compliance\u00a0ensures that the organization adheres to relevant laws, regulations, and standards. This involves continuous monitoring and auditing to enforce policies and procedures, ensuring that the organization remains within legal and regulatory boundaries.</p> <p>Quality Assurance (QA) is concerned with the processes and methodologies used to prevent defects in the development of information systems. Quality Control (QC), on the other hand, involves the identification and correction of defects in the final product.</p> <p>Effective cloud governance involves ensuring compliance with regulatory requirements, establishing clear policies for cloud usage, and implementing robust access control mechanisms to protect data and resources.</p> <p>Managing third-party services requires clear contractual obligations to define expectations and responsibilities, governance to oversee the relationship and ensure alignment with organizational goals, and internal audit reports to monitor performance and compliance.</p> <p>Financial auditing in information systems involves ensuring compliance with accounting standards and implementing chargeback models to allocate costs appropriately within the organization.</p> <p>Effective human resource management in information systems auditing includes policies and procedures for recruiting qualified personnel, providing ongoing training, managing hiring processes, and handling termination when necessary.</p> <p>Which of the following are key components of executing and monitoring in project management? - Information radiators,  - Work performance data,  - Scope management, These components are essential for tracking progress, managing scope, and ensuring that the project stays on schedule. Information radiators provide visual updates, work performance data tracks progress, scope management ensures the project stays within defined boundaries, the work breakdown structure organizes tasks, and the critical path method identifies the sequence of crucial tasks.</p> <p>A feasibility study assesses the viability of a project by analyzing potential risks, ensuring compliance with regulatory requirements, and managing stakeholder expectations. These components help determine whether the project is practical and worth pursuing.</p> <p>Fourth Generation Languages (4GL) are designed to be more user-friendly and efficient for system development. Workbench concepts enhance their utility by providing integrated development environments that streamline coding, testing, and deployment processes. EG: SAS, SQL, ABAP, MATLAB</p>"},{"location":"software-engineering/security/CISA/#decision-support-system","title":"Decision support system","text":"<ol> <li>Efficiency and Speed: By automating data collection and analysis, DSS increase the speed and efficiency of decision-making processes</li> <li>Risk Management: DSS help in identifying, assessing, and mitigating risks by providing comprehensive data analysis and predictive modeling</li> <li>Resource Optimization: They assist in optimizing the use of resources by analyzing various scenarios and their potential outcomes</li> <li>Strategic Planning: DSS support long-term strategic planning by providing insights into trends, patterns, and future projections</li> </ol> <p>Well-Known Examples of DSS 1. IBM Watson: An AI-powered DSS that helps in various fields, including healthcare, finance, and customer service. Watson analyzes vast amounts of data to provide insights and recommendations, enhancing decision-making processes. 2. SAP BusinessObjects: A suite of business intelligence tools that provide comprehensive data analysis, reporting, and visualization capabilities. It helps organizations make data-driven decisions by offering insights into business operations and performance.</p> <p>Proper organizational change management is crucial to address DSS implementation challenges. Ensuring data consistency is important but not the most significant challenge in implementing DSS.</p>"},{"location":"software-engineering/security/CISA/#organization-structures","title":"Organization structures","text":""},{"location":"software-engineering/security/CISA/#projectized-organization","title":"Projectized Organization","text":"<ul> <li>Structure: Organized entirely around projects. Teams are formed specifically for projects and disbanded after completion.</li> <li>Authority: Project managers have full authority over the project and its resources.</li> </ul>"},{"location":"software-engineering/security/CISA/#functional-organization","title":"Functional Organization","text":"<ul> <li>Structure: Divided into departments based on functions such as IT, finance, marketing, etc.</li> <li>Authority: Functional managers have the highest authority. Project managers have limited or no authority.</li> </ul>"},{"location":"software-engineering/security/CISA/#matrix-organization","title":"Matrix Organization","text":"<ul> <li>Structure: A blend of functional and projectized structures. Employees report to both functional and project managers.</li> <li>Authority: Shared between functional and project managers. The balance of power can vary:<ul> <li>Strong Matrix: Project manager has more authority.</li> <li>Weak Matrix: Functional manager has more authority.</li> <li>Balanced Matrix: Authority is shared equally.</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#testing-methodologies","title":"Testing Methodologies","text":""},{"location":"software-engineering/security/CISA/#1-importance-of-testing","title":"1. Importance of Testing","text":"<p>Role of Auditors: Verify that appropriate testing is conducted as part of control measures.</p>"},{"location":"software-engineering/security/CISA/#2-types-of-testing","title":"2. Types of Testing","text":"<ul> <li>Unit Testing: Tests individual pieces of code during development (e.g., during sprints in a Scrum environment).</li> <li>Integration Testing: Ensures that combined code from different developers works together without issues.</li> <li>System Testing: Tests the entire system as a whole to ensure it functions correctly.</li> <li>Quality Assurance Testing (QAT): Verifies that all requirements are met before final acceptance.</li> <li>User Acceptance Testing (UAT): Ensures that the system meets user expectations and requirements.</li> </ul>"},{"location":"software-engineering/security/CISA/#3-testing-classifications","title":"3. Testing Classifications","text":"<ul> <li>White Box Testing: Involves understanding the internal logic of the software and testing its procedural accuracy.</li> <li>Black Box Testing: Focuses on the functional effectiveness of the system without considering its internal structure.</li> <li>Regression Testing: Re-runs tests to ensure that changes or corrections have not introduced new errors.</li> <li>Alpha and Beta Testing:<ul> <li>Alpha: Conducted by internal users to identify initial issues.</li> <li>Beta: Conducted by a limited number of external users to identify any remaining issues before final release.</li> </ul> </li> <li>Parallel Testing: Compares the performance of a new system with the original system to ensure consistency and meet user requirements.</li> </ul>"},{"location":"software-engineering/security/CISA/#4-testing-approaches","title":"4. Testing Approaches","text":"<ul> <li>Bottom-Up Testing: Starts with small unit tests and progresses to larger system tests.</li> <li>Top-Down Testing: Begins with large system tests and works down to smaller unit tests.</li> </ul>"},{"location":"software-engineering/security/CISA/#5-post-testing-activities","title":"5. Post-Testing Activities","text":"<ul> <li>Reporting: Test results should be reported to relevant stakeholders (e.g., project managers).</li> <li>Issue Resolution: Address any issues identified during testing to ensure the final product meets quality standards.</li> </ul>"},{"location":"software-engineering/security/CISA/#changeover-techniques","title":"Changeover Techniques","text":""},{"location":"software-engineering/security/CISA/#1-importance-of-changeover","title":"1. Importance of Changeover","text":"<ul> <li>Purpose: Transitioning users from one system or application to another, ensuring minimal disruption and maintaining data integrity.</li> <li>Planning: Changeover must be planned and monitored to avoid loss of productivity and data compliance issues (e.g., GDPR, HIPAA).</li> </ul>"},{"location":"software-engineering/security/CISA/#2-types-of-changeover-techniques","title":"2. Types of Changeover Techniques","text":"<ul> <li>Parallel Changeover:<ul> <li>Description: Both old and new systems run simultaneously. Users can access both until they are comfortable with the new system.</li> <li>Advantages: Reduces risk by allowing fallback to the old system if issues arise.</li> <li>Disadvantages: Resource-intensive, requiring support and payment for both systems.</li> </ul> </li> <li>Phased Changeover:<ul> <li>Description: The old system is replaced module by module. Each module is tested and users are transitioned gradually.</li> <li>Advantages: Reduces risk by allowing gradual transition and testing of each module.</li> <li>Disadvantages: Extends project duration and can disrupt change management due to overlapping old and new modules.</li> </ul> </li> <li>Abrupt Changeover:<ul> <li>Description: The new system is brought online and all users are migrated at once, often within a short period (e.g., 24-48 hours).</li> <li>Advantages: Quick transition, useful when immediate change is necessary (e.g., ending licensing agreements).</li> <li>Disadvantages: High risk of data integrity issues, missing records, and asset safeguarding concerns.</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#it-asset-management","title":"IT Asset Management","text":"<p>An asset is anything tangible or intangible the company uses to create a product or a service. - Capability - Resource Assets have to be identified in an inventory first in order to be protected.</p>"},{"location":"software-engineering/security/CISA/#main-backend-devices","title":"Main backend devices:","text":"<ul> <li>Supercomputers</li> <li>mainframes</li> <li>high range servers</li> <li>desktop/laptop endpoint devices</li> <li>thin clients</li> </ul>"},{"location":"software-engineering/security/CISA/#usbrfid","title":"USB/RFID","text":"<p>Risks - theft of data / badge skimmers - malware injection - data corruptions Controls - data encryption - locked desktop - Personnel training</p>"},{"location":"software-engineering/security/CISA/#data-governance","title":"Data Governance","text":"<ul> <li>Data Quality and Lifecycle</li> <li>Operating systems</li> <li>Source code management</li> <li>Incident management</li> </ul>"},{"location":"software-engineering/security/CISA/#data-quality","title":"Data Quality","text":"<ul> <li>Intrinsic<ul> <li>Accuracy (reliable)</li> <li>Objectivity</li> <li>Believability</li> <li>Reputation</li> </ul> </li> <li>Contextual<ul> <li>Currency</li> <li>Interpretability</li> <li>Relevancy</li> <li>Completeness</li> <li>Amount</li> </ul> </li> <li>Security/accessibility<ul> <li>availability</li> <li>restricted access (confidentiality)</li> </ul> </li> </ul>"},{"location":"software-engineering/security/CISA/#data-lifecycle","title":"\ud83d\udcc1 Data Lifecycle","text":"<p>The data lifecycle encompasses the stages through which data progresses within an organization:\u200b</p> <ol> <li> <p>Plan: Establish data governance policies, define data requirements, and plan for data acquisition.\u200b</p> </li> <li> <p>Design: Develop data models, structures, and storage solutions aligning with business objectives.\u200b</p> </li> <li> <p>Build: Implement data systems, ensuring integration with existing infrastructure and adherence to security protocols.\u200b</p> </li> <li> <p>Use: Access and utilize data for operational and analytical purposes, maintaining data quality and integrity.</p> </li> <li> <p>Monitor: Continuously oversee data usage, performance, and compliance with policies.\u200bCISA</p> </li> <li> <p>Dispose: Securely delete or archive data that is no longer needed, in accordance with retention policies.\u200b</p> </li> </ol> <p>\u200bISACA ExamTopics</p>"},{"location":"software-engineering/security/CISA/#incident-management","title":"\ud83d\udea8 Incident Management","text":"<p>Effective incident management involves a structured approach:</p> <ol> <li> <p>Identification: Detect and acknowledge potential security incidents through monitoring and reporting mechanisms.\u200b</p> </li> <li> <p>Categorization: Classify incidents based on severity, impact, and type to prioritize response efforts.\u200b</p> </li> <li> <p>Resolution: Implement appropriate measures to contain, eradicate, and recover from the incident, followed by post-incident analysis.</p> </li> </ol> <p>CISA professionals must evaluate an organization's incident management processes, ensuring they are robust, well-documented, and capable of effectively handling security events.\u200b</p>"},{"location":"software-engineering/security/CISA/#release-and-patch-management","title":"\ud83d\udce6 Release and Patch Management","text":"<p>This area focuses on the systematic deployment of software updates:\u200b</p> <ul> <li> <p>Release Management: Oversee the planning, scheduling, and control of software builds through different stages and environments.\u200b</p> </li> <li> <p>Patch Management: Identify, acquire, test, and install patches to fix vulnerabilities and improve system functionality.\u200b</p> </li> </ul> <p>For CISA certification, auditors must assess whether organizations have effective release and patch management policies that minimize risks associated with software vulnerabilities.\u200b</p>"},{"location":"software-engineering/security/CISA/#business-impact-analysis-bia","title":"\ud83d\udcca Business Impact Analysis (BIA)","text":"<p>BIA is a process that helps organizations:\u200b  - Identify critical business functions and the resources that support them.\u200bInfosec Institute - Evaluate the potential impact of disruptions on these functions.\u200b   - Determine recovery priorities and strategies.   \u200bCISA ISACA BIA</p> <p>CISA candidates should understand how to assess the adequacy of BIA processes, ensuring they effectively inform disaster recovery and business continuity planning.\u200b</p>"},{"location":"software-engineering/security/CISA/#system-resiliency","title":"\ud83d\udd04 System Resiliency","text":"<p>System resiliency refers to the ability of an information system to withstand and recover from disruptions. Key concepts include:\u200b</p> <ul> <li> <p>Recovery Point Objective (RPO): The maximum tolerable period in which data might be lost due to a major incident.\u200b</p> </li> <li> <p>Recovery Time Objective (RTO): The targeted duration of time within which a business process must be restored after a disruption.\u200b</p> </li> <li> <p>Active-Passive Configuration: A setup where the secondary system remains idle until the primary system fails.\u200b</p> </li> <li> <p>Active-Active Configuration: Both systems run concurrently, providing load balancing and high availability.\u200b</p> </li> </ul>"},{"location":"software-engineering/security/CISA/#information-systems-operations-and-business-resiliency","title":"\ud83e\udde9 'Information Systems Operations and Business Resiliency'","text":"<p>General Overview: Information Systems Operations and Business Resiliency encompass the strategies and practices that ensure IT systems support business objectives and can withstand disruptions. This includes robust infrastructure, effective incident response, and continuous improvement processes.\u200b</p> <p>CISA Relevance: CISA professionals evaluate the alignment of IT operations with business resiliency goals, ensuring that systems are reliable, secure, and capable of supporting critical functions during adverse events.\u200b</p> <p>Resource: Information Systems Operations and Business Resiliency - ACI Learning\u200b</p>"},{"location":"software-engineering/security/CISA/#backups-storage-and-restoration","title":"\ud83d\udd04 Backups, Storage, and Restoration","text":"<p>General Overview: Effective backup strategies are crucial for data integrity and business continuity. Implementing the 3-2-1 backup rule\u2014maintaining three copies of data, on two different media, with one off-site\u2014ensures resilience against data loss. Regular testing of backups is essential to confirm data can be restored when needed.\u200b</p> <ul> <li>Full</li> <li>Incremental</li> <li>Differential</li> <li>Rotation of media</li> </ul> <p>Resource: Backup &amp; Recovery Trends 2025 - Unitrends\u200bUnitrends+1Unitrends+1</p>"},{"location":"software-engineering/security/CISA/#business-continuity-management-bcm","title":"\ud83d\udee1\ufe0f Business Continuity Management (BCM)","text":"<p>General Overview: Business Continuity Management (BCM) involves preparing for potential disruptions to maintain critical business functions. It encompasses risk assessments, business impact analyses, and the development of strategies to ensure operational resilience.\u200b</p> <p>Disasters could be: - local - regional - global - Due to human error or malicious entities (terrorism, malware, hackers)</p> <p>Resource: 2025 Trends in Continuity and Resilience - Fusion Risk Management\u200bfusionrm.com</p>"},{"location":"software-engineering/security/CISA/#the-business-continuity-plan-bcp","title":"\ud83d\udccb The Business Continuity Plan (BCP)","text":"<p>General Overview: A Business Continuity Plan (BCP) outlines procedures and resources required to maintain business operations during unforeseen events. It includes identifying critical functions, assigning responsibilities, and establishing communication protocols.\u200b</p> <ul> <li>BCP starts with risk assessment</li> <li>Needs Inventory of Critical operations, human and material resources needed (BIA)</li> <li>Needs a metrics to be monitored to define what is a \"major incident\"</li> </ul> <p>Resource: 20 Essential Elements Of A Robust Business Continuity Plan - Forbes</p>"},{"location":"software-engineering/security/CISA/#testing-the-bcp","title":"\ud83e\uddea Testing the BCP","text":"<p>General Overview: Regular testing of the BCP is vital to validate its effectiveness. Testing methods include tabletop exercises, simulations, and full-scale drills, which help identify gaps and areas for improvement.\u200b</p> <ul> <li>pre-test</li> <li>test</li> <li>post-test: report time and resources consumed, missed steps from the plan...</li> </ul> <p>Resource: 6 Business Continuity Plan Testing Best Practices - Noggin\u200b</p>"},{"location":"software-engineering/security/CISA/#disaster-recovery-plans-drp","title":"\ud83c\udf2a\ufe0f Disaster Recovery Plans (DRP)","text":"<p>General Overview: Disaster Recovery Plans (DRPs) focus on restoring IT systems and data after a disruption. Key components include defining Recovery Time Objectives (RTOs), Recovery Point Objectives (RPOs), and establishing recovery procedures.\u200b</p> <p>RTO is the maximum tolerable duration of any outage. RPO is the maximum acceptable amount of data loss measured in time.</p> <p>Resource: How to Write a Disaster Recovery Plan in 2025: Template + Examples - Secureframe</p>"},{"location":"software-engineering/security/CISA/#testing-the-drp","title":"\ud83e\uddea Testing the DRP","text":"<p>General Overview: Testing the DRP involves simulating disaster scenarios to evaluate the effectiveness of recovery procedures. Regular testing helps identify weaknesses and ensures that recovery objectives can be met.\u200b</p> <p>\u200blibertycenterone.com+2LinkedIn+2Duplicacy Forum+2</p> <p>Resource: Disaster Recovery Testing: What It Is, How It Works and Where To Start - Warren Averett\u200b</p>"},{"location":"software-engineering/security/CISA/#protection-of-information-assets","title":"\ud83d\udee1\ufe0f Protection of Information Assets","text":""},{"location":"software-engineering/security/CISA/#frameworks-roles-and-data-protection","title":"Frameworks, Roles, and Data Protection","text":"<p>Protecting information assets involves implementing structured frameworks that define roles, responsibilities, and data protection measures. The NIST Cybersecurity Framework (CSF) is widely adopted, comprising five core functions: Identify, Protect, Detect, Respond, and Recover. These functions guide organizations in managing and reducing cybersecurity risks.\u200bWikipedia</p> <p>Roles and responsibilities are delineated within these frameworks to ensure accountability and effective implementation of security measures.\u200b</p> <p>Data protection strategies include:\u200b</p> <ul> <li>Data Classification: Categorizing data based on sensitivity to apply appropriate security controls.  \u200b</li> <li>Encryption: Protecting data confidentiality during storage and transmission.\u200b  </li> <li>Regular Audits: Assessing compliance with data protection policies and identifying potential vulnerabilities.\u200b  </li> </ul> <p>Data privacy:  foundational guidelines that govern the collection, processing, and storage of personal data. Key principles include:\u200b     - Lawfulness, Fairness, and Transparency: Data must be processed legally, fairly, and transparently to the individual.        \u200bHomepage | Data Protection Commission     - Purpose Limitation: Data should be collected for specified, explicit, and legitimate purposes and not further processed in a manner incompatible with those purposes.\u200b       Data Protection Principles      - Data Minimization: Only data that is necessary for the intended purpose should be collected.\u200b     - Integrity and Confidentiality: Data must be processed securely to prevent unauthorized access, loss, or damage.\u200b</p> <p>Access Controls: Ensuring only authorized individuals can access specific data.\u200b   Investopedia </p> <p>Physical access controls are security measures designed to prevent unauthorized physical access to facilities, equipment, and resources. Key components include:\u200b     - Access Control Systems: Utilizing key cards, biometric scanners, or PIN codes to restrict entry to authorized personnel.\u200b     - Surveillance Systems: Implementing CCTV cameras to monitor and record activities in sensitive areas.\u200b     - Security Personnel: Employing trained security staff to oversee access points and respond to incidents.\u200b     - Visitor Management: Maintaining logs of visitors, issuing temporary badges, and escorting them within the premises.\u200b       - Regular Audits: Conducting periodic reviews of access logs and physical security measures to ensure effectiveness.  </p> <p>https://www.idmanagement.gov/university/pacs/</p> <p>Environmental Controls:      - Fire Suppression Systems: Installing fire alarms and suppression systems to detect and extinguish fires promptly.\u200b       - Climate Control: Maintaining optimal temperature and humidity levels to prevent equipment overheating or condensation.\u200b         - Uninterruptible Power Supplies (UPS): Providing backup power to maintain operations during outages.\u200b         - Water Leak Detection: Implementing sensors to detect and alert for water leaks that could damage equipment.\u200b         - Seismic Protection: Designing facilities to withstand earthquakes, including securing equipment to prevent tipping.  </p> <p>For a comprehensive understanding of the NIST CSF, refer to the NIST Cybersecurity Framework.\u200b</p>"},{"location":"software-engineering/security/CISA/#it-security-baseline","title":"IT Security baseline:","text":"<ul> <li>password policy</li> <li>automated patch management</li> <li>Asset inventory</li> <li>Addressing vulnerabilities</li> <li>Backups: present and tested</li> </ul>"},{"location":"software-engineering/security/CISA/#asset-management-and-logging","title":"\ud83d\udce6 Asset Management and Logging","text":"<p>Effective asset management and logging are critical for maintaining security and facilitating incident response.\u200b</p>"},{"location":"software-engineering/security/CISA/#asset-management","title":"Asset Management","text":"<p>Asset management involves maintaining an up-to-date inventory of all hardware, software, and data assets. This practice ensures that security measures can be appropriately applied and that assets are accounted for during risk assessments.\u200b</p>"},{"location":"software-engineering/security/CISA/#logging","title":"Logging","text":"<p>Logging entails recording events and activities within information systems to monitor operations and detect anomalies. Key aspects include:\u200b</p> <ul> <li> <p>Comprehensive Log Collection: Capturing logs from various sources such as operating systems, applications, and network devices.\u200b</p> </li> <li> <p>Log Management Policies: Establishing procedures for log retention, analysis, and disposal.\u200b</p> </li> <li> <p>Security Information and Event Management (SIEM): Utilizing tools to aggregate and analyze log data for real-time threat detection.\u200b</p> </li> </ul> <p>For guidance on audit log management, consult CIS Control 8: Audit Log Management.\u200b</p>"},{"location":"software-engineering/security/CISA/#network-security-cloud-computing-and-cryptography","title":"\ud83c\udf10 Network Security, Cloud Computing, and Cryptography","text":""},{"location":"software-engineering/security/CISA/#network-security","title":"Network Security","text":"<p>Network security encompasses measures to protect the integrity, confidentiality, and availability of data during transmission. Key components include:\u200b</p> <ul> <li> <p>Firewalls: Controlling incoming and outgoing network traffic based on predetermined security rules.\u200b</p> </li> <li> <p>Intrusion Detection and Prevention Systems (IDPS): Monitoring networks for malicious activities and policy violations.\u200b</p> </li> <li> <p>Virtual Private Networks (VPNs): Establishing secure connections over public networks.\u200b</p> </li> </ul>"},{"location":"software-engineering/security/CISA/#cloud-computing","title":"Cloud Computing","text":"<p>The adoption of cloud computing introduces unique security challenges, such as data breaches and misconfigurations. To mitigate these risks:\u200bFinancial Times</p> <ul> <li> <p>Data Encryption: Encrypting data both at rest and in transit.\u200b</p> </li> <li> <p>Access Management: Implementing strict access controls and multi-factor authentication.\u200b</p> </li> <li> <p>Regular Audits: Assessing cloud service providers' security practices and compliance.\u200b</p> </li> </ul> <p>For insights into cloud security risks, refer to Banks moving into the cloud prompt forecasts of security risk.\u200b</p>"},{"location":"software-engineering/security/CISA/#cryptography","title":"Cryptography","text":"<p>Cryptography is essential for securing data through encryption and ensuring secure communication. There are two primary types:\u200b </p> <ul> <li>Symmetric Encryption: Uses the same key for encryption and decryption.\u200b  </li> <li>Asymmetric Encryption: Utilizes a pair of keys\u2014a public key for encryption and a private key for decryption.\u200b</li> </ul> <p>As quantum computing advances, traditional encryption methods face potential vulnerabilities. Organizations are exploring post-quantum cryptography to address these emerging threats. \u200b</p> <p>For a detailed explanation of encryption, see What Is Encryption? How It Works, Types, and Benefits.\u200b</p>"},{"location":"software-engineering/security/CISA/#security-testing-incident-management-and-forensics","title":"\ud83e\uddea Security Testing, Incident Management, and Forensics","text":""},{"location":"software-engineering/security/CISA/#security-testing","title":"Security Testing","text":"<p>Regular security testing is vital to identify and remediate vulnerabilities. Common testing methods include:\u200b</p> <ul> <li>Vulnerability Scanning: Automated tools to detect known vulnerabilities.\u200b      </li> <li>Penetration Testing: Simulated attacks to evaluate system defenses.\u200b      </li> <li>Security Audits: Comprehensive reviews of security policies and controls.\u200b</li> </ul>"},{"location":"software-engineering/security/CISA/#incident-management_1","title":"Incident Management","text":"<p>Incident management involves preparing for, detecting, responding to, and recovering from security incidents. Key steps include:\u200b</p> <ul> <li>Preparation: Establishing incident response plans and teams.\u200b   </li> <li>Detection and Analysis: Identifying incidents and assessing their impact.\u200b      </li> <li>Containment, Eradication, and Recovery: Isolating affected systems, removing threats, and restoring operations.\u200b  </li> <li>Post-Incident Activity: Analyzing incidents to improve future responses.\u200b  </li> </ul>"},{"location":"software-engineering/security/CISA/#forensics","title":"Forensics","text":"<p>Digital forensics involves collecting and analyzing electronic evidence to investigate incidents. This process supports legal proceedings and helps organizations understand breaches to prevent recurrence.</p>"},{"location":"software-engineering/security/CISA/#infosec-network-infrastructure","title":"\ud83d\udd10 Infosec Network Infrastructure","text":""},{"location":"software-engineering/security/CISA/#network-infrastructure-security-firewalls","title":"\ud83d\udee1\ufe0f Network Infrastructure Security &amp; Firewalls","text":"<p>Network infrastructure security involves safeguarding the hardware and software resources that facilitate network connectivity, communication, operations, and management. Firewalls are critical components that monitor and control incoming and outgoing network traffic based on predetermined security rules. They act as barriers between trusted internal networks and untrusted external networks, such as the internet. \u200bRed Hat - cloud-vs-virtualization</p> <p>Key Concepts:</p> <ul> <li>Firewalls: Devices or software that enforce security policies by filtering traffic.\u200b   CISA - securing-network-infrastructure-devices </li> <li>Segmentation: Dividing a network into segments to control traffic flow and limit access.    firewall-security </li> <li>Access Control Lists (ACLs): Rules that permit or deny traffic based on various criteria.\u200b</li> </ul> <p>Resource: VMware: Network Infrastructure Security</p>"},{"location":"software-engineering/security/CISA/#change-management-in-networks","title":"\ud83d\udd04 Change Management in Networks","text":"<p>Change management is a systematic approach to dealing with alterations in network infrastructure. It ensures that changes are made with minimal disruption to services and includes planning, testing, and implementing changes while maintaining security and compliance.\u200bvivantio.com - what-is-change-management-in-cyber-security</p> <p>Key Concepts: - Risk Assessment: Evaluating potential impacts of changes.\u200b     - Documentation: Keeping detailed records of changes for accountability.\u200b     - Approval Processes: Ensuring changes are reviewed and authorized before implementation.\u200b  itsecurityguru.org - effective-change-management-practices </p> <p>Resource: TechTarget: 5 Principles of Network Change Management</p>"},{"location":"software-engineering/security/CISA/#encryption-systems","title":"\ud83d\udd10 Encryption Systems","text":"<p>Encryption is the process of converting data into a coded format to prevent unauthorized access. It is fundamental to protecting sensitive information both at rest and in transit.\u200bTechTarget - Encryption</p> <p>Key Concepts: - Symmetric Encryption: Uses the same key for encryption and decryption.\u200bsafebase.io  - Asymmetric Encryption: Uses a pair of keys (public and private) for encryption and decryption.\u200b - End-to-End Encryption (E2EE): Ensures that data is encrypted on the sender's system and only decrypted on the recipient's system.\u200b      </p> <p>Resource: Google Cloud: What is Encryption?\u200b</p>"},{"location":"software-engineering/security/CISA/#applications-of-cryptography","title":"\ud83d\udd10 Applications of Cryptography","text":"<p>Cryptography is used to secure communication and protect information from adversaries. Its applications are vast and integral to information security. \u200bTutorialsPoint applications-of-cryptography-in-information-security</p> <p>Key Applications:</p> <ul> <li>Secure Communications: Protecting data during transmission.\u200b      </li> <li>Authentication: Verifying the identity of users and devices.\u200b      </li> <li>Data Integrity: Ensuring that information has not been altered.</li> </ul> <p>Resource: IBM: Cryptography Use Cases</p>"},{"location":"software-engineering/security/CISA/#the-public-key-infrastructure-pki","title":"\ud83d\udd11 The Public Key Infrastructure (PKI)","text":"<p>PKI is a framework that enables secure, encrypted communication and authentication over networks. It uses a pair of cryptographic keys and digital certificates issued by a Certificate Authority (CA).\u200b Keyfactor - PKI</p> <p>Key Components: - Certificate Authority (CA): Trusted entity that issues digital certificates.\u200bGeeksforGeeks - Registration Authority (RA): Verifies the identity of entities requesting certificates.     - Digital Certificates: Electronic documents that use a digital signature to bind a public key with an identity.\u200b</p> <p>Resource: Okta: What is Public Key Infrastructure?\u200b</p>"},{"location":"software-engineering/security/CISA/#is-audits-and-social-media","title":"\ud83d\udccb IS Audits and Social Media","text":"<p>Information Systems (IS) audits assess the controls and security of an organization's information systems. With the rise of social media, audits now also encompass the evaluation of social media policies, usage, and associated risks.\u200b</p> <p>One of the largest attack vectors into organizations.</p> <p>Key Considerations: - Policy Compliance: Ensuring social media use aligns with organizational policies.\u200b - Risk Management: Identifying and mitigating risks such as data leaks and reputational damage.\u200b - Monitoring: Regularly reviewing social media activity for unauthorized or inappropriate content.\u200b  </p> <p>Resource: AuditBoard: Auditing Social Media\u200b</p>"},{"location":"software-engineering/security/CISA/#virtualization-and-cloud-computing","title":"\u2601\ufe0f Virtualization and Cloud Computing","text":"<p>Virtualization and cloud computing have transformed IT infrastructure, offering scalability and flexibility. However, they also introduce new security challenges that must be addressed.\u200b</p> <p>Key Security Aspects:</p> <ul> <li>Hypervisor Security: Protecting the software layer that enables virtualization.\u200b      </li> <li>Isolation: Ensuring that virtual machines (VMs) are isolated to prevent cross-contamination.\u200bcloud-and-virtualization-security </li> <li>Access Control: Managing who has access to virtual environments and cloud resources.\u200b  </li> </ul> <p>Resource: Red Hat: Virtualization vs Cloud Computing</p>"},{"location":"software-engineering/security/Fundamental-security-models/","title":"Fundamental security models","text":""},{"location":"software-engineering/security/Fundamental-security-models/#bell-lapadula","title":"Bell-LaPadula","text":"<p>Confidentiality focused. - no reads up - no write down - not designed to handle file-sharing.</p>"},{"location":"software-engineering/security/Fundamental-security-models/#biba","title":"Biba","text":"<p>Integrity - \"no read down\": a higher integrity subject should not read from a lower integrity subject - \u201cno write up\u201d: a lower integrity subject should not write to a higher integrity object.</p>"},{"location":"software-engineering/security/Fundamental-security-models/#clark-wilson","title":"Clark-Wilson","text":"<ul> <li>Constrained Data Item (CDI): data type whose integrity we want to preserve.</li> <li>Unconstrained Data Item (UDI)</li> </ul>"},{"location":"software-engineering/security/Fundamental-security-models/#goguen-meseguer","title":"Goguen-Meseguer","text":"<p>Goguen-Meseguer  distinguish between a security policy, which defines the security requirements for a given system, and the system itself, which may be represented by a model.</p> <p>also known as the Noninterference model, is a strict multilevel security policy model designed to ensure that actions at one security level do not interfere with or affect actions at another level. Here are the key points:</p> <ol> <li>Non-interference Principle: The core idea is that actions performed by users at a higher security level should not influence what users at a lower security level can observe. This ensures that sensitive information does not leak to unauthorized users</li> <li>Inputs and Outputs: The model treats a computer system as a machine with inputs and outputs. It ensures that the outputs seen by users at a lower security level are not affected by inputs from higher security levels    </li> <li>Formal Security Policies: The model provides a formal framework for specifying and verifying security policies. It supports rigorous treatment of information flow and helps in proving that a given system satisfies a given security policy</li> </ol>"},{"location":"software-engineering/security/Fundamental-security-models/#isoiec-19249","title":"ISO/IEC 19249","text":""},{"location":"software-engineering/security/Fundamental-security-models/#architectural-principles","title":"Architectural Principles","text":"<ol> <li>Domain Separation: Isolate different functional areas (applications, data, policies...) to limit the impact of potential compromises. #Goguen-Meseguer</li> <li>Layering: Organize the system into layers to improve management and security (e.g.: OSI model).</li> <li>Encapsulation: Hide the internal details of components to reduce unwanted interactions.</li> <li>Redundancy: Implement duplicate components to ensure system availability and resilience.</li> <li>Virtualization: Use virtualization technologies to isolate and protect resources.</li> </ol>"},{"location":"software-engineering/security/Fundamental-security-models/#security-design-principles","title":"Security Design Principles","text":"<ol> <li>Least Privilege: Assign users and processes only the permissions strictly necessary.</li> <li>Minimize Attack Surface: Reduce the number of vulnerable points in the system.</li> <li>Centralized Parameter Validation: Control and validate input data at a single point.</li> <li>Defense in Depth: Implement multiple layers of security to protect the system.</li> <li>Separation of Duties: Divide responsibilities among multiple people or processes to prevent abuse.</li> </ol>"},{"location":"software-engineering/security/Fundamental-security-models/#integration-with-modern-devops-practices","title":"Integration with Modern DevOps Practices","text":"<p>Modern DevOps practices can further enhance these principles:</p> <ul> <li>Automation: Use tools like Jenkins, Docker, and Kubernetes to automate deployment and application management, reducing human error and improving consistency.</li> <li>Continuous Integration/Continuous Deployment (CI/CD): Implement CI/CD pipelines to ensure that every code change is tested and deployed quickly and securely.</li> <li>Infrastructure as Code (IaC): Use tools like Terraform and Ansible to manage infrastructure as code, improving traceability and reproducibility of configurations.</li> <li>Monitoring and Logging: Implement monitoring and logging solutions like Prometheus and ELK Stack to detect and respond quickly to security incidents.</li> <li>Collaboration and Communication: Promote a culture of collaboration between development, security, and operations teams to ensure that security practices are integrated at every stage of the development lifecycle.</li> </ul>"},{"location":"software-engineering/security/Fundamental-security-models/#zero-trust-vs-trust-but-verify","title":"Zero Trust VS Trust but verify","text":"<p>Trust but Verify: This principle teaches that we should always verify even when we trust an entity and its behaviour. This requires automated security mechanisms, such as proxy, intrusion detection, and intrusion prevention systems.</p> <p>Zero Trust: This principle treats trust as a vulnerability, and consequently, it caters to insider-related threats. Zero trust does not grant trust to a device based on its location or ownership.</p>"},{"location":"software-engineering/security/Fundamental-security-models/#vulnerabilities-and-risks","title":"Vulnerabilities and Risks","text":"<ul> <li>Vulnerability: Vulnerable means susceptible to attack or damage. In information security, a vulnerability is a weakness.</li> <li>Threat: A threat is a potential danger associated with this weakness or vulnerability.</li> <li>Risk: The risk is concerned with the likelihood of a threat actor exploiting a vulnerability and the consequent impact on the business.</li> </ul>"},{"location":"software-engineering/security/KodeKloud%20CKS%20challenge%20%232/","title":"KodeKloud CKS challenge #2","text":"<p>Dockerfile</p> <ul> <li>1. Run as non root(instead, use correct application user)  </li> <li>2. Avoid exposing unnecessary ports  </li> <li>3. Avoid copying the 'Dockerfile' and other unnecessary files and directories in to the image. Move the required files and directories (app.py, requirements.txt and the templates directory) to a subdirectory called 'app' under 'webapp' and update the COPY instruction in the 'Dockerfile' accordingly.  </li> <li>4. Once the security issues are fixed, rebuild this image locally with the tag 'kodekloud/webapp-color:stable'</li> </ul> <p>cat Dockerfile ================================================================= FROM python:3.6-alpine ## Install Flask RUN pip install flask ## Copy All files to /opt COPY . /opt/ ## Flask app to be exposed on port 8080 EXPOSE 8080 ## Flask app to be run as 'worker' RUN adduser -D worker ## Expose port 22 EXPOSE 22 WORKDIR /opt USER root ENTRYPOINT [\"python\", \"app.py\"] ================================================================= cd webapp mkdir app mv app.py requirements.txt templates/ app/</p> <p>================================================================= FROM python:3.6-alpine</p> <p>ENV PATH=$PATH:/home/worker/.local/bin</p> <p>COPY app/ /opt/ WORKDIR /opt</p> <p>## Install Flask RUN apk -U update \\     &amp;&amp; python -m pip install --upgrade pip \\     &amp;&amp; pip install -r requirements.txt \\     &amp;&amp; adduser -D worker    </p> <p>## Flask app to be exposed on port 8080 EXPOSE 8080 USER worker</p> <p>ENTRYPOINT [\"python\", \"app.py\"]</p> <p>================================================================= docker build -t kodekloud/webapp-color:stable .</p> <p>================================================================== ==================================================================</p> <ul> <li>Ensure that the pod 'dev-webapp' is immutable:  </li> <li>1. This pod can be accessed using the 'kubectl exec' command. We want to make sure that this does not happen. Use a startupProbe to remove all shells before the container startup. Use 'initialDelaySeconds' and 'periodSeconds' of '5'. Hint: For this to work you would have to run the container as root!  </li> <li>2. Image used: 'kodekloud/webapp-color:stable'  </li> <li>3. Redeploy the pod as per the above recommendations and make sure that the application is up.</li> </ul> <p>kubectl delete pod -n dev dev-webapp --force kubectl delete pod -n staging staging-webapp --force</p> <p>cd  vim dev-webapp.yaml  https://gist.github.com/tuxerrante/8d1568306e55a2fd67ad0707a266348c</p> <p>https://gist.github.com/tuxerrante/43fe3b0c93453901630bc23d2ea13b1c</p> <p>================================================================== apiVersion: v1 kind: Pod metadata:   labels:     name: dev-webapp   name: dev-webapp   namespace: dev spec:   containers:   - env:     - name: APP_COLOR       value: darkblue   image: kodekloud/webapp-color:stable   imagePullPolicy: Never   name: webapp-color   resources: {}   startupProbe:     exec:       command:         - rm         - /bin/ash         - /bin/sh       securityContext:     runAsUser: 0     allowPrivilegeEscalation: false     capabilities:       add:          - NET_ADMIN   terminationMessagePath: /dev/termination-log   terminationMessagePolicy: File   volumeMounts:     - mountPath: /var/run/secrets/kubernetes.io/serviceaccount       name: kube-api-access-z4lvb       readOnly: true   dnsPolicy: ClusterFirst   enableServiceLinks: true   nodeName: controlplane   preemptionPolicy: PreemptLowerPriority   priority: 0   restartPolicy: Always   schedulerName: default-scheduler   securityContext: {}   serviceAccount: default   serviceAccountName: default   terminationGracePeriodSeconds: 30   tolerations:   - effect: NoExecute     key: node.kubernetes.io/not-ready     operator: Exists     tolerationSeconds: 300   - effect: NoExecute     key: node.kubernetes.io/unreachable     operator: Exists     tolerationSeconds: 300   volumes:   - name: kube-api-access-z4lvb     projected:     defaultMode: 420     sources:     - serviceAccountToken:         expirationSeconds: 3607         path: token     - configMap:         items:         - key: ca.crt           path: ca.crt         name: kube-root-ca.crt     - downwardAPI:         items:         - fieldRef:           apiVersion: v1           fieldPath: metadata.namespace         path: namespace</p> <p>================================================================== ==================================================================</p> <p>kubectl apply -f dev-webapp.yaml kubectl get events -n dev --sort-by='.lastTimestamp' </p> <p>k get pods -n dev </p> <p>k logs -n dev dev-webapp </p> <p>## Sometimes the container doesn't get pull by the dev pod. Removing and reinstalling it, works..</p> <p>kubesec scan kodekloud/webapp-color:stable [   {     \"object\": \"Pod/dev-webapp.dev\",     \"valid\": true,     \"fileName\": \"dev-webapp.yaml\",     \"message\": \"Failed with a score of -34 points\",     \"score\": -34,     \"scoring\": {     \"critical\": [         {         \"id\": \"CapSysAdmin\",         \"selector\": \"containers[] .securityContext .capabilities .add == SYS_ADMIN\",         \"reason\": \"CAP_SYS_ADMIN is the most privileged capability and should always be avoided\",         \"points\": -30         },         {         \"id\": \"AllowPrivilegeEscalation\",         \"selector\": \"containers[] .securityContext .allowPrivilegeEscalation == true\",         \"reason\": \"\",         \"points\": -7         } \u2026</p> <p>================================================================== ================================================================== cat staging-webapp.yaml</p> <p>--- apiVersion: v1 kind: Pod metadata:   labels:     name: staging-webapp   name: staging-webapp   namespace: staging spec:   containers:   - env:     - name: APP_COLOR     value: pink     image: kodekloud/webapp-color:stable     imagePullPolicy: Never     name: webapp-color     resources: {}     securityContext:     allowPrivilegeEscalation: false     runAsUser: 0     capabilities:         add:         - NET_ADMIN     terminationMessagePath: /dev/termination-log     terminationMessagePolicy: File     volumeMounts:     - mountPath: /var/run/secrets/kubernetes.io/serviceaccount     name: kube-api-access-v78f2     readOnly: true   dnsPolicy: ClusterFirst   enableServiceLinks: true   nodeName: controlplane   preemptionPolicy: PreemptLowerPriority   priority: 0   restartPolicy: Always   schedulerName: default-scheduler   securityContext: {}   serviceAccount: default   serviceAccountName: default   terminationGracePeriodSeconds: 30   tolerations:   - effect: NoExecute     key: node.kubernetes.io/not-ready     operator: Exists     tolerationSeconds: 300   - effect: NoExecute     key: node.kubernetes.io/unreachable     operator: Exists     tolerationSeconds: 300   volumes:   - name: kube-api-access-v78f2     projected:     defaultMode: 420     sources:     - serviceAccountToken:         expirationSeconds: 3607         path: token     - configMap:         items:         - key: ca.crt             path: ca.crt         name: kube-root-ca.crt     - downwardAPI:         items:         - fieldRef:             apiVersion: v1             fieldPath: metadata.namespace             path: namespace</p> <p>================================================================== ================================================================== kubectl delete -n dev pod dev-webapp kubectl apply -f dev-webapp.yaml</p> <p>================================================================== ================================================================== Use a network policy called 'prod-netpol' that will only allow traffic within the 'prod' namespace. All the traffic from other namespaces should be denied.</p> <p>apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: prod-netpol namespace: prod spec: podSelector: matchLabels: policyTypes: - Ingress</p> <p>ingress: - from: - podSelector: {}</p> <p>================================================================== ==================================================================</p> <p>kubectl create secret -n prod generic prod-db \\   --from-literal=db-user=root \\   --from-literal=db-psw=paswrd \\   \u2013from-literal=DB_Host=prod-db</p> <p>https://gist.github.com/tuxerrante/8dcc7c4867e8792a55a996c4c269ea17</p> <p>spec:   containers:   - env:     - name: DB_Host       valueFrom:         secretKeyRef:         key: DB_Host         name: prod-db  </p> <p>- name: DB_User      valueFrom:        secretKeyRef:         key: db-user         name: prod-db</p> <pre><code>\\- name: DB\\_Password  \n  valueFrom:  \n    secretKeyRef:  \n    key: db-psw  \n    name: prod-db\n</code></pre> <p>==========================================================</p> <p>\u279c  kubectl edit deployments.apps -n prod prod-web deployment.apps/prod-web edited</p> <p>\u279c  kubectl rollout -n prod restart deployment prod-web</p>"},{"location":"software-engineering/security/security-hardening/","title":"Security hardening","text":"<p>If you've found this useful please consider supporting me!</p> <p>These notes are intended for a cloud native friendly, enterprise company.</p>"},{"location":"software-engineering/security/security-hardening/#work-management","title":"Work management","text":"<ul> <li> <p>Legal responsibilities?</p> <ul> <li>CISO</li> <li>ISO 27001</li> </ul> </li> <li> <p>Kanban style or FiFo (high risk new vulnerabilities going again on the top)?</p> </li> </ul> <p>Cloud Native Security Whitepaper | CNCF TAG Security</p>"},{"location":"software-engineering/security/security-hardening/#dev-teams","title":"Dev Teams","text":"<ul> <li>Repository Mandatory Pre commit hooks<ul> <li>Static code analysis</li> <li>Security-linter</li> <li>Signed commits</li> </ul> </li> <li>Docker container scanning at build time (Grype/Trivy) and runtime (Anchore)</li> <li>Automated dependencies updates (Renovate)</li> <li>Automated leaking secret scanning (Gitleaks / Trufflehog)</li> <li>\ud83d\udd0f Only private docker images in all services based on multi-stage images configured from scratch or Alpine</li> <li>OWASP API Security Top 10 Overview &amp; Best Practices | F5</li> </ul>"},{"location":"software-engineering/security/security-hardening/#people","title":"People","text":"<p>Devices:     - Automatic updates     - Certified in EU,     - No apps from outside marketplace,     - Enforce certificates with 2FA</p> <p>Management &amp; VP: - periodical smartphone and laptop reset - Management: physical access key to login to VPN - Social networks     - No public profiles     - No apps from non democratic countries</p>"},{"location":"software-engineering/security/security-hardening/#processes","title":"Processes","text":"<ul> <li>Automated penetration test pipelines</li> <li>Weekly Cis Benchmark</li> <li>Quarterly Well architected Framework review</li> <li>Continuous Chaos engineering (Litmus)</li> <li>Zero trust architecture<ul> <li>Seven zero trust rules for Kubernetes | CNCF</li> <li>Https everywhere</li> <li>Spiffe / Spire</li> </ul> </li> </ul>"},{"location":"software-engineering/security/security-hardening/#ops","title":"Ops","text":"<p>Dashboard: - Grafana is an open-source analytics and monitoring platform. It integrates seamlessly with Prometheus to visualize metrics. You can create dashboards to monitor the health and performance of your AKS clusters. - Kibana</p> <p>Logs: - OpenTelemetry: a unified approach to collecting metrics, logs, and traces.\u00a0It\u2019s an observability framework that supports multiple backends, including Prometheus and Jaeger (logz). - Fluentd: For log aggregation, Fluentd can be used to collect and forward logs to various destinations, including Elasticsearch and Azure Monitor.</p> <p>Metrics: - Prometheus is a powerful open-source monitoring and alerting toolkit. It can scrape metrics from your AKS clusters and store them in a time-series database. You can set up Prometheus to monitor various metrics from your Kubernetes environment.</p> <p>Traces: - Jaeger is an open-source tool for tracing and monitoring microservices. It helps you understand the performance of your microservices by providing end-to-end distributed tracing. You can deploy Jaeger in your AKS cluster to collect and visualize traces.</p> <p>Alerts: - Site 24x7 - Alertmanager works with Prometheus to handle alerts. It can route alerts to different receivers like email, Slack, MS Teams, or other notification systems. You can configure Alertmanager to manage and silence alerts based on your requirements.     - prometheus-msteams/prometheus-msteams: Forward Prometheus Alert Manager notifications to Microsoft Teams. (github.com)</p> <ul> <li>Platform security standard enforcement (kyverno)</li> <li>Runtime dependencies + licenses scan (Dependency Track)</li> </ul>"},{"location":"software-engineering/security/security-hardening/#kubernetes-specific-configurations","title":"Kubernetes specific configurations:","text":"<ul> <li>External Secrets Operator<ul> <li>Introduction - External Secrets Operator (external-secrets.io)</li> </ul> </li> <li>K8S Network policies</li> <li>RBAC based service accounts bound to AD users</li> <li></li> </ul>"},{"location":"software-engineering/security/security-hardening/#advanced-topics","title":"Advanced topics","text":"<ul> <li>Honeypots<ul> <li>2021 Honeypot Introduction (Cyber Security Series) (youtube.com)</li> </ul> </li> </ul>"},{"location":"software-engineering/security/security-hardening/#it","title":"IT","text":"<ul> <li>VPN</li> <li>Firewalls</li> <li>VNet</li> <li>...</li> </ul>"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/","title":"Domain 1 security and risk management","text":"<ul> <li>CISSP Exam Cram - 2024 Addendum</li> <li>GitHub - jefferywmoore/CISSP-Study-Resources</li> <li>CISSP Practice Quiz \u2013 Inside Cloud and Security</li> </ul>"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/#manager-mindset","title":"Manager mindset","text":"<ul> <li>the-managers-path</li> <li>think-like-a-manager</li> </ul>"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/#5-pillars-caina","title":"5 Pillars (CAINA)","text":"<ul> <li>Confidentiality: the obligation to keep secret private information (data).   Differs from Privacy defined as the control of an individual over the information about them (users rights)</li> <li>Authenticity</li> <li>Integrity</li> <li>Non Repudiation</li> <li>Availability</li> </ul> <p>Security VS Risk Control Framework RCF: The WHY - structured approach to drive decisions SCF: The HOW - prescriptive (enforceable) set of cybersecurity safeguards.</p> <p>SCF could be a help in the actual implementation of a Risk framework.</p> RISK SECURITY SABSA SABSA ISO27001 ISO27002 FedRAMP)"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/#privacy","title":"Privacy","text":"<p>US tech companies can't export to Iran, Cuba, North Korea, Sudan, Syria. Privacy basic rules:     US: fourth amendment     EU: GDPR HIPAA: Health insurance HITECH: Health Information Technology Gramm-Leach financial COPPA: Children Online Privacy ECPA: Electronic Communication CALEA: Communications Assistance (wiretapping = monitoring of phone/internet comm.) PIPL Chinese personal information POPIA: South Africa</p>"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/#pia-privacy-impact-assessment","title":"PIA: Privacy Impact Assessment","text":"<p>Evaluate the damage of a data breach based on the current data that is processed and stored by the company or system.  It is required by GDPR and HIPAA. 7 Steps to Conduct a Privacy Impact Assessment</p>"},{"location":"software-engineering/security/CISSP/domain-1-security-and-risk-management/#legislation-conflicts","title":"Legislation conflicts","text":"<p>some legislations may conflict on the management of data or privacy made by multinational enterprises. There is no superior law, an expert is needed to solve the specific case (eg: GDPR VS CLOUD Act).</p> <p>Laws and Legislations are made by government entities and agencies, they must be followed to avoid incrimination. Standards and frameworks defines the basics to reach a minimum performance or suggest guidelines.</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/","title":"IPv4","text":"Classes Subnet Mask Networks A 255.0.0.0/8 2^7=128 B 255.255.0.0/16 2^14=~16000 C 255.255.255.0/24 ~2 mln Reserved 0.0.0.0/8 127.0.0.0/8 169.254.0.0/16 RFC1918 10.0.0.0 172.16.0.0 192.168.0.0"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#nat-network-address-translation","title":"NAT (Network Address Translation)","text":"<p>DNAT: multiple private IPs translated in 1 public IP Static NAT: 1 private IP for 1 public IP PAT: each private IP is assigned to a router port on the same public IP Port Forwarding SNAT and DNAT</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#remote-access","title":"Remote Access","text":""},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#conditional-access","title":"Conditional Access","text":""},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#mfa","title":"MFA","text":""},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#least-privilege","title":"Least Privilege","text":""},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#8021x","title":"802.1x","text":"<p>Port based authentication</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#patch-management","title":"Patch management:","text":"<p>Clients (remote endpoints) and VPNs should also part of periodic reviews and patches</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#virtual-private-cloud","title":"Virtual Private Cloud","text":"<p>Network security groups Subnets Internet gateway NAT gateway: logical software instance to separate subnets communications Network Peering</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#wireless-network-security","title":"Wireless Network Security","text":"<p>PSK pre-shared key Enterprise mode (802.1X authn)</p> <p>Wi-Fi Protection Access WEP  - RC4 - Vulnerable WPA  - TKIP - Vulnerable WPA2 802.11i - CCMP/AES - strong WPA3 - CCMP/AES, SAE - very strong</p> <p>Extensible Authentication Protocol (EAP) framework to adapt to multiple authn methods (TLS, Tunnelled TLS, LEAP...)</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#cellular","title":"Cellular","text":"<p>GSM UTMS HSPA+ 4G (LTE) 5G </p> <p>SIM cards (Subscriber Identity Module) ESN: electronic Serial Number</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#satellite","title":"Satellite","text":"<p>GPS ~27 satellites. each country or Region has its own satellite network. Mix of wired and wireless transmissions</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#microsegmentation","title":"Microsegmentation","text":"<p>VXLAN: encapsulation of LAN ethernet frames in UDP datagrams to route them through phisically  separated LANs Containerization Multi Protocol Label Switching (MPLS)</p>"},{"location":"software-engineering/security/CISSP/domain-4-communication-and-network-security/#edge-network","title":"Edge Network","text":"<p>DMZ CDN - edge computing devices</p>"},{"location":"software-engineering/security/CISSP/domain-7-security-operations/","title":"Incident Response","text":"<p>Steps 1. Detection 2. Response 3. Mitigation 4. Reporting 5. Recovery 6. Remediation 7. Lessons learned: root cause analysis</p>"},{"location":"software-engineering/security/CISSP/think-like-a-manager/","title":"Think like a manager","text":"<p>WHY? How do you justify your decisions?</p> Due diligence Due Care Plan the strategy to reach a goal Implementation of a plan Maintain the work done Security Audits Research and evaluation to drive a decision Implementation and operation after a decision Do Detect / Think Do Correct / Act"},{"location":"software-engineering/security/CISSP/think-like-a-manager/#priorities","title":"Priorities","text":"<p> img source</p> <p>Don't touch, Advise.</p> <p>Cost VS Value</p> <p>Safeguard Evaluation domain-1-security-and-risk-management Risk analysis formulas</p>"},{"location":"wellbeing/gym-at-home/","title":"Gym at home","text":"<p>1min + 30s recupero</p> <p>30kg - salti - piegamenti - bicipiti - clean and jerk</p> <p>40kg con bilanciere: - salti - piegamenti - bicipiti piegato in avanti - clean and jerk</p> <p>50kg - salti - piegamenti - front squat - alzate sulle punte</p> <p>Servono: 2 kettlebell da almeno 15kg 5 min riscaldamento gambe e spalle Pause 1:30 min 1:30m : 3x20 piegamenti + plank  3\u00d710 deep squat con alzata peso singilo sopra la testa (15kg) 3x10 squat con due manubri, e alzate 3x8 bicipiti con manubri in piedi</p>"},{"location":"work/interviews/","title":"Interviews","text":""},{"location":"work/interviews/#ai-prompt","title":"AI prompt:","text":"<ol> <li>Find the top 10 software companies with at least 500 employees and $10 million in capital that use X as their main product</li> <li>Sort them by Glassdoor rating</li> <li>This is my Linkedin profile: LINKEDIN_PROFILE</li> <li>Search for relevant open positions on Linkedin and company websites. If you can't find them, find the email address to send your CV.</li> <li>My experience is about 4 years as a functional analyst.</li> <li>My location is Rome, Italy.</li> <li>I prefer hybrid or remote work.</li> <li>Optimize my CV for each of the open positions found.</li> <li>Find the questions and exercises to prepare for each of these interviews. ... \u2014 Repeat and specialize the chats separately. Start the interviews from the lower rated companies and spread them out over time so that you can use what you learned in the previous interview in the next one.</li> </ol>"},{"location":"work/interviews/#salesforce-examples","title":"SALESFORCE examples:","text":"<ul> <li>Claude.ai</li> <li>Copilot </li> <li>Gemini </li> </ul>"},{"location":"work/interviews/#da-leggere","title":"Da leggere","text":"<ul> <li>Theoric concepts to keep in mind</li> <li>Cracking the coding interview</li> <li>How to write a minimal cv for tech job</li> <li>My old short cv</li> <li>Choose the manager not the company</li> <li>Autonomy, purpose, mastery together with a decent salary, not a higher salary without autonomy. [Drive]</li> </ul>"},{"location":"work/interviews/#claudeai-response","title":"Claude.ai response","text":"<p>... potremmo concentrarci sulle altre aziende della lista o su possibili avanzamenti di carriera all'interno di Accenture stessa. Vediamo come possiamo utilizzare queste informazioni per ottimizzare la tua ricerca di lavoro e la preparazione per i colloqui.</p> <p>Ottimizzazione del CV: 1. Evidenzia la tua esperienza in Accenture, specificando: \u00a0\u00a0\u00a0- Progetti Salesforce complessi su cui hai lavorato \u00a0\u00a0\u00a0- Il tuo ruolo nel team e le responsabilit\u00e0 chiave \u00a0\u00a0\u00a0- Risultati quantificabili ottenuti nei progetti</p> <ol> <li> <p>Crea una sezione \"Competenze Tecniche\" che includa: \u00a0\u00a0\u00a0- Salesforce (specificando i moduli in cui hai pi\u00f9 esperienza) \u00a0\u00a0\u00a0- Apex \u00a0\u00a0\u00a0- Visualforce \u00a0\u00a0\u00a0- Lightning Web Components \u00a0\u00a0\u00a0- ...</p> </li> <li> <p>Aggiungi una sezione \"Esperienza di Settore\" dove menzioni: \u00a0\u00a0\u00a0- Settore bancario \u00a0\u00a0\u00a0- Settore assicurativo \u00a0\u00a0\u00a0- Altri settori in cui hai lavorato</p> </li> <li> <p>Includi una sezione \"Soft Skills\" che evidenzi: \u00a0\u00a0\u00a0- Capacit\u00e0 di lavorare in team \u00a0\u00a0\u00a0- Abilit\u00e0 di gestione di progetti complessi \u00a0\u00a0\u00a0- Versatilit\u00e0 e adattabilit\u00e0 a diversi settori</p> </li> </ol> <p>Opportunit\u00e0 di carriera:</p> <ol> <li> <p>Accenture (interno): \u00a0\u00a0\u00a0- Cerca opportunit\u00e0 di avanzamento come Senior Salesforce Consultant o Team Lead \u00a0\u00a0\u00a0- Esplora possibilit\u00e0 di trasferimento in progetti internazionali o in altre divisioni</p> </li> <li> <p>Deloitte: \u00a0\u00a0\u00a0- Posizione: Senior Salesforce Consultant \u00a0\u00a0\u00a0- Contatto: careers.deloitte.com \u00a0\u00a0\u00a0- Focus: Evidenzia la tua esperienza multisettoriale e le competenze tecniche avanzate</p> </li> <li> <p>Capgemini: \u00a0\u00a0\u00a0- Posizione: Salesforce Technical Functional Consultant \u00a0\u00a0\u00a0- Contatto: capgemini.com/careers \u00a0\u00a0\u00a0- Focus: Sottolinea la tua conoscenza di Apex e Lightning Web Components</p> </li> <li> <p>IBM: \u00a0\u00a0\u00a0- Posizione: Salesforce Solution Architect \u00a0\u00a0\u00a0- Contatto: ibm.com/employment \u00a0\u00a0\u00a0- Focus: Metti in risalto la tua esperienza con progetti complessi e la capacit\u00e0 di lavorare in team</p> </li> <li> <p>Cognizant: \u00a0\u00a0\u00a0- Posizione: Senior Salesforce Business Analyst \u00a0\u00a0\u00a0- Contatto: careers.cognizant.com \u00a0\u00a0\u00a0- Focus: Evidenzia la tua esperienza nei settori bancario e assicurativo</p> </li> </ol> <p>Preparazione per i colloqui:   1. Domande tecniche specifiche: \u00a0\u00a0\u00a0- Puoi descrivere un caso in cui hai utilizzato Apex per risolvere un problema complesso? \u00a0\u00a0\u00a0- Come hai integrato Lightning Web Components in un progetto Salesforce? Quali sfide hai incontrato? \u00a0\u00a0\u00a0- Quale approccio usi per decidere tra una soluzione point-and-click e una soluzione custom in Salesforce?</p> <ol> <li> <p>Domande sull'esperienza di settore: \u00a0\u00a0\u00a0- Come hai adattato le soluzioni Salesforce alle specifiche esigenze del settore bancario/assicurativo? \u00a0\u00a0\u00a0- Puoi descrivere una sfida specifica del settore che hai affrontato e come l'hai superata usando Salesforce?</p> </li> <li> <p>Domande su progetti e team: \u00a0\u00a0\u00a0- Racconta di un progetto complesso in cui il tuo contributo \u00e8 stato decisivo. Cosa lo ha reso un successo? \u00a0\u00a0\u00a0- Come gestisci le situazioni in cui ci sono opinioni divergenti nel team di progetto?</p> </li> <li> <p>Esercizi pratici: \u00a0\u00a0\u00a0- Disegna l'architettura di una soluzione Salesforce per una banca che vuole migliorare la gestione dei clienti e l'onboarding \u00a0\u00a0\u00a0- Proponi una strategia per migrare un sistema legacy di un'azienda assicurativa a Salesforce, considerando dati, processi e formazione degli utenti</p> </li> <li> <p>Domande sulla crescita professionale: \u00a0\u00a0\u00a0- Dove ti vedi tra 3-5 anni nel campo Salesforce? \u00a0\u00a0\u00a0- Quali aree di Salesforce o tecnologie correlate ti interessano per il tuo sviluppo futuro?</p> </li> </ol> <p>Consigli aggiuntivi: 1. Prepara alcuni \"case study\" dei tuoi progetti pi\u00f9 significativi, pronti da presentare durante i colloqui 2. Aggiorna il tuo profilo LinkedIn con le nuove informazioni e competenze 3. Considera di ottenere ulteriori certificazioni Salesforce, se non le hai gi\u00e0</p> <p>Ricorda di adattare queste informazioni in base alla specifica posizione e azienda per cui ti candidi. La tua esperienza in Accenture e la tua conoscenza di tecnologie avanzate Salesforce ti posizionano molto bene per ruoli senior o di leadership in progetti Salesforce. Buona fortuna con la tua ricerca di lavoro!</p>"},{"location":"work/interviews/#team-and-company-info","title":"Team and company info","text":"<ul> <li> <p>I\u2019d like to know more about a typical working day:     What are the tools and the training provided?     What's your development methodology like (Agile, Waterfall, Scrum)?</p> </li> <li> <p>Is there a structured team or are there individual consultations?</p> </li> <li>What are the proportions between development, system activity and administrative activities?</li> <li>Is it fully cloud oriented?<ul> <li>Which Cloud do you use the most?</li> </ul> </li> <li>Which access roles do you have on the cloud? Admin?</li> <li> <p>How do the short and longer-term project goals get set and how is work distributed?</p> </li> <li> <p>How close is the relationship with the manager?     Are there periodic feedbacks or shared goals?     How are new tasks assigned?     Where will this position be placed in the company organigram?</p> </li> <li> <p>Company size and contract type</p> <ul> <li>Metalmeccanico o commercio</li> <li>Benefit</li> <li>Meal vouchers,\u00a0</li> <li>medical insurance,\u00a0</li> <li>discounts or specialisation courses and certifications</li> <li>Gym</li> <li>Sim card</li> <li>Smartphone (verify no calls are expected)</li> <li>Bonus</li> <li>Vacation days</li> <li>Training time</li> </ul> </li> <li> <p>Is there the possibility of smart working?</p> <ul> <li>How many days per week?</li> <li>badge?</li> </ul> </li> <li> <p>What are the goals for this project over the next year or two?</p> <ul> <li>What changes would you like to see in the way the project runs?</li> <li>What is expected to be achieved in the next 3 months?</li> </ul> </li> </ul>"}]}